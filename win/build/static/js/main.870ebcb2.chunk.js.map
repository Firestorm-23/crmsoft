{"version":3,"sources":["theme.js","reusable/tsfrmCustomerSelectionCntr.js","single/pkgInvoice/tsfrmProductSelectionCntr.js","single/pkgManageProducts/tsfrmStocksShell.js","reusable/tsfrmReports.js","single/pkgSupplier/tsfrmSingleInvoice.js","single/pkgSupplier/tsfrmProductSelectionCntr.js","admin/pkgManageUserAccount/tsdlgUser.js","reusable/tsclsDialog.js","admin/pkgCustomCustomersFields/tsdlgCustomerFields.js","admin/pkgCustomProductFields/tsdlgProductFields.js","admin/pkgCustomStockFields/tsdlgStockFields.js","admin/pkgInvoiceTypes/tsdlgInvoiceType.js","single/pkgGST/clsGSTUtils.js","tsclsHome.js","admin/tsclsDataJson.js","index.js","tsclsGenUtils.js","admin/pkgBackupAndRestore/frmBackup.js","admin/pkgBackupAndRestore/frmRestore.js","admin/pkgCustomCustomersFields/tsfrmCstFieldsShell.js","admin/pkgCustomProductFields/tsfrmProductFieldsShell.js","admin/pkgCustomStockFields/tsfrmStockFieldsShell.js","admin/pkgInvoiceTypes/tsfrmInvoiceTypeShell.js","admin/pkgManageUserAccount/tsfrmUserAccount.js","admin/pkgProjectDetails/tsfrmProjectForm.js","admin/pkgTemplateSelection/tsfrmInvoiceSelection.js","single/pkgInvoice/tplInvoices/tpl1.js","single/pkgInvoice/tplInvoices/tpl2.js","single/pkgManageCustomers/tplStatement/tpl1.js","single/pkgSupplier/tplInvoices/tpl1.js","single/pkgSupplier/tplInvoices/tpl2.js","single/pkgPayments/tplPaymentInvoices/tpl1.js","App.js","tsframAppBar.js","tsframMenu.js","tsfrmSinglePg.js","single/pkgInvoice/tsfrmInvoice.js","single/pkgManageCustomers/tsfrmCustomersGrid.js","single/pkgManageCustomers/tsdlgCustomers.js","single/pkgManageProducts/tsdlgStocks.js","reusable/tscmpProductSelection.js","single/pkgInvoice/tsfrmInvoiceViewer.js","reportWebVitals.js","reusable/cmpFilters.js","reusable/tscmpChart.js","single/pkgManageCustomers/tsclsStatement.js","single/pkgSupplier/tsfrmInvoice.js","single/pkgSupplier/tsfrmInvoiceViewer.js","single/pkgManageProducts/tsdlgProducts.js","single/pkgPayments/tsfrmPaymentInvoice.js","tsfrmLogin.js","single/pkgGST/frmGSTR1.js","single/pkgInvoice/tsfrmInvoicesShell.js","single/pkgManageCustomers/tsfrmCustomerStatement.js","single/pkgManageProducts/tsfrmProductsGrid.js","single/pkgPayments/tsfrmPaymentHistory.js","single/pkgPayments/tsfrmPaymentInOut.js","single/pkgReports/frmBillWiseProfit.js","single/pkgReports/frmCashflowReport.js","single/pkgReports/tsfrmDateWiseProfitReport.js","single/pkgReports/tsfrmProductSaleReport.js","single/pkgReports/tsfrmProductWiseProfitReport.js","single/pkgSupplier/tsfrmInvoicesShell.js","single/tsfrmHome.js","../src sync /^/.*$","single/pkgInvoice/tplInvoices sync /^/.*$","admin sync /^/.*$","logo.svg","reusable/tsclsLoading.js","reusable/tscmpInvoiceType.js","single/pkgManageCustomers/tplStatement sync /^/.*$","single/pkgSupplier/tplInvoices sync /^/.*$","single/pkgPayments/tplPaymentInvoices sync /^/.*$","tsclsGenConstants.js","single/pkgInvoice/tsfrmSingleInvoice.js"],"names":["theme","createTheme","palette","background","paper","default","primary","main","light","dark","contrastText","secondary","typography","button","textTransform","h3","fontSize","breakpoints","up","tsfrmCustomerSelectionCntr","props","state","FetchedData","IsDialogOpen","IsAlertDialogOpen","SCstObj","cstName","LMe","this","isEmpty","FSelectedRecord","cstId","pvtFetchCustomerById","p_intCustomerId","LUrl","BaseUrl","LRequestOptions","method","headers","tsGetProjectId","fetch","then","response","json","responseJson","status","HandleOnSelect","error","onClick","color","variant","size","startIcon","IsSelectMode","p_objRecord","SelectedRecord","p_objSelectedRecord","LSelectedRecord","FWarningText","setState","SetCstId","id","OnDialogClose","DialogContent","pvtGetDialogContent","DialogActions","pvtGetDialogAction","DialogHeader","PFieldLbl","DialogLoading","IsWindow","style","padding","margin","PCanShowHeaderLabel","label","required","onChange","e","LObj","currentTarget","value","InputProps","readOnly","pvtGetDialog","Component","tsfrmProductSelectionCntr","SArrProducts","GridColumns","GridEditRowsModel","IsSnackOn","FDataGrid","React","createRef","pvtDefineProperties","FGrandTotal","FIsEditMode","PProductsArr","forEach","pvtFetchProductsStockById","productId","p_objProductResponse","product","stockId","p_objStockResponse","sellingPrice","soldPrice","stock","prevProps","prevState","snapshot","PInvoiceType","FProductColumns","FStockColumns","pvtFetchProductsFields","GenConstants","PRODUCT_CSTM_FIELDS","STOCK_CSTM_FIELDS","p_url","p_callBack","message","p_strField","LInvoiceType","pvtLoadGridColumns","LArrColumn","LArrConcated","concat","field","headerName","headerClassName","minWidth","flex","width","isSystemField","fieldName","columnName","push","type","editable","renderCell","p_objParams","getValue","cloneVar","LArrProducts","LArrSelectedProducts","LStockId","qty","rQty","PIsReadOnlyMode","SetGrandTotal","SetProducts","FSelectedRecordInvoice","LGrandTotal","LResProducts","gst","price","className","disableElevation","pvtHandleOnDeleteButtonClick","LRow","LColumns","LRows","LColumnUI","LRowUI","p_index","p_intRowIndex","p_objColRecord","p_intColIndex","length","LIndex","LColIndex","LStyle","overflowX","PIsPrintMode","pvtGetReadOnlyComponent","pvtGetToolBar","columns","rows","pagination","csvOptions","allColumns","hideFooter","ref","density","minHeight","onCellEditCommit","LOldArrProducts","LUpdateProduct","FSnackMsg","onRowClick","pvtHandleOnRowClick","row","anchorOrigin","vertical","horizontal","open","onClose","tsfrmStocksShell","CanInvokeDialogOpen","StockRecord","IsCnfrmDialogOpen","ColumnFields","pvtGetGridColumn","SInvoiceType","SProduct","F_callBackOnCnfrmTrue","pvtRefresh","LStateObj","PESTICIDE_ACT_CODE","PProductId","isObjEmpty","pvtFetchStocksFields","p_actCodeInvoiceType","pvtFetchStocks","p_intProductId","LProductId","success","p_arrFields","fieldType","SYSTEM_FIELD","isRequired","isField","FIELD_NUMBER","hide","UpdateStockStore","p_objUser","InvoiceType","ProductId","ProductDispName","productName","p_objParam","LRecord","p_objResponseUser","LArrResponse","LIsNewRecord","stockColumns","pvtEditStock","FCnfrmText","pvtDelete","LArrFetchedData","body","JSON","stringify","p_canShowWarningIcon","component","display","px","pb","mt","Value","OnChange","p_value","pvtHandleOnInvoiceTypeChange","EmptyText","pvtGetHeader","pvtGetInvoiceType","pvtHandleOnProductChange","pvtHandleOnEditButtonClick","title","loading","components","Toolbar","GridToolbar","onCellDoubleClick","params","pvtLoadDialog","pvtGetWarningDlgAction","tsfrmReports","SColumnData","fromDate","toDate","SLoading","IsProductDialogOpen","SIsChartView","pvtSetDefaultValuesInFilter","setTimeout","pvtGenerateReport","tsGetDefaultToDate","tsGetDefaultFromDate","PIsChartView","Date","pvtValidate","LParamObj","invoiceType","PFetchProductDetails","p_objResponse","p_ParamObj","PFetchProductsFields","p_columnData","PGetGridColumn","POnDblClick","CanShowDetailedView","PGetDialogContent","PRecords","PChartConfig","FGridRef","pvtHandleOnRowDoubleClick","CanAddPsudoNode","PCanAddPsudoNodeInInvoiceType","InputLabelProps","shrink","exclusive","pvtGetChart","pvtGetGridView","PLoadingText","PIsLoading","POnStopLoading","pvtGetProductDialog","tsfrmSingleInvoice","SIsDialogLoading","SProductsArr","SPaymentFields","SCustomerData","SInvoiceTpl","FInvoiceRef","FProjectDataFetchedForActCode","PSelectedRecord","FIsReadOnly","FInvoiceRecord","invoiceNo","pvtFetchPaymentDetails","pvtFetchInvoicesProductByTypeAndId","pvtFetchInvoice","LParam","match","PInvoiceNoAndType","p_strInvoiceType","p_intInvoiceNo","PSUDO_INVOICE_TYPE_ALL","pvtFetchCustomersFields","CUSTOMER_CSTM_FIELDS","pvtFetchCustomers","p_arrCstFields","LCstId","cstFields","cstFieldValues","LInvoice","products","customerData","creditedAmount","total","credit","debit","mode","remark","strInvoiceNo","PIsDetailedView","pvtLoadTemplate","PIsOpenInDialog","p_callback","p_objInvoice","LTplActionCode","PTplActionCode","pvtFetchProjectDetails","p_objProjectData","defaultInvoice","TModule","require","PInvoice","PProjectData","current","EditInvoice","pvtHandleOnClose","tsGetInvoiceDispNameByActionCode","tsGetInvoiceDispNoByInvoiceNo","costPrice","purchasedPrice","tqty","tsfrmUserDialog","ShowPassword","IsLoading","AlertDialog","AlertDialogContent","AlertDialogHeader","SDisplayName","SUsername","SPassword","SIsActive","SOrgName","IsOTPDialogOpen","SOTPValue","FIsEmailSent","UserRecord","displayName","username","password","isActive","pt","flexDirection","placeholder","fullWidth","LIsEditMode","pvtIsEmailValid","helperText","endAdornment","position","PIsSignUpForm","control","icon","checkedIcon","target","checked","pvtSaveUser","LAlertStateObj","LIsValid","RegExp","test","PAllUsers","LAllUsers","LIsActiveElementFound","p_strEmail","IsEmailValid","LEmailId","email","FLoadingText","canCreateNewProject","orgName","otp","UpdateUserStore","PHandleOnSignUp","pvtSendOTP","pvtGetOTPDialogContent","PaperComponent","handle","cancel","tsclsDialog","IsFullScreen","cursor","edge","disableRipple","pvtGetLoadingCmp","maxWidth","fullScreen","pvtGetAppHeader","tsdlgCustomerFields","SFieldName","SFieldType","SIsRequired","FIELD_TEXT","FIELD_DATE","tsdlgProductFields","pvtSave","tsdlgStockFields","SSingularInvoiceType","SInvoiceTypeStartsWith","NAME","SINGULAR_NAME","INVOICE_NO_STARTS_WITH","clsGSTUtils","tsGetDateFromServerDateForInpField","toFixed","IGST","tsGetIGSTAmount","CGST","tsGetGstAmount","SGST","cellClassName","LValue","Math","abs","pvtGetIGST","pvtGetGST","tsclsHome","LIsSideMenuVisible","tsIsMobileView","IsSideMenuVisible","FMenuList","IsShowLoading","FUserDetails","pvtFetchInvoiceTypes","pvtFetchMenuJson","tsIsUserLoggedIn","LogOut","history","SIsLoading","tsSetInvoiceType","expDate","p_event","pvtGetParamalink","split","onLoadComplete","HideLoading","Paramalink","arrMenuItems","isVisible","OnNodeSelect","HandleOnNodeSelect","pvtGetSingleCmp","TDataJson","moduleType","pvtGetModuleType","historyProp","paramalink","Title","GetUserDetails","p_response","CanShowBackButton","pvtShowLoading","pvtGetAdminBody","pvtGetAppBody","tsclsDataJson","LHistoryProp","LPathName","location","pathname","children","moduleTitle","moduleDescription","moduleClass","hidden","iconCmp","isFeatureAvailableInWeb","IsDesktopApp","parentModuleType","p_moduleType","LComponent","ml","pvtHandleOnLinkClick","p_arrDataJson","LDataJson","pvtGetDataJson","pvtIsFeatureAvailableInWeb","pvtGetUIComponent","LModuleType","tsSearchTree","pvtGetBreadcrumbs","pvtGetJsonFilesComponent","moduleInfo","p_boolIsFeatureAvailableInWeb","separator","bgcolor","pvtGetSingleModule","ReactDOM","render","StrictMode","document","getElementById","reportWebVitals","window","origin","LArrEmail","String","toLowerCase","Array","isArray","process","versions","electron","navigator","userAgent","indexOf","OriginUrl","FObjLoggedInUserDetails","FInvoiceTypeArr","p_objHistoryProp","tsSaveInLocalStorage","tsClearCache","tsLogin","p_username","p_password","p_params","tsKey1","tsKey2","tsLoggenUserId","userId","tsProjectId","projectId","tsGetLoggedInUser","parse","tsGetFromLocalStorage","innerWidth","tsGetTimeBySeconds","p_sec","d","Number","h","floor","m","s","toString","p_objTree","p_field","p_val","LResult","allowEmptyString","object","key","hasOwnProperty","call","isDate","FindRecordInArrOfObj","p_array","p_property","p_jsDate","LDateObj","toLocaleString","tsGetDateFromServerDateForPrintField","toLocaleDateString","p_arrInvoiceTypes","tsGetInvoiceTypes","p_boolCanIncludeSystemTypes","PAYMENT_IN","ACT_CODE","PAYMENT_IN_ACT_CODE","PAYMENT_OUT","PAYMENT_OUT_ACT_CODE","p_strActionCode","LDispName","some","tsGetPaymentModes","name","item","cloneDom","undefined","nodeType","cloneNode","i","j","k","clone","getTime","constructor","Object","enumerables","p_invoiceType","p_intIsPurchaserInvoice","LInvocieNo","num","pvtPadLeadingZeros","tsIsInvoiceByType","LInvoiceTypeArr","p_arrProducts","p_intGrandTotal","p_strPriceField","LGrandTotalOfCSGST","LGST","gstType","LGrandTotalOfIGST","LDate","getFullYear","getMonth","slice","getDate","tsConvertNumInToWords","a","b","n","substr","str","tsPrintSupplierInvoice","p_invoiceNo","tsFirePrintCmd","url","landscape","pageSize","tsGenerateSupplierInvoicePDF","pvtGeneratePDF","downloadedFileName","tsPrint","tsPaymentPrint","tsStatementPrint","p_intCstId","p_strFromDate","p_strToDate","console","LWindow","onload","print","tsGenerateInvoicePDF","tsGeneratePaymentInvoice","tsGenerateStatement","tsDownlodByLink","p_strDownloadedFileName","LAnchor","createElement","setAttribute","click","p_key","localStorage","setItem","getItem","tsGetDisplayTextByTaxType","p_strTaxTypeValue","tsGetTaxTypes","text","CSGST","tsGetStates","frmBackup","p_boolCanDownload","pvtOnDownloadBtnClick","pvtOpenFolder","marginTop","FForm","FFileField","LSelectedFileName","submit","enctype","action","accept","multiple","pvtOnBtnClick","bind","tsfrmCstFieldsShell","CanShowWarningIcon","pvtEditUser","pvtLoadDlg","tsfrmProductFieldsShell","tsfrmStockFieldsShell","p_boolGetFromCache","pvtEdit","tsfrmUserAccount","pvtFetchUsers","sort","pvtLoadUserDialog","tsfrmProjectForm","SIsEditMode","SFetchedData","p_strLic","replaceAll","LProjectDetails","pvtGetHeaderBox","orgAddress","orgCity","orgPincode","propName","propMobileNo","propState","options","getOptionLabel","option","clearOnEscape","p_reason","renderInput","pvtGetLiscenseDispName","liscenseNos","tsfrmInvoiceSelection","STemplate","SInvoiceNo","pvtLoadTemplates","FTplActionCode","FTemplatesArr","tplActionCode","tplTitle","LArrUITpl","PIsShowingInApp","event","pvtGetTemplates","fontWeight","textAlign","border","pvtGetInvoice","tsfrmInvoiceViewer","SProducts","LCstData","p_objCustomerData","p_objCstValues","cstBalance","L_funGetBalance","cstGSTNo","p_liscenseNos","LUI","p_licNo","p_strPropertyText","LGstAmount","LObjInvoice","LObjPrjData","pvtGetLicencesUI","borderTop","pvtGetCustomerFields","invoiceDate","borderBottom","grandTotal","borderLeft","pvtGetGSTContainer","paddingTop","marginLeft","marginRight","tpl1","p_intIndex","p_arrPaymentRecords","LArrRows","paymentDate","isPurchaserInvoice","balance","PReqParam","pvtGetTableRows","paymentRecords","LIsCreditMode","paymentRecord","App","exact","path","HomePage","TSupplierSingleInvoice","TSingleInvoice","TPaymentInvoice","TStatement","LoginPg","tsframAppBar","IsOpenAccountPopOver","FetchedObj","pvtFetchUserDetails","LLocalStorageResponse","atob","pvtHandleOnSuccessUserDetails","btoa","pvtHandleOnBackupClick","LIsPopOverOpen","pvtHandleOnAdminClick","pvtGetBackupButton","anchorEl","transformOrigin","dense","pvtOnClearCache","pvtLogout","goBack","pvtBackBtnOnClick","flexGrow","pvtGetSideIcon","zIndex","MenuCls","FArrOfIds","LArrSyllabus","LArrComponent","htmlColor","items","pvtCreateTreeCmp","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","onNodeSelect","selected","p_arrTree","LCmp","LHint","LLenSyllabus","toolTip","displayTxt","justifyContent","nodeId","placement","direction","in","mountOnEnter","unmountOnExit","backgroundColor","overflow","boxShadow","pvtGetListItems","tsfrmSinglePg","p_strParamalink","LTree","LObjMenuItems","pvtGetContainer","tsfrmInvoice","SPayingAmount","SGrandTotal","SPaymentMode","SRemark","FGridPanel","ResetFields","LKey","LArrPaymentModes","replace","GetProductJson","LRequestJson","payingAmount","pvtResetAllFields","pvtGenerateBtnClick","pvtGetPaymentModeMenuItems","pvtGetPaymentFields","pvtGetSaveBtn","tsfrmCustomersGrid","CustomerRecord","SortingModel","FSearchField","firstElementChild","FAllFetectedRecords","pattern","STATE_FIELD","UpdateCustomerStore","pvtFilterOnSearch","pvtEditCustomer","p_searchText","LCustomers","LFilteredRecords","filter","p_objCustomer","includes","sortModel","onSortModelChange","model","tsdlgCustomers","SFields","FIsInvokedFirstTime","LColumnFields","LStateFields","LArrFields","pvtGetLastSelectedState","LastSelectedState","pvtSaveCustomer","LArrFieldNames","fieldsArr","pvtResetFields","tsdlgStocks","inputProps","min","pvtSaveProduct","tscmpProductSelection","pvtFetchProducts","LState","LArrMenuItem","SIsDialogOpen","SIsDialogOpenInReadOnlyMode","p_objResponseJson","pvtPrint","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","cmpFilters","onFilterApplied","PCanAddShowInvoiceType","pvtGetInvoiceTypeContainer","tscmpChart","height","data","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","xAxisDataKey","strokeDasharray","lineDataKey","dispName","stroke","fillOpacity","fill","tsclsStatement","LParams","p_objPrjDetails","p_reqParams","defaultStatement","p_paramObj","SStrInvoiceNo","tsdlgProducts","ProductRecord","GST_FIELD","pvtGetGstTypes","UpdateProductStore","tsfrmPaymentInvoice","LPaymentId","pvtFetchPaymentRecord","p_objPaymentRecord","defaultPaymentInvoice","p_intPaymentId","Copyright","align","useStyles","makeStyles","root","image","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","spacing","alignItems","avatar","form","SignInSide","classes","LBtnText","useState","FUsername","setUsername","FPassword","setPassword","FIsAlertDialogOpen","setOpenAlertDlg","setWarningText","FButtonText","setButttonText","isDialogOpen","SIsForgotPasswordMode","isForgotPasswordMode","setLoading","setSnackStatus","pvtOnSuccess","p_responseJson","container","xs","sm","md","Paper","elevation","square","noValidate","autoComplete","autoFocus","pvtLogin","disabled","pvtForgotPassword","frmGSTR1","SActiveGSTTab","GSTR1","SToDate","SFromDate","p_arrResponseJson","FGSTUtils","TGSTUtils","GetGSTR1Columns","B2CS","GetB2CSColumns","B2CL","GetB2CLColumns","B2B","GetB2BColumns","HSN","GetHSNColumns","pvtLoadData","tsfrmInvoicesShell","pvtSetDefaultFromDateAndToDate","pvtFetchInvoices","p_boolIsReadOnlyMode","pvtOpenInvoice","parseInt","href","tsfrmCustomerStatement","SIsInvoiceDlgOpen","SIsSupplierInvoiceDlgOpen","p_canPrint","LInvoiceNo","pvtHandleOnRowDblClick","pvtGetInvoiceDialog","pvtGetSupplierInvoiceDialog","tsfrmProductsGrid","pvtResetSearchField","pvtEditProduct","tsfrmPaymentHistory","PCanShowSystemTypes","tsfrmPaymentInOut","SPaymentType","SAmount","multiline","frmBillWiseProfit","GetInvoiceWiseProfitColumns","pvtFetchProductDetails","frmCashflowReport","SDataOnUI","FTotalAmount","totalSale","totalCredit","totalDebit","FDefaultExpandedNodeIds","pvtGetLoadingCntr","p_objSelectedFilterConditions","pvtLoadDataOnUI","pvtLoadSaleOnUI","sale","pvtLoadPurchaseOnUI","purshare","p_strHint","LPendingAmount","LCreditAmount","LDebitAmount","LPayingAmountText","LTreeItems","LHintCredit","LIsCreditDebitMode","pvtGetHintWithStyle","LHintDebit","LHintPending","pvtOnFilterApplied","tsfrmDateWiseProfitReport","tsfrmProductSaleReport","p_InvoiceType","PStockId","tsfrmProfitReport","pvtGetProductDialogContent","tsfrmHome","lineHeight","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","module","exports","tsclsLoading","tscmpInvoiceType","pvtHandleOnChange","LArrInvoiceTypes","pvtGetItems","PESTICIDES","PESTICIDE_SINGULAR_NAME","FERTILZERS","FERTILZER_SINGULAR_NAME","FERTILZER_ACT_CODE","OTHER_IT","OTHER_IT_SINGULAR_NAME","OTHER_IT_ACT_CODE","SEEDS","SEED_SINGULAR_NAME","SEED_ACT_CODE","CDNR","CDNUR","EXP","ITEM_WISE_SALE","ITEM_WISE_SALE_RETURN","ITEM_SUMMARY"],"mappings":"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","file":"static/js/main.870ebcb2.chunk.js","sourcesContent":["import { createTheme } from \"@material-ui/core\";\r\n// import { deepPurple, green } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createTheme({\r\n    // direction: \"rtl\",\r\n    palette: {\r\n        // type: 'dark',\r\n\r\n        // primary: {\r\n        //     main: deepPurple[500]\r\n        // },\r\n\r\n        background: {\r\n            paper: '#fff',\r\n            default: '#fff'\r\n        },\r\n\r\n        //Blue\r\n        primary: {\r\n            main: '#2196f3',\r\n            light: '#4dabf5',\r\n            dark: '#1769aa',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            light: '#039be5',\r\n            main: '#f44336',\r\n            dark: '#ba000d',\r\n            contrastText: '#fff',\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n});\r\ntheme.typography.h3 = {\r\n    fontSize: '1.2rem',\r\n    '@media (min-width:600px)': {\r\n        fontSize: '1.5rem',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n        fontSize: '2.4rem',\r\n    }\r\n};\r\n\r\nexport default theme;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport { isEmpty, BaseUrl, tsGetProjectId } from '../tsclsGenUtils';\r\nimport TDialog from './tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TGridCustomer from '../single/pkgManageCustomers/tsfrmCustomersGrid';\r\n\r\nclass tsfrmCustomerSelectionCntr extends Component {\r\n    /**\r\n     * @props \r\n     * SetCstId function: This is called when customer is selected or selection is changed.\r\n     * cstId: If this class got the cstId prop then this class will fetch the customer for that id\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: [],\r\n            IsDialogOpen: false,\r\n            IsAlertDialogOpen: false,\r\n            SCstObj: {\r\n                cstName: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true && isEmpty(LMe.props.cstId) === false && LMe.props.cstId !== -1) {\r\n\r\n            LMe.pvtFetchCustomerById(LMe.props.cstId);\r\n        }\r\n    }\r\n\r\n    pvtFetchCustomerById(p_intCustomerId) {\r\n        /**\r\n         * @method pvtFetchCustomerById\r\n         * This function will fetch the customer\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'customers/' + p_intCustomerId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.HandleOnSelect(responseJson);\r\n                },\r\n                (error) => { }\r\n            );\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <Button\r\n                onClick={() => { LMe.HandleOnSelect() }}\r\n                color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n                Select\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            <TGridCustomer\r\n                IsSelectMode={true}\r\n                HandleOnSelect={(p_objRecord) => LMe.HandleOnSelect(p_objRecord)}\r\n                SelectedRecord={(p_objRecord) => LMe.FSelectedRecord = p_objRecord}\r\n            ></TGridCustomer>\r\n        );\r\n    }\r\n\r\n    HandleOnSelect(p_objSelectedRecord) {\r\n        /**\r\n         * @method HandleOnSelect\r\n         * This method handle on select the record from pop up\r\n         */\r\n        var LMe = this,\r\n            LSelectedRecord = p_objSelectedRecord || LMe.FSelectedRecord;\r\n\r\n        if (isEmpty(LSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Customer and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.props.SetCstId(LSelectedRecord.id || -1);\r\n        LMe.setState({ IsDialogOpen: false, SCstObj: LSelectedRecord });\r\n    }\r\n\r\n    pvtGetDialog() {\r\n        var LMe = this;\r\n\r\n        if (LMe.state.IsDialogOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsDialogOpen: false })}\r\n                DialogContent={LMe.pvtGetDialogContent()}\r\n                DialogActions={LMe.pvtGetDialogAction()}\r\n                DialogHeader={LMe.props.PFieldLbl || 'Select Customer'}\r\n                DialogLoading={false}\r\n                IsWindow={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <>\r\n                <Box style={{ padding: '5px 5px 30px 20px', margin: '0px 20px 0 0' }} variant=\"outline\">\r\n                    <h4>{LMe.props.PCanShowHeaderLabel !== false && (LMe.props.PFieldLbl || 'Select Customer')}</h4>\r\n\r\n                    <TextField\r\n                        // label={isEmpty(LMe.state.SCstObj.cstName) ? 'Select Customer' : ''}\r\n                        label={LMe.props.PFieldLbl || 'Select Customer'}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n                            var LObj = LMe.state.SCstObj || {};\r\n\r\n                            LObj.cstName = e.currentTarget.value;\r\n                            LMe.setState({ SCstObj: LObj });\r\n                        }}\r\n                        value={LMe.state.SCstObj.cstName}\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}\r\n                        onClick={() => {\r\n                            LMe.setState({ IsDialogOpen: true });\r\n                        }}\r\n                        margin=\"dense\" style={{ margin: '-10px 0 0 0' }} />\r\n                </Box>\r\n\r\n                {/* Window */}\r\n                {LMe.pvtGetDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmCustomerSelectionCntr;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Snackbar\r\n} from '@material-ui/core';\r\nimport { isEmpty, BaseUrl, cloneVar, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TProductStockSelection from '../pkgManageProducts/tsfrmStocksShell';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nclass tsfrmProductSelectionCntr extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsDialogOpen: false,\r\n            IsAlertDialogOpen: false,\r\n            SArrProducts: [],\r\n            GridColumns: [],\r\n            GridEditRowsModel: {},\r\n            IsSnackOn: false\r\n        };\r\n\r\n        LMe.FDataGrid = React.createRef();\r\n    }\r\n\r\n    ResetFields() {\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SArrProducts: [],\r\n            // GridColumns: [],\r\n            GridEditRowsModel: {}\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtDefineProperties();\r\n\r\n        LMe.FGrandTotal = 0;\r\n        LMe.FIsEditMode = false;\r\n\r\n        if (isEmpty(LMe.props.PProductsArr) === false) {\r\n\r\n            LMe.FIsEditMode = true;\r\n\r\n            LMe.props.PProductsArr.forEach(function (p_objRecord) {\r\n\r\n                LMe.pvtFetchProductsStockById(BaseUrl() + 'products/' + p_objRecord.productId, function (p_objProductResponse) {\r\n\r\n                    p_objRecord.product = p_objProductResponse || {};\r\n                    LMe.pvtFetchProductsStockById(BaseUrl() + 'stocks/' + p_objRecord.stockId, function (p_objStockResponse) {\r\n\r\n                        p_objStockResponse = p_objStockResponse || {};\r\n\r\n                        p_objStockResponse.sellingPrice = p_objRecord.soldPrice;\r\n\r\n                        p_objRecord.stock = p_objStockResponse;\r\n                        LMe.HandleOnSelect(p_objRecord);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /**\r\n         * @method componentDidUpdate\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        if (prevProps.PInvoiceType !== LMe.props.PInvoiceType) {\r\n\r\n            LMe.pvtDefineProperties();\r\n        }\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n\r\n        var LMe = this;\r\n\r\n        LMe.FProductColumns = [];\r\n        LMe.FStockColumns = [];\r\n\r\n        LMe.setState({\r\n            SArrProducts: [],\r\n            GridColumns: [],\r\n        });\r\n\r\n        LMe.pvtFetchProductsFields(GenConstants().PRODUCT_CSTM_FIELDS);\r\n        LMe.pvtFetchProductsFields(GenConstants().STOCK_CSTM_FIELDS);\r\n    }\r\n\r\n    pvtFetchProductsStockById(p_url, p_callBack) {\r\n        /**\r\n         * @method p_objRecord\r\n         * First fetches the product details then stock details\r\n         */\r\n\r\n        var LMe = this,\r\n            //Url\r\n            LUrl = p_url;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.error === true) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n                        p_callBack(responseJson);\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchProductsFields(p_strField) {\r\n        /**\r\n         * @method pvtFetchProductsFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LInvoiceType = LMe.props.PInvoiceType;\r\n\r\n        if (isEmpty(LInvoiceType) === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        //Url\r\n        LUrl = BaseUrl() + 'customFields/type/' + p_strField + '/' + LInvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.error === true) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (p_strField === GenConstants().PRODUCT_CSTM_FIELDS) {\r\n\r\n                        LMe.FProductColumns = responseJson || [];\r\n                    }\r\n                    else {\r\n\r\n                        LMe.FStockColumns = responseJson || [];\r\n                    }\r\n\r\n                    LMe.pvtLoadGridColumns();\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadGridColumns() {\r\n        /**\r\n         * @method pvtLoadGridColumns\r\n         * This method will create the columns for invoice from stock columns and product columns\r\n         */\r\n        var LMe = this,\r\n            LObj,\r\n            LArrColumn = [],\r\n            LArrConcated = LMe.FProductColumns.concat(LMe.FStockColumns);\r\n\r\n        LArrColumn = [\r\n            {\r\n                field: 'productName',\r\n                headerName: 'Particulars',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                flex: 1,\r\n                color: 'primary'\r\n            },\r\n            {\r\n                field: 'hsn',\r\n                headerName: 'HSN',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary'\r\n            },\r\n        ];\r\n\r\n        LArrConcated.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isSystemField === true) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LObj = {};\r\n\r\n            LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n            //Setting column name\r\n            LObj['field'] = p_objRecord.columnName;\r\n            LObj['headerClassName'] = 'tsGridHeader';\r\n            LObj['minWidth'] = 130;\r\n\r\n            // LObj['fieldType'] = p_objRecord.fieldType;\r\n            // LObj['isRequired'] = p_objRecord.isRequired === 1;\r\n\r\n            LArrColumn.push(LObj);\r\n        });\r\n\r\n        LArrColumn.push(\r\n            {\r\n                field: 'gst',\r\n                headerName: 'GST %',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary',\r\n                type: 'number',\r\n            },\r\n            {\r\n                field: 'qty',\r\n                headerName: 'Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 150,\r\n                color: 'primary',\r\n                type: 'number',\r\n                editable: true\r\n            },\r\n            {\r\n                field: 'sellingPrice',\r\n                headerName: 'Price',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary',\r\n                type: 'number',\r\n                editable: true\r\n            },\r\n            {\r\n                field: 'total',\r\n                headerName: 'Total',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                type: 'number',\r\n                color: 'primary',\r\n                renderCell: (p_objParams) => {\r\n                    // var LRecord = p_objParams.row;\r\n                    // // return (LRecord.qty || 1) * LRecord.sellingPrice;\r\n\r\n                    return (p_objParams.getValue(p_objParams.id, 'qty') || 1) * (p_objParams.getValue(p_objParams.id, 'sellingPrice'));\r\n                }\r\n            },\r\n        );\r\n\r\n        LMe.setState({ GridColumns: LArrColumn });\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.HandleOnSelect() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            Select\r\n        </Button>);\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            <TProductStockSelection\r\n                IsSelectMode={true}\r\n                HandleOnSelect={(p_objRecord) => LMe.HandleOnSelect(p_objRecord)}\r\n                SelectedRecord={(p_objRecord) => LMe.FSelectedRecord = p_objRecord}\r\n                PInvoiceType={LMe.props.PInvoiceType}\r\n            ></TProductStockSelection>\r\n        );\r\n    }\r\n\r\n    HandleOnSelect(p_objSelectedRecord) {\r\n        /**\r\n         * @method HandleOnSelect\r\n         * This method handle on select the record from pop up\r\n         */\r\n        var LMe = this,\r\n            LSelectedRecord = cloneVar(p_objSelectedRecord) || LMe.FSelectedRecord;\r\n\r\n        if (isEmpty(LSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Product and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        // LSelectedRecord contains: product and stock\r\n\r\n        var LArrProducts = LMe.state.SArrProducts || [],\r\n            LArrSelectedProducts = [];\r\n\r\n        //Getting stock id\r\n        var LStockId = LSelectedRecord.stock.id;\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.stockId === LStockId) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LArrSelectedProducts.push(p_objRecord);\r\n        });\r\n\r\n        //Delete id field for avoiding conflict\r\n        LSelectedRecord.stock.id = '';\r\n\r\n        var LObj = { ...LSelectedRecord.product, ...LSelectedRecord.stock };\r\n\r\n        //Setting Default quantity\r\n        LObj.qty = LSelectedRecord.qty || 1;\r\n\r\n        LObj.rQty = LSelectedRecord.stock.qty;\r\n\r\n        //Adding remeaining qty to orginal qty for edit mode\r\n        if (LMe.FIsEditMode === true) {\r\n\r\n            LObj.rQty += LObj.qty;\r\n        }//if..\r\n\r\n        if (LObj.rQty < 1 && LMe.props.PIsReadOnlyMode !== true) {\r\n\r\n            LMe.FWarningText = 'Selected Product is out of stock.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        }//if..\r\n\r\n        LObj.stockId = LStockId;\r\n\r\n        LObj.id = LStockId;\r\n\r\n        LArrSelectedProducts.push(LObj);\r\n\r\n        LMe.FGrandTotal += (LObj.sellingPrice * LObj.qty);\r\n        LMe.props.SetGrandTotal(LMe.FGrandTotal);\r\n\r\n        if (isEmpty(LMe.props.SetProducts) === false) {\r\n\r\n            LMe.props.SetProducts(LArrSelectedProducts);\r\n        }\r\n\r\n        LMe.setState({\r\n            IsDialogOpen: false,\r\n            SArrProducts: LArrSelectedProducts || []\r\n        });\r\n    }\r\n\r\n    pvtHandleOnDeleteButtonClick() {\r\n        /**\r\n         * @method pvtHandleOnDeleteButtonClick\r\n         * This method will remove the selected item from invoice\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecordInvoice) === true) {\r\n            LMe.FWarningText = 'Select a product and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        var LArrProducts = LMe.state.SArrProducts || [],\r\n            LArrSelectedProducts = [];\r\n\r\n        //Getting stock id\r\n        var LStockId = LMe.FSelectedRecordInvoice.stockId,\r\n            LGrandTotal = 0;\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.stockId === LStockId) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LGrandTotal += (p_objRecord.sellingPrice * p_objRecord.qty);\r\n\r\n            LArrSelectedProducts.push(p_objRecord);\r\n        });\r\n\r\n        LMe.FGrandTotal = LGrandTotal;\r\n        LMe.props.SetGrandTotal(LMe.FGrandTotal);\r\n\r\n        LMe.FSelectedRecordInvoice = null;\r\n\r\n        LMe.setState({\r\n            SArrProducts: LArrSelectedProducts || []\r\n        });\r\n    }\r\n\r\n    GetProductJson() {\r\n        /**\r\n         * @method GetProductJson\r\n         * This method will return the product json\r\n         * \r\n         * @public\r\n         */\r\n        var LMe = this,\r\n            LResProducts = [],\r\n            LObj = {},\r\n            LArrProducts;\r\n\r\n        LArrProducts = LMe.state.SArrProducts || [];\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            LObj = {};\r\n\r\n            LObj.productId = p_objRecord.productId;\r\n            LObj.stockId = p_objRecord.stockId;\r\n\r\n            LObj.gst = p_objRecord.gst;\r\n\r\n            LObj.price = p_objRecord.sellingPrice;\r\n            LObj.qty = p_objRecord.qty;\r\n\r\n            LResProducts.push(LObj);\r\n        });\r\n\r\n        return LResProducts;\r\n    }\r\n\r\n    pvtGetDialog() {\r\n        var LMe = this;\r\n\r\n        if (LMe.state.IsDialogOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsDialogOpen: false })}\r\n                DialogContent={LMe.pvtGetDialogContent()}\r\n                DialogActions={LMe.pvtGetDialogAction()}\r\n                DialogHeader={'Select Product'}\r\n                DialogLoading={false}\r\n                IsWindow={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    pvtGetToolBar() {\r\n        var LMe = this;\r\n\r\n        return <div style={{ margin: '20px 20px 0 20px' }} className=\"tsHBox\" >\r\n            {/* <div className=\"flex1\"></div> */}\r\n            <Box variant=\"outline\">\r\n\r\n                <Button\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation\r\n                    onClick={() => {\r\n                        LMe.setState({ IsDialogOpen: true });\r\n                    }}\r\n                >\r\n                    Add Product\r\n                </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    style={{ margin: '0 0 0 5px' }}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    disableElevation\r\n                    onClick={() => {\r\n                        LMe.pvtHandleOnDeleteButtonClick();\r\n                    }}\r\n                    startIcon={<DeleteIcon />}\r\n                >\r\n                    Delete Product\r\n                </Button>\r\n            </Box>\r\n        </div>;\r\n    }\r\n\r\n    pvtGetReadOnlyComponent() {\r\n        /**\r\n         * @method pvtGetReadOnlyComponent\r\n         * This method will return the read only component\r\n         */\r\n        var LMe = this,\r\n            LColumns = LMe.state.GridColumns || [],\r\n            LRows = LMe.state.SArrProducts || [],\r\n            LColumnUI = [],\r\n            LRowUI = [],\r\n            LRow;\r\n\r\n        LColumns.forEach(function (p_objRecord, p_index) {\r\n\r\n            LColumnUI.push(\r\n                <th className=\"tsInvoiceViewTableTh\" key={'col' + p_index}>\r\n                    {p_objRecord.headerName}\r\n                </th>\r\n            );\r\n        });\r\n\r\n        LRows.forEach(function (p_objRecord, p_intRowIndex) {\r\n\r\n            LRow = [];\r\n\r\n            LColumns.forEach(function (p_objColRecord, p_intColIndex) {\r\n\r\n                if (p_objColRecord.field === 'total') {\r\n                    p_objRecord[p_objColRecord.field] = 'Rs.' + p_objRecord.qty * p_objRecord.sellingPrice;\r\n                }\r\n\r\n                LRow.push(\r\n                    <td className=\"tsInvoiceViewTableTd\" key={'coltd' + p_intColIndex}>\r\n                        {p_objRecord[p_objColRecord.field]}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            LRowUI.push(\r\n                <tr key={'tblrow' + p_intRowIndex}>\r\n                    {LRow}\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        //Add Empty rows if rows are less than 3\r\n        var LMaxLen = 3;\r\n        if (LRows.length < LMaxLen) {\r\n\r\n            for (var LIndex = 0; LIndex < LMaxLen - LRows.length; LIndex++) {\r\n\r\n                LRow = [];\r\n\r\n                for (var LColIndex = 0; LColIndex < LColumns.length; LColIndex++) {\r\n\r\n                    LRow.push(\r\n                        <td className=\"tsInvoiceViewTableTd\" key={'coltdempty' + LColIndex}>\r\n                            &nbsp;\r\n                        </td>\r\n                    );\r\n                }\r\n\r\n                LRowUI.push(\r\n                    <tr key={'tblrowempty' + LIndex}>\r\n                        {LRow}\r\n                    </tr>\r\n                );\r\n            }\r\n        }\r\n\r\n        var LStyle = {\r\n            overflowX: 'auto'\r\n        };\r\n\r\n        //If print mode then hide scrollbars\r\n        if (LMe.props.PIsPrintMode === true) {\r\n\r\n            LStyle = {};\r\n        }//if..\r\n\r\n        return <div style={LStyle}>\r\n            <table className=\"tsInvoiceViewTable\">\r\n                <thead>\r\n                    <tr key={'throw'}>\r\n                        {LColumnUI}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {LRowUI}\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecordInvoice = p_objSelectedRecord;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsReadOnlyMode === true) {\r\n            return LMe.pvtGetReadOnlyComponent();\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {LMe.pvtGetToolBar()}\r\n\r\n                <DataGrid\r\n                    columns={LMe.state.GridColumns || []}\r\n                    rows={LMe.state.SArrProducts || []}\r\n                    pagination\r\n                    csvOptions={{ allColumns: true }}\r\n                    hideFooter\r\n                    ref={LMe.FDataGrid}\r\n                    density={'compact'}\r\n                    style={{ margin: '10px 20px 0 20px', minHeight: 200 }}\r\n                    onCellEditCommit={(p_objParams) => {\r\n\r\n                        var LOldArrProducts = LMe.state.SArrProducts,\r\n                            LUpdateProduct = [],\r\n                            LGrandTotal = 0,\r\n                            LObj;\r\n\r\n                        LOldArrProducts.forEach(function (p_objRecord) {\r\n\r\n                            LObj = { ...p_objRecord };\r\n\r\n                            //If edited cell found then update in state\r\n                            if (LObj.id === p_objParams.id) {\r\n\r\n                                LObj[p_objParams.field] = p_objParams.value;\r\n                            }//if..\r\n\r\n                            //If qty is less than 0\r\n                            if (LObj.qty <= 0) {\r\n                                LObj.qty = 1;\r\n                            }\r\n\r\n                            //Check quantity\r\n                            if (LObj.qty > LObj.rQty) {\r\n\r\n                                LObj.qty = LObj.rQty;\r\n                                LMe.FSnackMsg = 'You have only ' + LObj.qty + ' items left in stock.';\r\n                                LMe.setState({ IsSnackOn: true });\r\n                            }\r\n\r\n\r\n                            //Adding sum\r\n                            LGrandTotal += LObj.qty * LObj.sellingPrice;\r\n                            LUpdateProduct.push(LObj);\r\n                        });\r\n\r\n                        LMe.FGrandTotal = LGrandTotal;\r\n                        //Update prop\r\n                        LMe.props.SetGrandTotal(LGrandTotal);\r\n\r\n                        LMe.setState({ SArrProducts: LUpdateProduct });\r\n                    }}\r\n                    onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                />\r\n                {/* Window */}\r\n                {LMe.pvtGetDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmProductSelectionCntr;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Toolbar,\r\n    Button,\r\n    IconButton,\r\n    Tooltip\r\n} from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, isObjEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TStockDialog from './tsdlgStocks';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport TProductSelection from '../../reusable/tscmpProductSelection';\r\n\r\nclass tsfrmStocksShell extends Component {\r\n    /**\r\n     * @props: moduleInfo,\r\n     * @returns\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: null,\r\n            CanInvokeDialogOpen: false,\r\n            StockRecord: {},\r\n            IsAlertDialogOpen: false,\r\n            IsCnfrmDialogOpen: false,\r\n            ColumnFields: LMe.pvtGetGridColumn(),\r\n            SInvoiceType: '',\r\n            SProduct: {}\r\n        };\r\n\r\n        LMe.F_callBackOnCnfrmTrue = null;\r\n\r\n        LMe.FDataGrid = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtRefresh();\r\n    }\r\n\r\n    pvtRefresh() {\r\n        /**\r\n         * @method pvtRefresh\r\n         * This function will refresh the grid\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this,\r\n            LStateObj = {\r\n                FetchedData: null\r\n            };\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        if (LMe.props.IsSelectMode === true) {\r\n\r\n            LStateObj = {\r\n                FetchedData: null,\r\n                //PInvoiceType: is for when editor opens in dialog in Invoice: Product Selection\r\n                SInvoiceType: LMe.props.PInvoiceType || GenConstants().PESTICIDE_ACT_CODE\r\n            };\r\n        }//if..\r\n\r\n        if (isEmpty(LMe.props.PProductId) === false) {\r\n\r\n            isObjEmpty(LMe.state.SProduct) === true ? LStateObj.SProduct = { id: LMe.props.PProductId } : LStateObj.SProduct = LMe.state.SProduct;\r\n\r\n            LStateObj.SInvoiceType = LMe.props.PInvoiceType;\r\n        }//if..\r\n\r\n        LMe.setState(LStateObj);\r\n\r\n        LMe.pvtFetchStocksFields(LMe.props.PInvoiceType);\r\n    }\r\n\r\n    pvtFetchStocksFields(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtFetchStocksFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LInvoiceType = p_actCodeInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(LInvoiceType) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().STOCK_CSTM_FIELDS + '/' + LInvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            ColumnFields: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.setState({\r\n                        ColumnFields: LMe.pvtGetGridColumn(responseJson)\r\n                    })\r\n                    LMe.pvtFetchStocks(LMe.state.SProduct.id);\r\n                },\r\n                (error) => {\r\n                    LMe.setState({\r\n                        ColumnFields: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchStocks(p_intProductId) {\r\n        /**\r\n         * @method pvtFetchStocks\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            // LProductId = p_intProductId || LMe.state.SProduct.id,\r\n            LProductId = p_intProductId,\r\n            LStateObj;\r\n\r\n        if (isEmpty(LProductId)) {\r\n\r\n            LStateObj = {\r\n                FetchedData: []\r\n            };\r\n\r\n            LMe.setState(LStateObj);\r\n            return;\r\n        }//if..\r\n\r\n        LUrl = BaseUrl() + 'stocks/byproductids/' + LProductId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.setState({\r\n                        FetchedData: responseJson\r\n                    });\r\n                },\r\n                (error) => {\r\n                    LMe.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetGridColumn(p_arrFields) {\r\n        /**\r\n         * @method pvtGetGridColumn\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {};\r\n\r\n        LArrColumn = [\r\n            // {\r\n            //     field: 'stockName',\r\n            //     headerName: 'Particulars',\r\n            //     headerClassName: 'tsGridHeader',\r\n            //     flex: 1,\r\n            //     color: 'primary',\r\n            //     sort: 'asc',\r\n            //     fieldType: GenConstants().SYSTEM_FIELD,\r\n            //     // isRequired: true,\r\n            //     isField: false,\r\n            //     hide: true\r\n            // },\r\n            {\r\n                field: 'qty',//Remaining Qty\r\n                headerName: 'Remaining Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 210,\r\n                flex: 1,\r\n                color: 'primary',\r\n                fieldType: GenConstants().SYSTEM_FIELD,\r\n                isRequired: true,\r\n                isField: false\r\n            },\r\n            {\r\n                field: 'tqty',//Total Qty\r\n                headerName: 'Total Purshased Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 240,\r\n                flex: 1,\r\n                color: 'primary',\r\n                fieldType: GenConstants().FIELD_NUMBER,\r\n                isRequired: true,\r\n            },\r\n            {\r\n                field: 'costPrice',\r\n                headerName: 'Cost Price',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 200,\r\n                color: 'primary',\r\n                fieldType: GenConstants().FIELD_NUMBER,\r\n                isRequired: true,\r\n                hide: true\r\n            },\r\n            {\r\n                field: 'sellingPrice',\r\n                headerName: 'Selling Price',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 200,\r\n                color: 'primary',\r\n                fieldType: GenConstants().FIELD_NUMBER,\r\n                isRequired: true\r\n            }\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrFields = p_arrFields || [];\r\n\r\n            p_arrFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = {};\r\n\r\n                LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n                //Setting column name\r\n                LObj['field'] = p_objRecord.columnName;\r\n                LObj['headerClassName'] = 'tsGridHeader';\r\n                LObj['minWidth'] = 200;\r\n\r\n                LObj['fieldType'] = p_objRecord.fieldType;\r\n                LObj['isRequired'] = p_objRecord.isRequired === 1;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtLoadDialog() {\r\n        /**\r\n         * @method pvtLoadDialog\r\n         * This method will loads the Dialog\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.state.CanInvokeDialogOpen === true) {\r\n\r\n            return (\r\n                <TStockDialog\r\n                    IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n                    UpdateStockStore={(p_objUser) =>\r\n                        LMe.UpdateStockStore(p_objUser)\r\n                    }\r\n                    StockRecord={LMe.state.StockRecord || {}}\r\n                    ColumnFields={LMe.state.ColumnFields || []}\r\n                    InvoiceType={LMe.state.SInvoiceType}\r\n                    ProductId={LMe.state.SProduct.id}\r\n                    ProductDispName={LMe.state.SProduct.productName}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    pvtEditStock(p_objParam) {\r\n        /**\r\n         * @method pvtEditStock\r\n         * This method will invoke the dialog for edit mode edit the user\r\n         */\r\n\r\n        if (isEmpty(p_objParam) === true) {\r\n            return;\r\n        } ///if..\r\n\r\n        var LMe = this,\r\n            LRecord = p_objParam;\r\n\r\n        LMe.setState({\r\n            CanInvokeDialogOpen: true,\r\n            StockRecord: LRecord\r\n        });\r\n    }\r\n\r\n    UpdateStockStore(p_objResponseUser) {\r\n        /**\r\n         * @method UpdateStockStore\r\n         * This method will update store\r\n         *\r\n         * @public\r\n         * @param p_objResponseUser: Response User object\r\n         */\r\n        var LMe = this,\r\n            LArrFetchedData,\r\n            LArrResponse = [],\r\n            LIsNewRecord = true;\r\n\r\n        if (isEmpty(p_objResponseUser) === true) {\r\n            return;\r\n        } //if..\r\n\r\n        LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n        LArrFetchedData.forEach(function (p_objRecord) {\r\n            //Update Record if exists\r\n            if (p_objRecord.id === p_objResponseUser.id) {\r\n                // p_objResponseUser.id = p_objResponseUser.id;\r\n                LArrResponse.push(p_objResponseUser);\r\n                LIsNewRecord = false;\r\n                return true; //continue\r\n            } //if..\r\n\r\n            LArrResponse.push(p_objRecord);\r\n        }); //forEach...\r\n\r\n        if (LIsNewRecord === true) {\r\n            // p_objResponseUser.id = p_objResponseUser.id;\r\n            LArrResponse.push(p_objResponseUser);\r\n        } //if..\r\n\r\n        //Directly select that stock\r\n        if (LMe.props.IsSelectMode === true) {\r\n\r\n            var LObj = {\r\n                stock: p_objResponseUser,\r\n                product: LMe.state.SProduct,\r\n                stockColumns: LMe.state.ColumnFields\r\n            };\r\n            LMe.props.HandleOnSelect(LObj);\r\n        }\r\n\r\n        // Update state.\r\n        LMe.setState({ FetchedData: LArrResponse });\r\n    }\r\n\r\n    pvtHandleOnEditButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Stock record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.pvtEditStock(LMe.FSelectedRecord);\r\n    }\r\n\r\n    pvtHandleOnDeleteButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.FCnfrmText = \"Are you sure want to delete this stock?\";\r\n        LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n        LMe.setState({ IsCnfrmDialogOpen: true });\r\n    }\r\n\r\n    pvtDelete() {\r\n        /**\r\n         *@method pvtDelete\r\n         * This method will delete\r\n         */\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LArrFetchedData = [],\r\n            LArrResponse = [],\r\n            LUrl;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Stock and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        // eslint-disable-next-line no-useless-concat\r\n        LUrl = BaseUrl() + 'stocks' + '/' + LMe.FSelectedRecord.id;\r\n\r\n        LArrFetchedData = LMe.state.FetchedData || [];\r\n        // This will start the loading\r\n        LMe.setState({ FetchedData: [] });\r\n\r\n        LRequestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify({}),\r\n        };\r\n\r\n        // fire command\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n\r\n                        LMe.setState({\r\n                            FetchedData: LArrFetchedData,\r\n                            IsCnfrmDialogOpen: false,\r\n                            IsAlertDialogOpen: true\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n                    LMe.FSelectedRecord = null;\r\n\r\n                    LArrFetchedData.forEach(function (p_objRecord) {\r\n                        //Record if exists\r\n                        if (p_objRecord.id === responseJson.id) {\r\n                            //remove deleted record\r\n                            return true; //continue\r\n                        } //if..\r\n\r\n                        LArrResponse.push(p_objRecord);\r\n                    }); //forEach...\r\n\r\n                    // Update state.\r\n                    LMe.setState({ FetchedData: LArrResponse, IsCnfrmDialogOpen: false });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                        IsCnfrmDialogOpen: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n\r\n        if (LMe.props.IsSelectMode === true) {\r\n\r\n            var LObj = {\r\n                stock: p_objSelectedRecord,\r\n                product: LMe.state.SProduct,\r\n                stockColumns: LMe.state.ColumnFields\r\n            };\r\n\r\n            LMe.props.SelectedRecord(LObj);\r\n        }//if..\r\n    }\r\n\r\n    pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n        var LMe = this;\r\n        if (p_canShowWarningIcon === true) {\r\n            return (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n\r\n                            if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                                LMe.F_callBackOnCnfrmTrue();\r\n                            }//if..\r\n                        }}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return <></>;\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SInvoiceType: p_actCodeInvoiceType,\r\n            SProduct: {},\r\n            FetchedData: [],\r\n            ColumnFields: []\r\n        });\r\n\r\n        LMe.FSelectedRecord = null;\r\n        LMe.pvtFetchStocksFields(p_actCodeInvoiceType);\r\n    }\r\n\r\n    pvtHandleOnProductChange(p_objRecord) {\r\n        /**\r\n         * @method pvtHandleOnProductChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({ SProduct: p_objRecord });\r\n\r\n        LMe.FSelectedRecord = null;\r\n        LMe.pvtFetchStocks(p_objRecord.id);\r\n    }\r\n\r\n    pvtGetHeader() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.IsSelectMode === true) {\r\n            return <></>;\r\n        }//if..\r\n\r\n        return (<Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n            {/* Module Icon */}\r\n            <div style={{ margin: '20px 6px 0 0' }}>\r\n                <BallotIcon />\r\n            </div>\r\n            <div style={{ margin: '18px 6px 0 0' }}>\r\n                {/* Module Title */}\r\n                <div style={{ fontSize: '20px' }}> Manage Stocks </div>\r\n\r\n                {/* Module Description */}\r\n                <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                    Create new stock, edit stock details, remove\r\n                    stock, etc.\r\n                </Box>\r\n            </div>\r\n        </Box>);\r\n    }\r\n\r\n    pvtGetInvoiceType() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.IsSelectMode === true) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <TInvoiceType\r\n                Value={LMe.state.SInvoiceType}\r\n                OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                EmptyText={'Stock Type'}\r\n            ></TInvoiceType>);\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                    minWidth: 800\r\n                }}\r\n            >\r\n                {LMe.pvtGetHeader()}\r\n                <Toolbar\r\n                    style={{ margin: '0 0 0 0px' }}\r\n                    component=\"div\"\r\n                    variant=\"dense\"\r\n                >\r\n\r\n                    {LMe.pvtGetInvoiceType()}\r\n\r\n                    <div style={{ margin: '0 0 0 20px' }}>\r\n                        <TProductSelection\r\n                            Value={LMe.state.SProduct}\r\n                            InvoiceType={LMe.state.SInvoiceType}\r\n                            OnChange={p_objRecord => LMe.pvtHandleOnProductChange(p_objRecord)}\r\n                            EmptyText={'Select Product'}\r\n                        />\r\n                    </div>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 20px' }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            if (isEmpty(LMe.state.SProduct.id) === true) {\r\n                                LMe.FWarningText = 'Select a Product and try again.';\r\n                                LMe.setState({ IsAlertDialogOpen: true });\r\n                                return;\r\n                            } //if..\r\n                            LMe.setState({\r\n                                CanInvokeDialogOpen: true,\r\n                                StockRecord: {},\r\n                            })\r\n                        }}\r\n                    >\r\n                        Add Stock\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnEditButtonClick();\r\n                        }}\r\n                        startIcon={<EditIcon />}\r\n                    >\r\n                        Edit\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnDeleteButtonClick();\r\n                        }}\r\n                        startIcon={<DeleteIcon />}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                    <IconButton\r\n                        style={{ margin: '0 5px 0 5px' }}\r\n                        aria-label=\"Refresh\"\r\n                        onClick={() => LMe.pvtRefresh()}\r\n                    >\r\n                        <Tooltip title=\"Refresh\">\r\n                            <RefreshIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <div\r\n                    style={{ margin: '5px 20px 20px 20px' }}\r\n                    className=\"flex1\"\r\n                >\r\n                    <DataGrid\r\n                        ref={LMe.FDataGrid}\r\n                        style={{ minHeight: '400px' }}\r\n                        columns={LMe.state.ColumnFields}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        pagination\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) => {\r\n                            if (LMe.props.IsSelectMode === true) {\r\n\r\n                                var LObj = {\r\n                                    stock: params.row,\r\n                                    product: LMe.state.SProduct,\r\n                                    stockColumns: LMe.state.ColumnFields\r\n                                };\r\n                                LMe.props.HandleOnSelect(LObj);\r\n                            }\r\n                            else {\r\n\r\n                                LMe.pvtEditStock(params.row)\r\n                            }\r\n                        }}\r\n                        onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                    />\r\n                </div>\r\n                {LMe.pvtLoadDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n                    DialogContent={LMe.FCnfrmText || ''}\r\n                    DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n                    DialogHeader={'Confirm'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmStocksShell;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Paper,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core';\r\n\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport TDialog from './tsclsDialog';\r\nimport TLoading from './tsclsLoading';\r\nimport TChart from './tscmpChart';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport { GenConstants } from '../tsclsGenConstants';\r\nimport {\r\n    tsGetDefaultFromDate, tsGetDefaultToDate, isEmpty, isObjEmpty,\r\n    // tsGetInvoiceDispNameByActionCode, tsGetDateFromServerDateForInpField,\r\n    // tsGetInvoiceDispNoByInvoiceNo, tsStatementPrint, tsGenerateStatement\r\n} from '../tsclsGenUtils';\r\n\r\nimport TInvoiceType from './tscmpInvoiceType';\r\n\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\n\r\nclass tsfrmReports extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: [],\r\n            SColumnData: [],\r\n            fromDate: '',\r\n            toDate: '',\r\n            SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n            IsAlertDialogOpen: false,\r\n            SLoading: false,\r\n            IsProductDialogOpen: false,\r\n            SIsChartView: false\r\n        };\r\n\r\n        LMe.FWarningText = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultValuesInFilter();\r\n\r\n        setTimeout(() => {\r\n            LMe.pvtGenerateReport();\r\n        }, 100);\r\n    }\r\n\r\n    pvtSetDefaultValuesInFilter() {\r\n        /**\r\n         * @method pvtSetDefaultValuesInFilter\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            toDate: tsGetDefaultToDate(),\r\n            fromDate: tsGetDefaultFromDate(),\r\n            SIsChartView: LMe.props.PIsChartView || false\r\n        });\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * @method pvtHandleOnRowClick: This function will set the selected row record as a class level.\r\n         *\r\n         * @param{p_objSelectedRecord}: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        //Not in used for now\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * Validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.fromDate) === true) {\r\n            LMe.FWarningText = 'Enter from date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.toDate) === true) {\r\n            LMe.FWarningText = 'Enter to date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        var LFromDate = new Date(LMe.state.fromDate),\r\n            LToDate = new Date(LMe.state.toDate);\r\n\r\n        if (LFromDate > LToDate) {\r\n            LMe.FWarningText = 'From date must be less than than To date.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    pvtGenerateReport() {\r\n        /**\r\n         * @method pvtGenerateReport\r\n         * This function will refresh the grid, generate the customer's report\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.pvtValidate() === false) {\r\n\r\n            return;\r\n        }\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({\r\n            FetchedData: null,\r\n        });\r\n\r\n        var LParamObj = {\r\n            fromDate: LMe.state.fromDate,\r\n            toDate: LMe.state.toDate,\r\n            invoiceType: LMe.state.SInvoiceType\r\n        };\r\n\r\n        LMe.props.PFetchProductDetails(LParamObj, function (p_objResponse, p_ParamObj) {\r\n\r\n            if (p_objResponse.success === false) {\r\n                LMe.setState({\r\n                    FetchedData: [],\r\n                });\r\n                return;\r\n            }//if..\r\n\r\n            LMe.props.PFetchProductsFields(LMe.state.SInvoiceType, function (p_columnData) {\r\n\r\n                if (p_columnData.status === false) {\r\n                    LMe.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                LMe.setState({\r\n                    FetchedData: p_objResponse,\r\n                    SColumnData: LMe.props.PGetGridColumn(p_columnData)\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n        LMe.FSelectedRecord = null;\r\n    }\r\n\r\n    pvtHandleOnRowDoubleClick(p_objSelectedRecord) {\r\n\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.props.POnDblClick) === false) {\r\n\r\n            LMe.props.POnDblClick(p_objSelectedRecord);\r\n            return;\r\n        }\r\n\r\n        LMe.setState({ IsProductDialogOpen: true });\r\n    }\r\n\r\n    pvtGetProductDialog() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.CanShowDetailedView === false) {\r\n\r\n            return <></>;\r\n        }//if\r\n\r\n        if (LMe.state.IsProductDialogOpen === false || isObjEmpty(LMe.FSelectedRecord) === true) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsProductDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsProductDialogOpen: false })}\r\n                DialogContent={LMe.props.PGetDialogContent(LMe.FSelectedRecord)}\r\n                DialogActions={() => { }}\r\n                DialogHeader={'Quick Product Info'}\r\n                DialogLoading={false}\r\n                IsWindow={true}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n\r\n    pvtGetChart() {\r\n\r\n        var LMe = this;\r\n        return (\r\n            <Paper style={{ padding: '20px 20px 20px 0' }} className=\"flex1 tsHBox\" variant=\"outlined\">\r\n                <TChart\r\n                    PRecords={LMe.state.FetchedData || []}\r\n                    PChartConfig={LMe.props.PChartConfig}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    pvtGetGridView() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            // \r\n            <DataGrid\r\n                columns={LMe.state.SColumnData || []}\r\n                rows={LMe.state.FetchedData || []}\r\n                ref={LMe.FGridRef}\r\n                // rowHeight={50}\r\n                pagination\r\n                // pageSize={10}\r\n                csvOptions={{ allColumns: true }}\r\n                loading={LMe.state.FetchedData === null ? true : false}\r\n                // sortModel={LMe.state.SortModel}\r\n                // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n\r\n                density={'compact'}\r\n                onCellDoubleClick={(params) =>\r\n                    LMe.pvtHandleOnRowDoubleClick(params.row)\r\n                }\r\n                components={{\r\n                    Toolbar: GridToolbar,\r\n                }}\r\n                hideFooter\r\n                onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n            />\r\n            // \r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <div style={{ margin: '45px 0 0 20px' }}>\r\n                        <TInvoiceType\r\n                            Value={LMe.state.SInvoiceType}\r\n                            OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                            EmptyText={'Product Type'}\r\n                            CanAddPsudoNode={LMe.props.PCanAddPsudoNodeInInvoiceType || false}\r\n                        >\r\n                        </TInvoiceType>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        label={'From Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.fromDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ fromDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        label={'To Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.toDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ toDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n                    {/* <div className=\"flex1\"> </div> */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 30px' }}\r\n                        onClick={() => {\r\n                            LMe.pvtGenerateReport()\r\n                        }}\r\n                    >\r\n                        Generate\r\n                    </Button>\r\n                    {/* <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 10px' }}\r\n                        startIcon={<PrintIcon />}\r\n                        onClick={() => {\r\n                            LMe.pvtGenerateReport(true)\r\n                        }}\r\n                    >\r\n                        Generate and Print\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 20px 30px 10px' }}\r\n                        startIcon={<PictureAsPdfIcon />}\r\n                        onClick={() => {\r\n                            LMe.pvtGeneratePDF(true)\r\n                        }}\r\n                    >\r\n                        Generate PDF\r\n                    </Button> */}\r\n\r\n                    <div className=\"flex1\"></div>\r\n                    {/* <div>\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            disableElevation\r\n                            style={{ margin: '40px 20px 30px 10px' }}\r\n                            startIcon={LMe.state.SIsChartView === false ? <AssessmentIcon /> : <AppsIcon />}\r\n                            onClick={() => LMe.setState({ SIsChartView: !LMe.state.SIsChartView })}\r\n                        >\r\n                            {LMe.state.SIsChartView === false ? 'Chart View' : 'Grid View'}\r\n                        </Button>\r\n                    </div> */}\r\n\r\n                    <div style={{ margin: '33px 20px 0 10px' }}>\r\n                        <ToggleButtonGroup\r\n                            value={LMe.state.SIsChartView ? 'chart' : 'grid'}\r\n                            onChange={() => LMe.setState({ SIsChartView: !LMe.state.SIsChartView })}\r\n                            exclusive={true}\r\n                            size=\"small\"\r\n                        >\r\n                            <ToggleButton title=\"Switch to Grid View\" value=\"grid\">\r\n                                <AppsIcon />\r\n                            </ToggleButton>\r\n                            <ToggleButton title=\"Switch to Chart View\" value=\"chart\">\r\n                                <AssessmentIcon />\r\n                            </ToggleButton>\r\n\r\n                        </ToggleButtonGroup>\r\n                    </div>\r\n                </Paper>\r\n                <div\r\n                    style={{ margin: '5px 20px 0 20px' }}\r\n                    className=\"flex1 tsVBox\"\r\n                >\r\n                    {LMe.state.SIsChartView ? LMe.pvtGetChart() : LMe.pvtGetGridView()}\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n                {LMe.pvtGetProductDialog()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmReports;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Button\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsGetInvoiceDispNoByInvoiceNo, isObjEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoice from './tsfrmInvoice';\r\nimport TInvoiceViewer from './tsfrmInvoiceViewer';\r\n\r\nclass tsfrmSingleInvoice extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsAlertDialogOpen: false,\r\n            SIsDialogLoading: false,\r\n            SProductsArr: [],\r\n            SPaymentFields: {},\r\n            SCustomerData: {},\r\n            SInvoiceTpl: <></>\r\n        };\r\n\r\n        LMe.FWarningText = '';\r\n        LMe.FInvoiceRef = React.createRef();\r\n\r\n        LMe.FProjectDataFetchedForActCode = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord || {};\r\n\r\n        LMe.FIsReadOnly = LMe.props.PIsReadOnlyMode;\r\n        LMe.FInvoiceRecord = LRecord;\r\n\r\n        if (isEmpty(LMe.FIsReadOnly) === true) {\r\n            LMe.FIsReadOnly = true;\r\n        }\r\n\r\n        if (isEmpty(LRecord.invoiceType) === false && isEmpty(LRecord.invoiceNo) === false) {\r\n\r\n            LMe.pvtFetchPaymentDetails(LRecord.invoiceType, LRecord.invoiceNo);\r\n            LMe.pvtFetchInvoicesProductByTypeAndId(LRecord.invoiceType, LRecord.invoiceNo);\r\n            return;\r\n        }\r\n        //For print Mode\r\n        LMe.pvtFetchInvoice();\r\n    }\r\n\r\n    pvtFetchInvoice() {\r\n\r\n        var LMe = this,\r\n            LParam = (LMe.props.match && LMe.props.match.params) || LMe.props.PInvoiceNoAndType || {},\r\n            LUrl = BaseUrl() + 'supplierinvoices/singleInvoice/type/' + LParam.invoiceType + '/invoiceNo/' + LParam.invoiceNo;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.FInvoiceRecord = responseJson || {};\r\n\r\n                    LMe.pvtFetchPaymentDetails(responseJson.invoiceType, responseJson.invoiceNo);\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchPaymentDetails(p_strInvoiceType, p_intInvoiceNo) {\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'payments/type/' + p_strInvoiceType + '/invoiceNo/' + p_intInvoiceNo + '/isPurchaserInvoice/1';\r\n        }//if..\r\n\r\n        LMe.setState({ SIsDialogLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n\r\n                    LMe.pvtFetchCustomersFields();\r\n                    LMe.setState({ SPaymentFields: responseJson || {}, SIsDialogLoading: false });\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchInvoicesProductByTypeAndId(p_strInvoiceType, p_intInvoiceNo) {\r\n        /**\r\n         * @method pvtFetchInvoicesProductByTypeAndId\r\n         * This function will fetch the list of sold products\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'supplierinvoices';\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'supplierinvoices/type/' + p_strInvoiceType + '/invoiceNo/' + p_intInvoiceNo;\r\n        }//if..\r\n\r\n        LMe.setState({ SIsDialogLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({ SProductsArr: responseJson || [], SIsDialogLoading: false });\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchCustomersFields() {\r\n        /**\r\n         * @method pvtFetchCustomersFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtFetchCustomers(responseJson);\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchCustomers(p_arrCstFields) {\r\n        /**\r\n         * @method pvtFetchCustomers\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LCstId = LMe.FInvoiceRecord.cstId;\r\n\r\n        LUrl = BaseUrl() + 'customers/' + LCstId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    var LObj = {\r\n                        cstFields: p_arrCstFields,\r\n                        cstFieldValues: responseJson\r\n                    };\r\n\r\n                    LMe.setState({ SCustomerData: LObj });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LInvoice = { ...LMe.FInvoiceRecord };\r\n\r\n        LInvoice.products = LInvoice.products || LMe.state.SProductsArr || [];\r\n\r\n        LInvoice.customerData = LMe.state.SCustomerData || {};\r\n\r\n        if (isEmpty(LInvoice.products) || LInvoice.products.length === 0 ||\r\n            isObjEmpty(LMe.state.SPaymentFields) || isObjEmpty(LInvoice.customerData)) {\r\n            return <></>;\r\n        }\r\n\r\n        LInvoice.creditedAmount = LMe.state.SPaymentFields.total - LMe.state.SPaymentFields.credit;\r\n\r\n        if (LMe.state.SPaymentFields.credit === 0) {\r\n            LInvoice.creditedAmount = LMe.state.SPaymentFields.total + LMe.state.SPaymentFields.debit;\r\n        }\r\n\r\n        LInvoice.mode = LMe.state.SPaymentFields.mode;\r\n        LInvoice.remark = LMe.state.SPaymentFields.remark;\r\n\r\n        //Setting invoice Type\r\n        LInvoice.strInvoiceNo = LInvoice.products[0].strInvoiceNo;\r\n\r\n        //For read only mode\r\n        if (LMe.FIsReadOnly === true) {\r\n\r\n            // return <TInvoiceViewer\r\n            //     PSelectedRecord={LInvoice}\r\n            // />;\r\n            if (LMe.props.PIsDetailedView === true) {\r\n\r\n                return <TInvoiceViewer\r\n                    PSelectedRecord={LInvoice}\r\n                />;\r\n            }\r\n            else {\r\n\r\n                LMe.pvtLoadTemplate(LInvoice);\r\n                return LMe.state.SInvoiceTpl;\r\n            }\r\n        }\r\n        //For Edit mode\r\n        return <TInvoice\r\n            PIsOpenInDialog={true}\r\n            ref={LMe.FInvoiceRef}\r\n            PSelectedRecord={LInvoice}\r\n        />;\r\n    }\r\n\r\n    pvtFetchProjectDetails(p_callback) {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var //LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadTemplate(p_objInvoice) {\r\n        /**\r\n         * @method pvtLoadTemplate\r\n         * This method will do following taks\r\n         * 1. Check PTemplateCode prop if got then go to  step 2\r\n         * 2. Fetch projectdata and default template from project tbl\r\n         * 3. import that template and return\r\n         */\r\n\r\n        var LMe = this,\r\n            LTplActionCode = LMe.props.PTplActionCode || LMe.FProjectDataFetchedForActCode;\r\n\r\n        if (isEmpty(LTplActionCode) === false && LMe.FProjectDataFetchedForActCode === LTplActionCode) {\r\n\r\n            return;\r\n        }\r\n\r\n        // return <>{JSON.stringify(p_objInvoice)}</>;\r\n        var L_callBack = function (p_objProjectData) {\r\n\r\n            if (isEmpty(LTplActionCode) === true) {\r\n\r\n                //if tpl action code not found then fetch default tpl\r\n                LTplActionCode = p_objProjectData.defaultInvoice;\r\n            }//if..\r\n\r\n            LMe.FProjectDataFetchedForActCode = LTplActionCode;\r\n\r\n            const TModule = require('./tplInvoices/' + (LTplActionCode)).default;\r\n\r\n            LMe.setState({\r\n                SInvoiceTpl: <TModule\r\n                    PInvoice={p_objInvoice}\r\n                    PProjectData={p_objProjectData}\r\n                ></TModule>\r\n            });\r\n        };\r\n\r\n        LMe.pvtFetchProjectDetails(L_callBack);\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        //For read only mode\r\n        if (LMe.FIsReadOnly === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        //For Edit mode\r\n        return <Button\r\n            style={{ margin: '0 0 0 10px' }}\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            disableElevation\r\n            onClick={() => { LMe.FInvoiceRef.current.EditInvoice(LMe.props.OnDialogClose) }}\r\n        >\r\n            Save and Print Invoice\r\n        </Button>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LParam = (LMe.props.match && LMe.props.match.params) || LMe.props.PInvoiceNoAndType || {},\r\n            LRecord = LMe.FInvoiceRecord || {};\r\n\r\n        if (isEmpty(LParam.invoiceType) === false && isEmpty(LParam.invoiceNo) === false && isEmpty(LRecord) === false) {\r\n\r\n            return LMe.pvtGetDialogContent();\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={tsGetInvoiceDispNameByActionCode(LRecord.invoiceType) + ' - Inovice No ' + tsGetInvoiceDispNoByInvoiceNo(LRecord.invoiceNo, LRecord.invoiceType, 1)}\r\n                    DialogLoading={LMe.state.SIsDialogLoading}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmSingleInvoice;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Snackbar\r\n} from '@material-ui/core';\r\nimport { isEmpty, BaseUrl, cloneVar, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TProductStockSelection from '../pkgManageProducts/tsfrmStocksShell';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nclass tsfrmProductSelectionCntr extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsDialogOpen: false,\r\n            IsAlertDialogOpen: false,\r\n            SArrProducts: [],\r\n            GridColumns: [],\r\n            GridEditRowsModel: {},\r\n            IsSnackOn: false\r\n        };\r\n\r\n        LMe.FDataGrid = React.createRef();\r\n    }\r\n\r\n    ResetFields() {\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SArrProducts: [],\r\n            // GridColumns: [],\r\n            GridEditRowsModel: {}\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtDefineProperties();\r\n\r\n        LMe.FGrandTotal = 0;\r\n        LMe.FIsEditMode = false;\r\n\r\n        if (isEmpty(LMe.props.PProductsArr) === false) {\r\n\r\n            LMe.FIsEditMode = true;\r\n\r\n            LMe.props.PProductsArr.forEach(function (p_objRecord) {\r\n\r\n                LMe.pvtFetchProductsStockById(BaseUrl() + 'products/' + p_objRecord.productId, function (p_objProductResponse) {\r\n\r\n                    p_objRecord.product = p_objProductResponse || {};\r\n                    LMe.pvtFetchProductsStockById(BaseUrl() + 'stocks/' + p_objRecord.stockId, function (p_objStockResponse) {\r\n\r\n                        p_objStockResponse = p_objStockResponse || {};\r\n\r\n                        p_objStockResponse.costPrice = p_objRecord.purchasedPrice;\r\n\r\n                        p_objRecord.stock = p_objStockResponse;\r\n                        LMe.HandleOnSelect(p_objRecord);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /**\r\n         * @method componentDidUpdate\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        if (prevProps.PInvoiceType !== LMe.props.PInvoiceType) {\r\n\r\n            LMe.pvtDefineProperties();\r\n        }\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n\r\n        var LMe = this;\r\n\r\n        LMe.FProductColumns = [];\r\n        LMe.FStockColumns = [];\r\n\r\n        LMe.setState({\r\n            SArrProducts: [],\r\n            GridColumns: [],\r\n        });\r\n\r\n        LMe.pvtFetchProductsFields(GenConstants().PRODUCT_CSTM_FIELDS);\r\n        LMe.pvtFetchProductsFields(GenConstants().STOCK_CSTM_FIELDS);\r\n    }\r\n\r\n    pvtFetchProductsStockById(p_url, p_callBack) {\r\n        /**\r\n         * @method p_objRecord\r\n         * First fetches the product details then stock details\r\n         */\r\n\r\n        var LMe = this,\r\n            //Url\r\n            LUrl = p_url;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.error === true) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n                        p_callBack(responseJson);\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchProductsFields(p_strField) {\r\n        /**\r\n         * @method pvtFetchProductsFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LInvoiceType = LMe.props.PInvoiceType;\r\n\r\n        if (isEmpty(LInvoiceType) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        //Url\r\n        LUrl = BaseUrl() + 'customFields/type/' + p_strField + '/' + LInvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.error === true) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (p_strField === GenConstants().PRODUCT_CSTM_FIELDS) {\r\n\r\n                        LMe.FProductColumns = responseJson || [];\r\n                    }\r\n                    else {\r\n\r\n                        LMe.FStockColumns = responseJson || [];\r\n                    }\r\n\r\n                    LMe.pvtLoadGridColumns();\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadGridColumns() {\r\n        /**\r\n         * @method pvtLoadGridColumns\r\n         * This method will create the columns for invoice from stock columns and product columns\r\n         */\r\n        var LMe = this,\r\n            LObj,\r\n            LArrColumn = [],\r\n            LArrConcated = LMe.FProductColumns.concat(LMe.FStockColumns);\r\n\r\n        LArrColumn = [\r\n            {\r\n                field: 'productName',\r\n                headerName: 'Particulars',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                flex: 1,\r\n                color: 'primary'\r\n            },\r\n            {\r\n                field: 'hsn',\r\n                headerName: 'HSN',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary'\r\n            },\r\n        ];\r\n\r\n        LArrConcated.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isSystemField === true) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LObj = {};\r\n\r\n            LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n            //Setting column name\r\n            LObj['field'] = p_objRecord.columnName;\r\n            LObj['headerClassName'] = 'tsGridHeader';\r\n            LObj['minWidth'] = 130;\r\n\r\n            // LObj['fieldType'] = p_objRecord.fieldType;\r\n            // LObj['isRequired'] = p_objRecord.isRequired === 1;\r\n\r\n            LArrColumn.push(LObj);\r\n        });\r\n\r\n        LArrColumn.push(\r\n            {\r\n                field: 'gst',\r\n                headerName: 'GST',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary',\r\n                type: 'number'\r\n            },\r\n            {\r\n                field: 'qty',\r\n                headerName: 'Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary',\r\n                type: 'number',\r\n                // editable: true\r\n            },\r\n            {\r\n                field: 'costPrice',\r\n                headerName: 'Price',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                color: 'primary',\r\n                type: 'number',\r\n                // editable: true\r\n            },\r\n            {\r\n                field: 'total',\r\n                headerName: 'Total',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 110,\r\n                type: 'number',\r\n                color: 'primary',\r\n                renderCell: (p_objParams) => {\r\n                    // var LRecord = p_objParams.row;\r\n                    // // return (LRecord.qty || 1) * LRecord.costPrice;\r\n\r\n                    return (p_objParams.getValue(p_objParams.id, 'qty') || 1) * (p_objParams.getValue(p_objParams.id, 'costPrice'));\r\n                }\r\n            },\r\n        );\r\n\r\n        LMe.setState({ GridColumns: LArrColumn });\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.HandleOnSelect() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            Select\r\n        </Button>);\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            <TProductStockSelection\r\n                IsSelectMode={true}\r\n                HandleOnSelect={(p_objRecord) => LMe.HandleOnSelect(p_objRecord)}\r\n                SelectedRecord={(p_objRecord) => LMe.FSelectedRecord = p_objRecord}\r\n                PInvoiceType={LMe.props.PInvoiceType}\r\n            ></TProductStockSelection>\r\n        );\r\n    }\r\n\r\n    HandleOnSelect(p_objSelectedRecord) {\r\n        /**\r\n         * @method HandleOnSelect\r\n         * This method handle on select the record from pop up\r\n         */\r\n        var LMe = this,\r\n            LSelectedRecord = cloneVar(p_objSelectedRecord) || LMe.FSelectedRecord;\r\n\r\n        if (isEmpty(LSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Purchased Product and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        // LSelectedRecord contains: product and stock\r\n\r\n        var LArrProducts = LMe.state.SArrProducts || [],\r\n            LArrSelectedProducts = [];\r\n\r\n        //Getting stock id\r\n        var LStockId = LSelectedRecord.stock.id;\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.stockId === LStockId) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LArrSelectedProducts.push(p_objRecord);\r\n        });\r\n\r\n        //Delete id field for avoiding conflict\r\n        LSelectedRecord.stock.id = '';\r\n\r\n        var LObj = { ...LSelectedRecord.product, ...LSelectedRecord.stock };\r\n\r\n        //Setting Default quantity\r\n        LObj.qty = LSelectedRecord.stock.tqty || 1;\r\n\r\n        // LObj.rQty = LSelectedRecord.stock.qty;\r\n\r\n        //Adding remeaining qty to orginal qty for edit mode\r\n        // if (LMe.FIsEditMode === true) {\r\n\r\n        //     LObj.rQty += LObj.qty;\r\n        // }//if..\r\n\r\n        // if (LObj.rQty < 1 && LMe.props.PIsReadOnlyMode !== true) {\r\n\r\n        //     LMe.FWarningText = 'Selected Product is out of stock.';\r\n        //     LMe.setState({ IsAlertDialogOpen: true });\r\n        //     return;\r\n        // }//if..\r\n\r\n        LObj.stockId = LStockId;\r\n\r\n        LObj.id = LStockId;\r\n\r\n        LArrSelectedProducts.push(LObj);\r\n\r\n        LMe.FGrandTotal += (LObj.costPrice * LObj.qty);\r\n        LMe.props.SetGrandTotal(LMe.FGrandTotal);\r\n\r\n        if (isEmpty(LMe.props.SetProducts) === false) {\r\n\r\n            LMe.props.SetProducts(LArrSelectedProducts);\r\n        }\r\n\r\n        LMe.setState({\r\n            IsDialogOpen: false,\r\n            SArrProducts: LArrSelectedProducts || []\r\n        });\r\n    }\r\n\r\n    pvtHandleOnDeleteButtonClick() {\r\n        /**\r\n         * @method pvtHandleOnDeleteButtonClick\r\n         * This method will remove the selected item from invoice\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecordInvoice) === true) {\r\n            LMe.FWarningText = 'Select a product and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        var LArrProducts = LMe.state.SArrProducts || [],\r\n            LArrSelectedProducts = [];\r\n\r\n        //Getting stock id\r\n        var LStockId = LMe.FSelectedRecordInvoice.stockId,\r\n            LGrandTotal = 0;\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.stockId === LStockId) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            LGrandTotal += (p_objRecord.costPrice * p_objRecord.qty);\r\n\r\n            LArrSelectedProducts.push(p_objRecord);\r\n        });\r\n\r\n        LMe.FGrandTotal = LGrandTotal;\r\n        LMe.props.SetGrandTotal(LMe.FGrandTotal);\r\n\r\n        LMe.FSelectedRecordInvoice = null;\r\n\r\n        LMe.setState({\r\n            SArrProducts: LArrSelectedProducts || []\r\n        });\r\n    }\r\n\r\n    GetProductJson() {\r\n        /**\r\n         * @method GetProductJson\r\n         * This method will return the product json\r\n         * \r\n         * @public\r\n         */\r\n        var LMe = this,\r\n            LResProducts = [],\r\n            LObj = {},\r\n            LArrProducts;\r\n\r\n        LArrProducts = LMe.state.SArrProducts || [];\r\n\r\n        LArrProducts.forEach(function (p_objRecord) {\r\n\r\n            LObj = {};\r\n\r\n            LObj.productId = p_objRecord.productId;\r\n            LObj.stockId = p_objRecord.stockId;\r\n\r\n            LObj.gst = p_objRecord.gst;\r\n\r\n            LObj.price = p_objRecord.costPrice;\r\n            LObj.qty = p_objRecord.qty;\r\n\r\n            LResProducts.push(LObj);\r\n        });\r\n\r\n        return LResProducts;\r\n    }\r\n\r\n    pvtGetDialog() {\r\n        var LMe = this;\r\n\r\n        if (LMe.state.IsDialogOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsDialogOpen: false })}\r\n                DialogContent={LMe.pvtGetDialogContent()}\r\n                DialogActions={LMe.pvtGetDialogAction()}\r\n                DialogHeader={'Select Product'}\r\n                DialogLoading={false}\r\n                IsWindow={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    pvtGetToolBar() {\r\n        var LMe = this;\r\n\r\n        return <div style={{ margin: '20px 20px 0 20px' }} className=\"tsHBox\" >\r\n            {/* <div className=\"flex1\"></div> */}\r\n            <Box variant=\"outline\">\r\n\r\n                <Button\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation\r\n                    onClick={() => {\r\n                        LMe.setState({ IsDialogOpen: true });\r\n                    }}\r\n                >\r\n                    Add Product\r\n                </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    style={{ margin: '0 0 0 5px' }}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    disableElevation\r\n                    onClick={() => {\r\n                        LMe.pvtHandleOnDeleteButtonClick();\r\n                    }}\r\n                    startIcon={<DeleteIcon />}\r\n                >\r\n                    Delete Product\r\n                </Button>\r\n            </Box>\r\n        </div>;\r\n    }\r\n\r\n    pvtGetReadOnlyComponent() {\r\n        /**\r\n         * @method pvtGetReadOnlyComponent\r\n         * This method will return the read only component\r\n         */\r\n        var LMe = this,\r\n            LColumns = LMe.state.GridColumns || [],\r\n            LRows = LMe.state.SArrProducts || [],\r\n            LColumnUI = [],\r\n            LRowUI = [],\r\n            LRow;\r\n\r\n        LColumns.forEach(function (p_objRecord, p_index) {\r\n\r\n            LColumnUI.push(\r\n                <th className=\"tsInvoiceViewTableTh\" key={'col' + p_index}>\r\n                    {p_objRecord.headerName}\r\n                </th>\r\n            );\r\n        });\r\n\r\n        LRows.forEach(function (p_objRecord, p_intRowIndex) {\r\n\r\n            LRow = [];\r\n\r\n            LColumns.forEach(function (p_objColRecord, p_intColIndex) {\r\n\r\n                if (p_objColRecord.field === 'total') {\r\n                    p_objRecord[p_objColRecord.field] = 'Rs.' + p_objRecord.qty * p_objRecord.costPrice;\r\n                }\r\n\r\n                LRow.push(\r\n                    <td className=\"tsInvoiceViewTableTd\" key={'coltd' + p_intColIndex}>\r\n                        {p_objRecord[p_objColRecord.field]}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            LRowUI.push(\r\n                <tr key={'tblrow' + p_intRowIndex}>\r\n                    {LRow}\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return <div style={{\r\n            overflowX: 'auto'\r\n        }}>\r\n            <table className=\"tsInvoiceViewTable\">\r\n                <thead>\r\n                    <tr key={'throw'}>\r\n                        {LColumnUI}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {LRowUI}\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecordInvoice = p_objSelectedRecord;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsReadOnlyMode === true) {\r\n            return LMe.pvtGetReadOnlyComponent();\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {LMe.pvtGetToolBar()}\r\n\r\n                <DataGrid\r\n                    columns={LMe.state.GridColumns || []}\r\n                    rows={LMe.state.SArrProducts || []}\r\n                    pagination\r\n                    csvOptions={{ allColumns: true }}\r\n                    hideFooter\r\n                    ref={LMe.FDataGrid}\r\n                    density={'compact'}\r\n                    style={{ margin: '10px 20px 0 20px', minHeight: 200 }}\r\n                    // onCellEditCommit={(p_objParams) => {\r\n\r\n                    //     var LOldArrProducts = LMe.state.SArrProducts,\r\n                    //         LUpdateProduct = [],\r\n                    //         LGrandTotal = 0,\r\n                    //         LObj;\r\n\r\n                    //     LOldArrProducts.forEach(function (p_objRecord) {\r\n\r\n                    //         LObj = { ...p_objRecord };\r\n\r\n                    //         //If edited cell found then update in state\r\n                    //         if (LObj.id === p_objParams.id) {\r\n\r\n                    //             LObj[p_objParams.field] = p_objParams.value;\r\n                    //         }//if..\r\n\r\n                    //         //If qty is less than 0\r\n                    //         if (LObj.qty <= 0) {\r\n                    //             LObj.qty = 1;\r\n                    //         }\r\n\r\n                    //         //Check quantity\r\n                    //         if (LObj.qty > LObj.rQty) {\r\n\r\n                    //             LObj.qty = LObj.rQty;\r\n                    //             LMe.FSnackMsg = 'You have only ' + LObj.qty + ' items left in stock.';\r\n                    //             LMe.setState({ IsSnackOn: true });\r\n                    //         }\r\n\r\n\r\n                    //         //Adding sum\r\n                    //         LGrandTotal += LObj.qty * LObj.costPrice;\r\n                    //         LUpdateProduct.push(LObj);\r\n                    //     });\r\n\r\n                    //     LMe.FGrandTotal = LGrandTotal;\r\n                    //     //Update prop\r\n                    //     LMe.props.SetGrandTotal(LGrandTotal);\r\n\r\n                    //     LMe.setState({ SArrProducts: LUpdateProduct });\r\n                    // }}\r\n                    onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                />\r\n                {/* Window */}\r\n                {LMe.pvtGetDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmProductSelectionCntr;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    Input,\r\n    TextField,\r\n    Checkbox,\r\n    InputAdornment,\r\n    FormControlLabel\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nimport { BaseUrl, IsEmailValid, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\n\r\nclass tsfrmUserDialog extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            ShowPassword: false,\r\n            IsLoading: false,\r\n\r\n            IsAlertDialogOpen: false,\r\n            AlertDialog: {\r\n                AlertDialogContent: <></>,\r\n                AlertDialogHeader: 'Warning'\r\n            },\r\n\r\n            SDisplayName: '',\r\n            SUsername: '',\r\n            SPassword: '',\r\n\r\n            SIsActive: true,\r\n            SOrgName: '',\r\n\r\n            IsOTPDialogOpen: false,\r\n            SOTPValue: ''\r\n        };\r\n\r\n        LMe.FIsEmailSent = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n        var LRecord = LMe.props.UserRecord;\r\n\r\n        //Upate state here\r\n        LMe.setState({\r\n            SDisplayName: LRecord.displayName,\r\n            SUsername: LRecord.username,\r\n            SPassword: LRecord.password,\r\n            SIsActive: isEmpty(LRecord.isActive) ? true : LRecord.isActive === 1\r\n        });\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.FIsEmailSent = false;\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetOTPDialogContent() {\r\n\r\n        const LMe = this;\r\n\r\n        return <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n\r\n            <h4 style={{ color: 'green' }}>The OTP has been sent on your Email Address: <i>{LMe.state.SUsername}</i></h4>\r\n\r\n            <TextField label=\"Enter OTP\" placeholder=\"Enter OTP\" required\r\n                fullWidth\r\n                onChange={(e) => LMe.setState({ SOTPValue: e.currentTarget.value })}\r\n                value={LMe.state.SOTPValue}\r\n                margin=\"dense\" />\r\n        </Box>\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n        return (\r\n            <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n                <TextField label=\"Name\" placeholder=\"Name\" required\r\n                    fullWidth\r\n                    onChange={(e) => LMe.setState({ SDisplayName: e.currentTarget.value })}\r\n                    value={LMe.state.SDisplayName}\r\n                    margin=\"dense\" />\r\n\r\n                <TextField label=\"Email\" placeholder=\"Email\" type=\"email\"\r\n                    InputProps={{\r\n                        readOnly: LIsEditMode,\r\n                    }}\r\n                    onChange={(e) => LMe.setState({ SUsername: e.currentTarget.value })}\r\n                    required\r\n                    value={LMe.state.SUsername}\r\n                    error={isEmpty(LMe.state.SUsername) === false && LMe.pvtIsEmailValid(LMe.state.SUsername) === false}\r\n                    helperText={LMe.pvtIsEmailValid(LMe.state.SUsername) ? '' : 'Email-Id is invalid.'}\r\n                    fullWidth\r\n                    margin=\"dense\" />\r\n\r\n                <Input label=\"Password\" required helperText=\"Password is case sensitive\" placeholder=\"Set Password\"\r\n                    fullWidth\r\n                    onChange={(e) => LMe.setState({ SPassword: e.currentTarget.value })}\r\n                    type={LMe.state.ShowPassword ? 'text' : 'password'}\r\n                    margin=\"dense\"\r\n                    style={{ margin: '20px 0 0 0' }}\r\n                    value={LMe.state.SPassword }\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={() => LMe.setState({ ShowPassword: !LMe.state.ShowPassword })}\r\n                            >\r\n                                {LMe.state.ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n               \r\n              \r\n                {LMe.props.PIsSignUpForm === true ?\r\n\r\n                    <TextField label=\"Organisation Name\" placeholder=\"Organisation Name\"\r\n                        style={{ margin: '10px 0 0 0' }}\r\n                        onChange={(e) => LMe.setState({ SOrgName: e.currentTarget.value })}\r\n                        required\r\n                        helperText=\"You can add more details about Organisation after signup.\"\r\n                        value={LMe.state.SOrgName}\r\n                        fullWidth\r\n                        margin=\"dense\" />\r\n                    :\r\n                    <FormControlLabel\r\n                        style={{ margin: '20px 0 0 0' }}\r\n                        control={\r\n                            <Checkbox\r\n                                icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                                checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                                onChange={(e) => LMe.setState({ SIsActive: e.target.checked })}\r\n                                checked={LMe.state.SIsActive}\r\n                            />\r\n                        }\r\n                        label=\"Active\"\r\n                    />}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.pvtSaveUser() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            {LMe.props.PIsSignUpForm === true ? 'SignUp' : 'Save'}\r\n        </Button>);\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the user dlg\r\n         */\r\n        var LMe = this,\r\n            LAlertStateObj = {},\r\n            LIsValid = true,\r\n            password = new RegExp ('^(?=.*?[A-Za-z])(?=.*?[0-9]).{8,}$');\r\n\r\n        if (isEmpty(LMe.state.SDisplayName) === true) {\r\n\r\n            LIsValid = false;\r\n\r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Display Name is required. </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n\r\n        }//if..\r\n        else if (isEmpty(LMe.state.SUsername) === true) {\r\n\r\n            LIsValid = false;\r\n\r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Email is required. </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n        }\r\n        else if (LMe.pvtIsEmailValid(LMe.state.SUsername) === false) {\r\n\r\n            LIsValid = false;\r\n\r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Email-Id is invalid, enter correct Email-Id. </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n        }\r\n        else if (isEmpty(LMe.state.SPassword) === true) {\r\n\r\n            LIsValid = false;\r\n\r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Password is required. </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n        }\r\n        else if (!password.test(LMe.state.SPassword) ) {\r\n\r\n            LIsValid = false;\r\n            \r\n                   \r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n        }\r\n        else if (LMe.props.PIsSignUpForm === true && isEmpty(LMe.state.SOrgName) === true) {\r\n\r\n            LIsValid = false;\r\n\r\n            LAlertStateObj = {\r\n                AlertDialogContent: <span> Organisation Name is required. </span>,\r\n                AlertDialogHeader: 'Warning'\r\n            }\r\n        }//else if..\r\n        else if (isEmpty(LMe.props.PAllUsers) === false && LMe.state.SIsActive === false) {\r\n\r\n            var LAllUsers = LMe.props.PAllUsers || [],\r\n                LIsActiveElementFound = false;\r\n\r\n            LAllUsers.forEach(function (p_objRecord) {\r\n\r\n                //Biz Rule: At least one user should be \"Active User\".\r\n                //Checking at least one users is active or not\r\n                if (p_objRecord.isActive === 1 && LMe.props.UserRecord.id !== p_objRecord.id) {\r\n\r\n                    //Here means user is active, so update the flag & break\r\n                    LIsActiveElementFound = true;\r\n                    return false;\r\n                }//if..\r\n            });\r\n\r\n            if (LIsActiveElementFound === false) {\r\n\r\n                LIsValid = false;\r\n\r\n                LAlertStateObj = {\r\n                    AlertDialogContent: <span> At least one user must be <b>\"Active User\"</b>.</span>,\r\n                    AlertDialogHeader: 'Warning'\r\n                }\r\n            }//if..\r\n\r\n        }//else if..\r\n\r\n        if (LIsValid === false) {\r\n\r\n            LMe.setState({\r\n                IsAlertDialogOpen: true,\r\n                AlertDialog: LAlertStateObj\r\n            });\r\n        }\r\n\r\n        return LIsValid;\r\n    }\r\n\r\n    pvtIsEmailValid(p_strEmail) {\r\n        return IsEmailValid(p_strEmail);\r\n    }\r\n\r\n    pvtSendOTP() {\r\n        /**\r\n         * @method pvtSendOTP\r\n         * This method will verify the EMAIL address\r\n         */\r\n        const LMe = this,\r\n            LEmailId = LMe.state.SUsername,\r\n            LParamObj = {\r\n                displayName: LMe.state.SDisplayName,\r\n                email: LMe.state.SUsername,\r\n                password: LMe.state.SPassword,\r\n                isActive: LMe.state.SIsActive\r\n            };\r\n\r\n        // Email is valid\r\n        if (LMe.pvtIsEmailValid(LEmailId) === false) {\r\n            return;\r\n        }//if..\r\n\r\n        const LUrl = BaseUrl() + 'users/send/otp',\r\n            LRequestOptions = {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(LParamObj)\r\n            };\r\n\r\n        LMe.FLoadingText = 'Sending OTP to your Email...';\r\n        LMe.setState({ IsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        var LAlertStateObj = {\r\n                            AlertDialogContent: <span> {responseJson.message} </span>,\r\n                            AlertDialogHeader: 'Error',\r\n                        };\r\n\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true,\r\n                            AlertDialog: LAlertStateObj,\r\n                        });\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Success\r\n\r\n                    LMe.FIsEmailSent = true;\r\n\r\n                    LMe.setState({\r\n                        IsOTPDialogOpen: true\r\n                    });\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtSaveUser() {\r\n        /**\r\n        * @method pvtSaveUser\r\n        * This function will fire the command and save the user data\r\n        *\r\n        */\r\n        const LMe = this;\r\n\r\n        // First validate\r\n        if (LMe.pvtValidate() === false) {\r\n            return false;\r\n        }//if..\r\n\r\n        // If dialog is opened for new orginstion registration and email is not verified then verify the email\r\n        if (LMe.props.PIsSignUpForm === true && LMe.FIsEmailSent === false) {\r\n            LMe.pvtSendOTP();\r\n            return;\r\n        }//if..\r\n\r\n        let LParamObj = {},\r\n            LRequestOptions,\r\n            LUrl = BaseUrl() + 'users',\r\n            LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n        LParamObj = {\r\n            displayName: LMe.state.SDisplayName,\r\n            username: LMe.state.SUsername,\r\n            password: LMe.state.SPassword,\r\n            isActive: LMe.state.SIsActive\r\n        };\r\n\r\n        if (LIsEditMode === true) {\r\n            LUrl = BaseUrl() + 'users/' + LMe.props.UserRecord.id;\r\n        }\r\n        else {\r\n            LParamObj.canCreateNewProject = LMe.props.PIsSignUpForm;\r\n            LParamObj.orgName = LMe.state.SOrgName;\r\n            LParamObj.otp = LMe.state.SOTPValue;\r\n        }\r\n\r\n        LRequestOptions = {\r\n            method: LIsEditMode === true ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        LMe.FLoadingText = '';\r\n        LMe.setState({ IsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        var LAlertStateObj = {\r\n                            AlertDialogContent: <span> {responseJson.message} </span>,\r\n                            AlertDialogHeader: 'Error',\r\n                        };\r\n\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true,\r\n                            AlertDialog: LAlertStateObj,\r\n                        });\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n                    LMe.pvtHandleOnClose();\r\n                    LMe.props.UpdateUserStore(responseJson);\r\n\r\n                    if (LMe.props.PIsSignUpForm === true) {\r\n\r\n                        LMe.props.PHandleOnSignUp(LParamObj.username, LParamObj.password, responseJson);\r\n                    }//if..\r\n\r\n                    if (LIsEditMode === false) {\r\n\r\n                        LMe.setState({\r\n                            SDisplayName: '',\r\n                            SUsername: '',\r\n                            SPassword: '',\r\n                            SIsActive: 1\r\n                        });\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={LMe.props.PIsSignUpForm === true ? ('Sign Up Form') : (isEmpty(LMe.props.UserRecord.id) ? 'New User' : 'Edit User')}\r\n                    DialogLoading={false}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TLoading\r\n                    PLoadingText={LMe.FLoadingText}\r\n                    PIsLoading={LMe.state.IsLoading}\r\n                />\r\n\r\n                {/* OTP dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsOTPDialogOpen}\r\n                    OnDialogClose={() => {\r\n                        LMe.setState({ IsOTPDialogOpen: false });\r\n                        LMe.FIsEmailSent = false;\r\n                    }}\r\n                    DialogContent={LMe.pvtGetOTPDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={'Verify Email'}\r\n                    DialogLoading={false}\r\n                    IsWindow={true}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmUserDialog;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Toolbar,\r\n    Button,\r\n    IconButton,\r\n    Tooltip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Typography,\r\n    Paper,\r\n    AppBar\r\n} from '@material-ui/core';\r\n\r\nimport Draggable from 'react-draggable';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction PaperComponent(props) {\r\n    return (\r\n        <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n            <Paper {...props} />\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nclass tsclsDialog extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsFullScreen: false\r\n        };\r\n\r\n        // LMe.pvtHandleOnESC = LMe.pvtHandleOnESC.bind(LMe);\r\n    }\r\n\r\n    // pvtHandleOnESC(event) {\r\n    //     // console.log(event.keyCode);\r\n\r\n    //     //ESC\r\n    //     // if (event.keyCode === 27) {\r\n\r\n    //     //     console.log('ESC');\r\n    //     // }\r\n\r\n    //     //q\r\n    //     // if (event.keyCode === 81) {\r\n\r\n    //     //     console.log('ESC1');\r\n    //     // }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        // var LMe = this;\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     var LMe = this;\r\n    // }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetLoadingCmp() {\r\n        // var LMe = this;\r\n\r\n        return (\r\n            <div key={'loading-dialog'} className=\"tsMiddle\">\r\n                <CircularProgress key=\"loading-dialog-cir\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    pvtGetAppHeader() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.IsWindow === false) {\r\n            return (<DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">{LMe.props.DialogHeader}</DialogTitle>);\r\n        }\r\n\r\n        return (<AppBar\r\n            id=\"draggable-dialog-title\"\r\n            style={{ cursor: 'move' }}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\">\r\n                    {LMe.props.DialogHeader}\r\n                </Typography>\r\n                <Box component=\"span\" flex=\"1\"></Box>\r\n\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    size=\"small\"\r\n                    edge=\"start\"\r\n                    disableRipple={true}\r\n                    onClick={() => LMe.setState({ IsFullScreen: !LMe.state.IsFullScreen })}>\r\n                    <Tooltip title={LMe.state.IsFullScreen === true ? 'Exit Full Screen' : 'Full Screen'}>\r\n                        {LMe.state.IsFullScreen === true ? <FullscreenExitIcon /> : <FullscreenIcon />}\r\n                    </Tooltip>\r\n                </IconButton>\r\n\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    size=\"small\"\r\n                    disableRipple={true}\r\n                    onClick={() => LMe.pvtHandleOnClose()}>\r\n                    <Tooltip title={'Close Window'}>\r\n                        <CloseIcon />\r\n                    </Tooltip>\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>);\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this;\r\n\r\n        if (LMe.props.IsWindow === false) {\r\n            return (\r\n                <DialogContent className=\"tsVBox\">\r\n                    {LMe.props.DialogContent}\r\n                </DialogContent>\r\n            );\r\n        }\r\n\r\n        return (<DialogContent className=\"tsDialogInnerContent tsVBox tsDialogMinWidth\">\r\n            {LMe.props.DialogLoading === true ? LMe.pvtGetLoadingCmp() : LMe.props.DialogContent}\r\n        </DialogContent>);\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <Dialog\r\n                open={LMe.props.IsDialogOpen}\r\n                maxWidth={LMe.props.IsWindow ? 'md' : 'xs'}\r\n                PaperComponent={PaperComponent}\r\n                aria-labelledby=\"draggable-dialog-title\"\r\n                fullScreen={LMe.state.IsFullScreen}\r\n            >\r\n                {/* Header */}\r\n                {LMe.pvtGetAppHeader()}\r\n\r\n                {/* Dialog Content */}\r\n                {LMe.pvtGetDialogContent()}\r\n\r\n                {/* Footer */}\r\n                {/* <Box borderColor=\"primary.main\"></Box> */}\r\n                <DialogActions>\r\n                    <Button onClick={() => LMe.pvtHandleOnClose()} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    {LMe.props.DialogActions}\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsclsDialog;","import React, { Component } from 'react';\r\n\r\nimport {\r\n   Box,\r\n   Button,\r\n   Select,\r\n   TextField,\r\n   MenuItem,\r\n   FormControl,\r\n   InputLabel,\r\n   FormControlLabel,\r\n   FormHelperText,\r\n   Checkbox\r\n} from '@material-ui/core';\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport {\r\n   BaseUrl,\r\n   isEmpty,\r\n   tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsdlgCustomerFields extends Component {\r\n   /**\r\n    * @props:\r\n    *  OnDialogClose\r\n    *  IsDialogOpen\r\n    *\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         ShowPassword: false,\r\n         IsLoading: false,\r\n\r\n         IsAlertDialogOpen: false,\r\n         AlertDialog: {\r\n            AlertDialogContent: <></>,\r\n            AlertDialogHeader: 'Warning',\r\n         },\r\n\r\n         SFieldName: '',\r\n         SFieldType: '',\r\n         SIsRequired: false\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      var LRecord = LMe.props.UserRecord;\r\n\r\n      //Upate state here\r\n      LMe.setState({\r\n         SFieldName: LRecord.fieldName || '',\r\n         SFieldType: LRecord.fieldType || '',\r\n         SIsRequired: LRecord.isRequired === 1\r\n      });\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState, snapshot) {\r\n      /**\r\n       * @method componentDidUpdate\r\n       *\r\n       */\r\n      // var LMe = this;\r\n\r\n      // if (prevProps.UserRecord.id !== LMe.props.UserRecord.id) {\r\n\r\n      //    var LRecord = LMe.props.UserRecord;\r\n\r\n      //    //Upate state here\r\n      //    LMe.setState({\r\n      //       SFieldName: LRecord.fieldName || '',\r\n      //       SFieldType: LRecord.fieldType || '',\r\n      //       SIsRequired: LRecord.isRequired === 1\r\n      //    });\r\n      // }//if..\r\n   }\r\n\r\n   pvtHandleOnClose() {\r\n      var LMe = this;\r\n\r\n      LMe.props.OnDialogClose();\r\n   }\r\n\r\n   pvtGetDialogContent() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n            <TextField\r\n               label=\"Field Name\"\r\n               placeholder=\"Field Name\"\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SFieldName: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SFieldName}\r\n               margin=\"dense\"\r\n            />\r\n\r\n            <FormControl style={{ margin: '15px 0 0 0' }}>\r\n               <InputLabel>Field Type</InputLabel>\r\n               <Select\r\n                  value={LMe.state.SFieldType}\r\n                  onChange={(e) =>\r\n                     LMe.setState({ SFieldType: e.target.value })\r\n                  }\r\n               >\r\n                  <MenuItem value={GenConstants().FIELD_TEXT}>Text</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_NUMBER}>Number</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_DATE}>Date</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n               <FormControlLabel\r\n                  style={{ margin: '20px 0 0 0' }}\r\n                  control={\r\n                     <Checkbox\r\n                        icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                        checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                        onChange={(e) => LMe.setState({ SIsRequired: e.target.checked })}\r\n                        checked={LMe.state.SIsRequired}\r\n                     />\r\n                  }\r\n                  label=\"Required?\"\r\n               />\r\n               <FormHelperText style={{ margin: '-5px 0 0 20px' }}>If this field is checked, then each time when you add new or modify the customer, this field is required.</FormHelperText>\r\n            </FormControl>\r\n         </Box>\r\n      );\r\n   }\r\n\r\n   pvtGetDialogAction() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Button\r\n            onClick={() => {\r\n               LMe.pvtSaveUser();\r\n            }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<SaveIcon />}\r\n         >\r\n            Save\r\n         </Button>\r\n      );\r\n   }\r\n\r\n   pvtValidate() {\r\n      /**\r\n       * @method pvtValidate\r\n       * This method will validate the user dlg\r\n       */\r\n      var LMe = this,\r\n         LAlertStateObj = {},\r\n         LIsValid = true;\r\n\r\n      if (isEmpty(LMe.state.SFieldName) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Name is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      } //if..\r\n      else if (isEmpty(LMe.state.SFieldType) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Type is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      }\r\n\r\n      if (LIsValid === false) {\r\n         LMe.setState({\r\n            IsAlertDialogOpen: true,\r\n            AlertDialog: LAlertStateObj,\r\n         });\r\n      }\r\n\r\n      return LIsValid;\r\n   }\r\n\r\n   pvtSaveUser() {\r\n      /**\r\n       * @method pvtSaveUser\r\n       * This function will fire the command and save the user data\r\n       *\r\n       */\r\n      var LMe = this,\r\n         LParamObj = {},\r\n         LRequestOptions,\r\n         LUrl = BaseUrl() + 'customFields',\r\n         LIsValid = false,\r\n         LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n      LIsValid = LMe.pvtValidate();\r\n\r\n      if (LIsValid === false) {\r\n         return false;\r\n      } //if..\r\n\r\n      LParamObj = {\r\n         fieldName: LMe.state.SFieldName,\r\n         fieldType: LMe.state.SFieldType,\r\n         type: GenConstants().CUSTOMER_CSTM_FIELDS,\r\n         isRequired: LMe.state.SIsRequired\r\n      };\r\n\r\n      LRequestOptions = {\r\n         method: LIsEditMode === true ? 'PUT' : 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify(LParamObj),\r\n      };\r\n\r\n      if (LIsEditMode === true) {\r\n         LUrl = BaseUrl() + 'customFields/' + LMe.props.UserRecord.id;\r\n      }//if..\r\n\r\n      LMe.setState({\r\n         IsLoading: true\r\n      });\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               LMe.setState({\r\n                  IsLoading: false,\r\n               });\r\n\r\n               if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                  var LAlertStateObj = {\r\n                     AlertDialogContent: <span> {responseJson.message} </span>,\r\n                     AlertDialogHeader: 'Error',\r\n                  };\r\n\r\n                  LMe.setState({\r\n                     IsAlertDialogOpen: true,\r\n                     AlertDialog: LAlertStateObj,\r\n                  });\r\n\r\n                  return;\r\n               } //if..\r\n\r\n               //If Not error\r\n               LMe.pvtHandleOnClose();\r\n               LMe.props.UpdateUserStore(responseJson);\r\n\r\n               if (LIsEditMode === false) {\r\n\r\n                  //Reset the variables\r\n                  LMe.setState({\r\n                     SFieldName: '',\r\n                     SFieldType: '',\r\n                     SIsRequired: false\r\n                  });\r\n               }//if..\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  IsLoading: false,\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <>\r\n            {/* Window */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.props.IsDialogOpen}\r\n               OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n               DialogContent={LMe.pvtGetDialogContent()}\r\n               DialogActions={LMe.pvtGetDialogAction()}\r\n               DialogHeader={\r\n                  isEmpty(LMe.props.UserRecord.id) ? 'New Field' : 'Edit Field'\r\n               }\r\n               DialogLoading={LMe.state.IsLoading}\r\n               IsWindow={true}\r\n            />\r\n\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n               DialogActions={<></>}\r\n               DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n               IsWindow={false}\r\n            />\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsdlgCustomerFields;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n   Box,\r\n   Button,\r\n   Select,\r\n   TextField,\r\n   MenuItem,\r\n   FormControl,\r\n   InputLabel,\r\n   FormControlLabel,\r\n   FormHelperText,\r\n   Checkbox\r\n} from '@material-ui/core';\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport {\r\n   BaseUrl,\r\n   isEmpty,\r\n   tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsdlgProductFields extends Component {\r\n   /**\r\n    * @props:\r\n    *  OnDialogClose\r\n    *  IsDialogOpen\r\n    *\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         ShowPassword: false,\r\n         IsLoading: false,\r\n\r\n         IsAlertDialogOpen: false,\r\n         AlertDialog: {\r\n            AlertDialogContent: <></>,\r\n            AlertDialogHeader: 'Warning',\r\n         },\r\n\r\n         SFieldName: '',\r\n         SFieldType: '',\r\n         SIsRequired: false\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      var LRecord = LMe.props.UserRecord;\r\n\r\n      //Upate state here\r\n      LMe.setState({\r\n         SFieldName: LRecord.fieldName || '',\r\n         SFieldType: LRecord.fieldType || '',\r\n         SIsRequired: LRecord.isRequired === 1,\r\n      });\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState, snapshot) {\r\n      /**\r\n       * @method componentDidUpdate\r\n       *\r\n       */\r\n      // var LMe = this;\r\n\r\n      // if (prevProps.UserRecord.id !== LMe.props.UserRecord.id) {\r\n\r\n      //    var LRecord = LMe.props.UserRecord;\r\n\r\n      //    //Upate state here\r\n      //    LMe.setState({\r\n      //       SFieldName: LRecord.fieldName || '',\r\n      //       SFieldType: LRecord.fieldType || '',\r\n      //       SIsRequired: LRecord.isRequired === 1,\r\n      //    });\r\n      // }//if..\r\n   }\r\n\r\n   pvtHandleOnClose() {\r\n      var LMe = this;\r\n\r\n      LMe.props.OnDialogClose();\r\n   }\r\n\r\n   pvtGetDialogContent() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n            <TextField\r\n               label=\"Field Name\"\r\n               placeholder=\"Field Name\"\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SFieldName: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SFieldName}\r\n               margin=\"dense\"\r\n            />\r\n\r\n            <FormControl style={{ margin: '15px 0 0 0' }}>\r\n               <InputLabel>Field Type</InputLabel>\r\n               <Select\r\n                  value={LMe.state.SFieldType}\r\n                  onChange={(e) =>\r\n                     LMe.setState({ SFieldType: e.target.value })\r\n                  }\r\n               >\r\n                  <MenuItem value={GenConstants().FIELD_TEXT}>Text</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_NUMBER}>Number</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_DATE}>Date</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n               <FormControlLabel\r\n                  style={{ margin: '20px 0 0 0' }}\r\n                  control={\r\n                     <Checkbox\r\n                        icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                        checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                        onChange={(e) => LMe.setState({ SIsRequired: e.target.checked })}\r\n                        checked={LMe.state.SIsRequired}\r\n                     />\r\n                  }\r\n                  label=\"Required?\"\r\n               />\r\n               <FormHelperText style={{ margin: '-5px 0 0 20px' }}>If this field is checked, then each time when you add new or modify the customer, this field is required.</FormHelperText>\r\n            </FormControl>\r\n         </Box>\r\n      );\r\n   }\r\n\r\n   pvtGetDialogAction() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Button\r\n            onClick={() => {\r\n               LMe.pvtSave();\r\n            }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<SaveIcon />}\r\n         >\r\n            Save\r\n         </Button>\r\n      );\r\n   }\r\n\r\n   pvtValidate() {\r\n      /**\r\n       * @method pvtValidate\r\n       * This method will validate the user dlg\r\n       */\r\n      var LMe = this,\r\n         LAlertStateObj = {},\r\n         LIsValid = true;\r\n\r\n      if (isEmpty(LMe.state.SFieldName) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Name is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      } //if..\r\n      else if (isEmpty(LMe.state.SFieldType) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Type is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      }\r\n\r\n      if (LIsValid === false) {\r\n         LMe.setState({\r\n            IsAlertDialogOpen: true,\r\n            AlertDialog: LAlertStateObj,\r\n         });\r\n      }\r\n\r\n      return LIsValid;\r\n   }\r\n\r\n   pvtSave() {\r\n      /**\r\n       * @method pvtSave\r\n       * This function will fire the command and save the user data\r\n       *\r\n       */\r\n      var LMe = this,\r\n         LParamObj = {},\r\n         LRequestOptions,\r\n         LUrl = BaseUrl() + 'customFields',\r\n         LIsValid = false,\r\n         LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n      LIsValid = LMe.pvtValidate();\r\n\r\n      if (LIsValid === false) {\r\n         return false;\r\n      } //if..\r\n\r\n      LParamObj = {\r\n         fieldName: LMe.state.SFieldName,\r\n         fieldType: LMe.state.SFieldType,\r\n         type: GenConstants().PRODUCT_CSTM_FIELDS,\r\n         isRequired: LMe.state.SIsRequired,\r\n         invoiceType: LMe.props.InvoiceType\r\n      };\r\n\r\n      LRequestOptions = {\r\n         method: LIsEditMode === true ? 'PUT' : 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify(LParamObj),\r\n      };\r\n\r\n      if (LIsEditMode === true) {\r\n         LUrl = BaseUrl() + 'customFields/' + LMe.props.UserRecord.id;\r\n      }//if..\r\n\r\n      LMe.setState({\r\n         IsLoading: true\r\n      });\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               LMe.setState({\r\n                  IsLoading: false,\r\n               });\r\n\r\n               if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                  var LAlertStateObj = {\r\n                     AlertDialogContent: <span> {responseJson.message} </span>,\r\n                     AlertDialogHeader: 'Error',\r\n                  };\r\n\r\n                  LMe.setState({\r\n                     IsAlertDialogOpen: true,\r\n                     AlertDialog: LAlertStateObj,\r\n                  });\r\n\r\n                  return;\r\n               } //if..\r\n\r\n               //If Not error\r\n               LMe.pvtHandleOnClose();\r\n               LMe.props.UpdateUserStore(responseJson);\r\n\r\n               if (LIsEditMode === false) {\r\n\r\n                  //Reset the variables\r\n                  LMe.setState({\r\n                     SFieldName: '',\r\n                     SFieldType: '',\r\n                     SIsRequired: false\r\n                  });\r\n               }//if..\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  IsLoading: false,\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <>\r\n            {/* Window */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.props.IsDialogOpen}\r\n               OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n               DialogContent={LMe.pvtGetDialogContent()}\r\n               DialogActions={LMe.pvtGetDialogAction()}\r\n               DialogHeader={\r\n                  isEmpty(LMe.props.UserRecord.id) ? 'New Field' : 'Edit Field'\r\n               }\r\n               DialogLoading={LMe.state.IsLoading}\r\n               IsWindow={true}\r\n            />\r\n\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n               DialogActions={<></>}\r\n               DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n               IsWindow={false}\r\n            />\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsdlgProductFields;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n   Box,\r\n   Button,\r\n   Select,\r\n   TextField,\r\n   MenuItem,\r\n   FormControl,\r\n   InputLabel,\r\n   FormControlLabel,\r\n   FormHelperText,\r\n   Checkbox\r\n} from '@material-ui/core';\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport {\r\n   BaseUrl,\r\n   isEmpty,\r\n   tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsdlgStockFields extends Component {\r\n   /**\r\n    * @props:\r\n    *  OnDialogClose\r\n    *  IsDialogOpen\r\n    *\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         ShowPassword: false,\r\n         IsLoading: false,\r\n\r\n         IsAlertDialogOpen: false,\r\n         AlertDialog: {\r\n            AlertDialogContent: <></>,\r\n            AlertDialogHeader: 'Warning',\r\n         },\r\n\r\n         SFieldName: '',\r\n         SFieldType: '',\r\n         SIsRequired: false\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      var LRecord = LMe.props.UserRecord;\r\n\r\n      //Upate state here\r\n      LMe.setState({\r\n         SFieldName: LRecord.fieldName || '',\r\n         SFieldType: LRecord.fieldType || '',\r\n         SIsRequired: LRecord.isRequired === 1,\r\n      });\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState, snapshot) {\r\n      /**\r\n       * @method componentDidUpdate\r\n       *\r\n       */\r\n      // var LMe = this;\r\n\r\n      // if (prevProps.UserRecord.id !== LMe.props.UserRecord.id) {\r\n\r\n      //    var LRecord = LMe.props.UserRecord;\r\n\r\n      //    //Upate state here\r\n      //    LMe.setState({\r\n      //       SFieldName: LRecord.fieldName || '',\r\n      //       SFieldType: LRecord.fieldType || '',\r\n      //       SIsRequired: LRecord.isRequired === 1,\r\n      //    });\r\n      // }//if..\r\n   }\r\n\r\n   pvtHandleOnClose() {\r\n      var LMe = this;\r\n\r\n      LMe.props.OnDialogClose();\r\n   }\r\n\r\n   pvtGetDialogContent() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n            <TextField\r\n               label=\"Field Name\"\r\n               placeholder=\"Field Name\"\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SFieldName: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SFieldName}\r\n               margin=\"dense\"\r\n            />\r\n\r\n            <FormControl style={{ margin: '15px 0 0 0' }}>\r\n               <InputLabel>Field Type</InputLabel>\r\n               <Select\r\n                  value={LMe.state.SFieldType}\r\n                  onChange={(e) =>\r\n                     LMe.setState({ SFieldType: e.target.value })\r\n                  }\r\n               >\r\n                  <MenuItem value={GenConstants().FIELD_TEXT}>Text</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_NUMBER}>Number</MenuItem>\r\n                  <MenuItem value={GenConstants().FIELD_DATE}>Date</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n               <FormControlLabel\r\n                  style={{ margin: '20px 0 0 0' }}\r\n                  control={\r\n                     <Checkbox\r\n                        icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                        checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                        onChange={(e) => LMe.setState({ SIsRequired: e.target.checked })}\r\n                        checked={LMe.state.SIsRequired}\r\n                     />\r\n                  }\r\n                  label=\"Required?\"\r\n               />\r\n               <FormHelperText style={{ margin: '-5px 0 0 20px' }}>If this field is checked, then each time when you add new or modify the customer, this field is required.</FormHelperText>\r\n            </FormControl>\r\n         </Box>\r\n      );\r\n   }\r\n\r\n   pvtGetDialogAction() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Button\r\n            onClick={() => {\r\n               LMe.pvtSave();\r\n            }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<SaveIcon />}\r\n         >\r\n            Save\r\n         </Button>\r\n      );\r\n   }\r\n\r\n   pvtValidate() {\r\n      /**\r\n       * @method pvtValidate\r\n       * This method will validate the user dlg\r\n       */\r\n      var LMe = this,\r\n         LAlertStateObj = {},\r\n         LIsValid = true;\r\n\r\n      if (isEmpty(LMe.state.SFieldName) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Name is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      } //if..\r\n      else if (isEmpty(LMe.state.SFieldType) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Field Type is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      }\r\n\r\n      if (LIsValid === false) {\r\n         LMe.setState({\r\n            IsAlertDialogOpen: true,\r\n            AlertDialog: LAlertStateObj,\r\n         });\r\n      }\r\n\r\n      return LIsValid;\r\n   }\r\n\r\n   pvtSave() {\r\n      /**\r\n       * @method pvtSave\r\n       * This function will fire the command and save the user data\r\n       *\r\n       */\r\n      var LMe = this,\r\n         LParamObj = {},\r\n         LRequestOptions,\r\n         LUrl = BaseUrl() + 'customFields',\r\n         LIsValid = false,\r\n         LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n      LIsValid = LMe.pvtValidate();\r\n\r\n      if (LIsValid === false) {\r\n         return false;\r\n      } //if..\r\n\r\n      LParamObj = {\r\n         fieldName: LMe.state.SFieldName,\r\n         fieldType: LMe.state.SFieldType,\r\n         type: GenConstants().STOCK_CSTM_FIELDS,\r\n         isRequired: LMe.state.SIsRequired,\r\n         invoiceType: LMe.props.InvoiceType\r\n      };\r\n\r\n      LRequestOptions = {\r\n         method: LIsEditMode === true ? 'PUT' : 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify(LParamObj),\r\n      };\r\n\r\n      if (LIsEditMode === true) {\r\n         LUrl = BaseUrl() + 'customFields/' + LMe.props.UserRecord.id;\r\n      }//if..\r\n\r\n      LMe.setState({\r\n         IsLoading: true\r\n      });\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               LMe.setState({\r\n                  IsLoading: false,\r\n               });\r\n\r\n               if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                  var LAlertStateObj = {\r\n                     AlertDialogContent: <span> {responseJson.message} </span>,\r\n                     AlertDialogHeader: 'Error',\r\n                  };\r\n\r\n                  LMe.setState({\r\n                     IsAlertDialogOpen: true,\r\n                     AlertDialog: LAlertStateObj,\r\n                  });\r\n\r\n                  return;\r\n               } //if..\r\n\r\n               //If Not error\r\n               LMe.pvtHandleOnClose();\r\n               LMe.props.UpdateUserStore(responseJson);\r\n\r\n               if (LIsEditMode === false) {\r\n\r\n                  //Reset the variables\r\n                  LMe.setState({\r\n                     SFieldName: '',\r\n                     SFieldType: '',\r\n                     SIsRequired: false\r\n                  });\r\n               }//if..\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  IsLoading: false,\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <>\r\n            {/* Window */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.props.IsDialogOpen}\r\n               OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n               DialogContent={LMe.pvtGetDialogContent()}\r\n               DialogActions={LMe.pvtGetDialogAction()}\r\n               DialogHeader={\r\n                  isEmpty(LMe.props.UserRecord.id) ? 'New Field' : 'Edit Field'\r\n               }\r\n               DialogLoading={LMe.state.IsLoading}\r\n               IsWindow={true}\r\n            />\r\n\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n               DialogActions={<></>}\r\n               DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n               IsWindow={false}\r\n            />\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsdlgStockFields;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n   Box,\r\n   Button,\r\n   TextField\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport {\r\n   BaseUrl,\r\n   isEmpty,\r\n   tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n\r\nclass tsdlgCustomerFields extends Component {\r\n   /**\r\n    * @props:\r\n    *  OnDialogClose\r\n    *  IsDialogOpen\r\n    *\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n\r\n         IsLoading: false,\r\n         IsAlertDialogOpen: false,\r\n         AlertDialog: {\r\n            AlertDialogContent: <></>,\r\n            AlertDialogHeader: 'Warning',\r\n         },\r\n\r\n         SInvoiceType: '',\r\n         SSingularInvoiceType: '',\r\n         SInvoiceTypeStartsWith: ''\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      var LRecord = LMe.props.UserRecord;\r\n\r\n      //Upate state here\r\n      LMe.setState({\r\n         SInvoiceType: LRecord.NAME || '',\r\n         SSingularInvoiceType: LRecord.SINGULAR_NAME || '',\r\n         SInvoiceTypeStartsWith: LRecord.INVOICE_NO_STARTS_WITH || ''\r\n      });\r\n   }\r\n\r\n   pvtHandleOnClose() {\r\n      var LMe = this;\r\n\r\n      LMe.props.OnDialogClose();\r\n   }\r\n\r\n   pvtGetDialogContent() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n            <TextField\r\n               label=\"Invoice Type Title\"\r\n               placeholder=\"Invoice Type Title\"\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SInvoiceType: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SInvoiceType}\r\n               margin=\"dense\"\r\n            />\r\n\r\n            <TextField\r\n               label=\"Singular Invoice Type Title\"\r\n               placeholder=\"Singular Invoice Type Title\"\r\n               style={{ margin: '20px 0 0 0' }}\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SSingularInvoiceType: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SSingularInvoiceType}\r\n               margin=\"dense\"\r\n            />\r\n\r\n            <TextField\r\n               label=\"Invoice Number Starts with\"\r\n               placeholder=\"Invoice Number Starts with\"\r\n               style={{ margin: '20px 0 0 0' }}\r\n               required\r\n               fullWidth\r\n               onChange={(e) =>\r\n                  LMe.setState({ SInvoiceTypeStartsWith: e.currentTarget.value })\r\n               }\r\n               value={LMe.state.SInvoiceTypeStartsWith}\r\n               margin=\"dense\"\r\n               helperText={<>If you want invoice number like <b>\"Bill-001\"</b> then the value of this field is <b>\"Bill-\"</b>.</>}\r\n            />\r\n         </Box>\r\n      );\r\n   }\r\n\r\n   pvtGetDialogAction() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <Button\r\n            onClick={() => {\r\n               LMe.pvtSave();\r\n            }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<SaveIcon />}\r\n         >\r\n            Save\r\n         </Button>\r\n      );\r\n   }\r\n\r\n   pvtValidate() {\r\n      /**\r\n       * @method pvtValidate\r\n       * This method will validate the user dlg\r\n       */\r\n      var LMe = this,\r\n         LAlertStateObj = {},\r\n         LIsValid = true;\r\n\r\n      if (isEmpty(LMe.state.SInvoiceType) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> \"Invoice Type Title\" is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      } //if..\r\n      else if (isEmpty(LMe.state.SSingularInvoiceType) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> \"Singular Invoice Type Title\" is required. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      }\r\n      else if (isEmpty(LMe.state.SInvoiceTypeStartsWith) === true) {\r\n         LIsValid = false;\r\n\r\n         LAlertStateObj = {\r\n            AlertDialogContent: <span> Enter \"Invoice Number Starts with\" value. <br /><br /> If you want invoice number like <b>\"Bill-001\"</b> then the value of this field is <b>\"Bill-\"</b>. </span>,\r\n            AlertDialogHeader: 'Warning',\r\n         };\r\n      }\r\n\r\n      if (LIsValid === false) {\r\n         LMe.setState({\r\n            IsAlertDialogOpen: true,\r\n            AlertDialog: LAlertStateObj,\r\n         });\r\n      }\r\n\r\n      return LIsValid;\r\n   }\r\n\r\n   pvtSave() {\r\n      /**\r\n       * @method pvtSave\r\n       * This function will fire the command and save the user data\r\n       *\r\n       */\r\n      var LMe = this,\r\n         LParamObj = {},\r\n         LRequestOptions,\r\n         LUrl = BaseUrl() + 'invoicetypes',\r\n         LIsValid = false,\r\n         LIsEditMode = isEmpty(LMe.props.UserRecord.id) === false;\r\n\r\n      LIsValid = LMe.pvtValidate();\r\n\r\n      if (LIsValid === false) {\r\n         return false;\r\n      } //if..\r\n\r\n      LParamObj = {\r\n         NAME: LMe.state.SInvoiceType,\r\n         SINGULAR_NAME: LMe.state.SSingularInvoiceType,\r\n         INVOICE_NO_STARTS_WITH: LMe.state.SInvoiceTypeStartsWith\r\n      };\r\n\r\n      LRequestOptions = {\r\n         method: LIsEditMode === true ? 'PUT' : 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify(LParamObj),\r\n      };\r\n\r\n      if (LIsEditMode === true) {\r\n         LUrl = BaseUrl() + 'invoicetypes/' + LMe.props.UserRecord.id;\r\n      }//if..\r\n\r\n      LMe.setState({\r\n         IsLoading: true\r\n      });\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               LMe.setState({\r\n                  IsLoading: false,\r\n               });\r\n\r\n               if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                  var LAlertStateObj = {\r\n                     AlertDialogContent: <span> {responseJson.message} </span>,\r\n                     AlertDialogHeader: 'Error Occured',\r\n                  };\r\n\r\n                  LMe.setState({\r\n                     IsAlertDialogOpen: true,\r\n                     AlertDialog: LAlertStateObj,\r\n                  });\r\n\r\n                  return;\r\n               } //if..\r\n\r\n               //If Not error\r\n               LMe.pvtHandleOnClose();\r\n               LMe.props.UpdateUserStore(responseJson);\r\n\r\n               if (LIsEditMode === false) {\r\n\r\n                  //Reset the variables\r\n                  LMe.setState({\r\n                     SInvoiceType: '',\r\n                     SSingularInvoiceType: '',\r\n                     SInvoiceTypeStartsWith: ''\r\n                  });\r\n               }//if..\r\n            },\r\n            (error) => {\r\n               LMe.setState({\r\n                  IsLoading: false,\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <>\r\n            {/* Window */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.props.IsDialogOpen}\r\n               OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n               DialogContent={LMe.pvtGetDialogContent()}\r\n               DialogActions={LMe.pvtGetDialogAction()}\r\n               DialogHeader={\r\n                  isEmpty(LMe.props.UserRecord.id) ? 'New Invoice Type' : 'Edit Invoice Type'\r\n               }\r\n               DialogLoading={LMe.state.IsLoading}\r\n               IsWindow={true}\r\n            />\r\n\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n               DialogActions={<></>}\r\n               DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n               IsWindow={false}\r\n            />\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsdlgCustomerFields;\r\n","import { GenConstants } from '../../tsclsGenConstants';\r\nimport {\r\n    tsGetDateFromServerDateForInpField, tsGetInvoiceDispNoByInvoiceNo,\r\n    tsGetInvoiceDispNameByActionCode,\r\n    tsGetGstAmount,\r\n    tsGetIGSTAmount,\r\n} from '../../tsclsGenUtils';\r\n\r\nclass clsGSTUtils {\r\n\r\n    GetGSTR1Columns() {\r\n        /**\r\n         * @method GetGSTR1Columns\r\n         * This method will return the columns (All the fields for GSTR1 Report)\r\n         */\r\n\r\n        // var LMe = this;\r\n\r\n        return [\r\n            {\r\n                field: 'cstGSTNo',\r\n                headerName: 'GSTIN/UIN of Recipient',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 180\r\n            },\r\n            {\r\n                field: 'cstName',\r\n                headerName: 'Customer Name',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 180\r\n            },\r\n            {\r\n                field: 'isPurchaserInvoice',\r\n                headerName: 'Transcation Type',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 180,\r\n                renderCell: (params) => (\r\n                    //The value of 'isPurchaserInvoice' flag is always true in GSTR1 case\r\n                    <span>\r\n                        {params.value === 1 ? 'Purchase' : 'Sale'}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'invoiceDate',\r\n                headerName: 'Date',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => {\r\n\r\n                    return tsGetDateFromServerDateForInpField(params.value);\r\n                },\r\n            },\r\n            // {\r\n            //     field: 'invoiceType',\r\n            //     headerName: 'Invoice Type',\r\n            //     headerClassName: 'tsGridHeader',\r\n            //     minWidth: 157,\r\n            //     renderCell: (params) => (\r\n            //         <span>\r\n            //             {tsGetInvoiceDispNameByActionCode(params.value)}\r\n            //         </span>\r\n            //     ),\r\n            // },\r\n            {\r\n                field: 'invoiceNo',\r\n                headerName: 'Invoice No',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'))}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'GrandTotal',\r\n                headerName: 'Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'Rs. ' + (params.value || 0)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'CESS Rate',//Calculated Field\r\n                headerName: 'CESS Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'0'}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'Reverse Charge',//Calculated Field\r\n                headerName: 'Reverse Charge',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'N'}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: GenConstants().IGST,//Calculated Field\r\n                headerName: 'IGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        Rs.{tsGetIGSTAmount(params.getValue(params.id, 'products'), params.getValue(params.id, 'GrandTotal'), 'soldPrice')}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: GenConstants().CGST,//Calculated Field\r\n                headerName: 'CGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        Rs.{tsGetGstAmount(params.getValue(params.id, 'products'), params.getValue(params.id, 'GrandTotal'), 'soldPrice')}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: GenConstants().SGST,//Calculated Field\r\n                headerName: 'SGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        Rs.{tsGetGstAmount(params.getValue(params.id, 'products'), params.getValue(params.id, 'GrandTotal'), 'soldPrice')}\r\n                    </span>\r\n                ),\r\n            },\r\n        ];\r\n    }\r\n\r\n    GetInvoiceWiseProfitColumns() {\r\n        /**\r\n         * @method GetGSTR1Columns\r\n         * This method will return the columns (All the fields for GSTR1 Report)\r\n         */\r\n        return [\r\n            {\r\n                field: 'cstName',\r\n                headerName: 'Customer Name',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                flex: 1\r\n            },\r\n            {\r\n                field: 'invoiceDate',\r\n                headerName: 'Date',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => {\r\n\r\n                    return tsGetDateFromServerDateForInpField(params.value);\r\n                },\r\n            },\r\n            {\r\n                field: 'invoiceType',\r\n                headerName: 'Invoice Type',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {tsGetInvoiceDispNameByActionCode(params.value)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'invoiceNo',\r\n                headerName: 'Invoice No',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'))}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 130,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'grandTotal',\r\n                headerName: 'Total Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 160,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'Rs. ' + (params.value || 0)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'ProfitPerInvoice',\r\n                headerName: 'Profit / Loss Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                cellClassName: (params) => params.value > 0 ? 'tsGridSuccessCell' : 'tsGridFailureCell',\r\n                width: 250,\r\n                renderCell: (params) => {\r\n                    var LValue = params.value;\r\n\r\n                    if (LValue > 0) {\r\n                        return <span title='Profit Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                    }\r\n                    return <span title='Loss Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                }\r\n            },\r\n        ];\r\n    }\r\n\r\n    GetB2CSColumns() {\r\n        /**\r\n         * @method GetB2CSColumns\r\n         * This method will return the columns (All the fields for GSTR1 Report)\r\n         */\r\n        return [\r\n            {\r\n                field: 'type',\r\n                headerName: 'Type',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        OE\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'State',\r\n                headerName: 'Place Of Supply',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                flex: 1\r\n            },\r\n            {\r\n                field: 'ApplicableTaxRate',//Not coming from DB\r\n                headerName: 'Applicable % of Tax Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'Rate',\r\n                headerName: 'Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'cessAmount',\r\n                headerName: 'Cess Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        0.0\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'ECommerceGSTIN',\r\n                headerName: 'E-Commerce GSTIN',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 230\r\n            }\r\n        ];\r\n    }\r\n\r\n    GetB2CLColumns() {\r\n        /**\r\n         * @method GetB2CLColumns\r\n         * This method will return the columns (All the fields for GSTR1 Report)\r\n         */\r\n        return [\r\n            {\r\n                field: 'invoiceNo',\r\n                headerName: 'Invoice Number',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'))}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'invoiceDate',\r\n                headerName: 'Invoice Date',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => {\r\n\r\n                    return tsGetDateFromServerDateForInpField(params.value);\r\n                },\r\n            },\r\n            {\r\n                field: 'GrandTotal',\r\n                headerName: 'Invoice Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'Rs. ' + (params.value || 0)}\r\n                    </span>\r\n                ),\r\n            },\r\n            // {\r\n            //     field: 'type',\r\n            //     headerName: 'Type',\r\n            //     headerClassName: 'tsGridHeader',\r\n            //     minWidth: 180,\r\n            //     renderCell: (params) => (\r\n            //         <span>\r\n            //             OE\r\n            //         </span>\r\n            //     ),\r\n            // },\r\n            {\r\n                field: 'State',\r\n                headerName: 'Place Of Supply',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                flex: 1\r\n            },\r\n            {\r\n                field: 'ApplicableTaxRate',//Not coming from DB\r\n                headerName: 'Applicable % of Tax Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'Rate',\r\n                headerName: 'Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'cessAmount',\r\n                headerName: 'Cess Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        0.0\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'ECommerceGSTIN',\r\n                headerName: 'E-Commerce GSTIN',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 230\r\n            }\r\n        ];\r\n    }\r\n\r\n    GetB2BColumns() {\r\n        /**\r\n         * @method GetB2BColumns\r\n         * This method will return the columns (All the fields for GSTR1 Report)\r\n         */\r\n        return [\r\n            {\r\n                field: 'cstGSTNo',\r\n                headerName: 'GSTIN/UIN of Recipient',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 180\r\n            },\r\n            {\r\n                field: 'cstName',\r\n                headerName: 'Receiver Name',\r\n                headerClassName: 'tsGridHeader',\r\n                width: 180\r\n            },\r\n            {\r\n                field: 'invoiceNo',\r\n                headerName: 'Invoice Number',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'))}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'invoiceDate',\r\n                headerName: 'Invoice Date',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => {\r\n\r\n                    return tsGetDateFromServerDateForInpField(params.value);\r\n                },\r\n            },\r\n            {\r\n                field: 'GrandTotal',\r\n                headerName: 'Invoice Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {'Rs. ' + (params.value || 0)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'State',\r\n                headerName: 'Place Of Supply',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                flex: 1\r\n            },\r\n            {\r\n                field: 'ReverseCharge',//Not comming from DB\r\n                headerName: 'Reverse Charge',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        N\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'ApplicableTaxRate',//Not coming from DB\r\n                headerName: 'Applicable % of Tax Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'GSTInvoiceType',//Not comming from DB\r\n                headerName: 'Invoice Type',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 157,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        Regular\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'ECommerceGSTIN',//Not comming from DB\r\n                headerName: 'E-Commerce GSTIN',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 230\r\n            },\r\n            {\r\n                field: 'Rate',\r\n                headerName: 'Rate',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'cessAmount',//Not comming from DB\r\n                headerName: 'Cess Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        0.0\r\n                    </span>\r\n                ),\r\n            }\r\n        ];\r\n    }\r\n\r\n    GetHSNColumns() {\r\n\r\n        return [\r\n            {\r\n                field: 'hsn',\r\n                headerName: 'HSN',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'productName',\r\n                headerName: 'Description',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 200\r\n            },\r\n            //Uncomment following code after UQC implementation done\r\n            // {\r\n            //     field: 'uqc',\r\n            //     headerName: 'UQC',\r\n            //     headerClassName: 'tsGridHeader',\r\n            //     minWidth: 180\r\n            // },\r\n            {\r\n                field: 'qty',\r\n                headerName: 'Total Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'TotalVal',\r\n                headerName: 'Total Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180\r\n            },\r\n            {\r\n                field: 'TaxableAmount',\r\n                headerName: 'Taxable Value',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        {(params.value).toFixed(2)}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                field: 'IGST',//Calculated Field\r\n                headerName: 'IGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: this.pvtGetIGST\r\n            },\r\n            {\r\n                field: 'cgst',//Calculated Field\r\n                headerName: 'CGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: this.pvtGetGST\r\n            },\r\n            {\r\n                field: 'sgst',//Calculated Field\r\n                headerName: 'SGST',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 150,\r\n                renderCell: this.pvtGetGST\r\n            },\r\n            {\r\n                field: 'cessAmount',//Not comming from DB\r\n                headerName: 'Cess Amount',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 180,\r\n                renderCell: (params) => (\r\n                    <span>\r\n                        0.0\r\n                    </span>\r\n                ),\r\n            }\r\n        ];\r\n    }\r\n\r\n    pvtGetGST(params) {\r\n\r\n        return <span>\r\n            Rs.{tsGetGstAmount([params.row], params.getValue(params.id, 'TotalVal'), 'TotalVal')}\r\n        </span>;\r\n    }\r\n\r\n    pvtGetIGST(params) {\r\n\r\n        return <span>\r\n            Rs.{tsGetIGSTAmount([params.row], params.getValue(params.id, 'TotalVal'), 'TotalVal')}\r\n        </span>;\r\n    }\r\n}\r\n\r\nexport default clsGSTUtils;","import React, { Component } from 'react';\r\n\r\nimport TAppBar from './tsframAppBar';\r\nimport TMenu from \"./tsframMenu\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { BaseUrl, LogOut, tsIsUserLoggedIn, tsIsMobileView, tsGetProjectId, isEmpty, tsSetInvoiceType } from './tsclsGenUtils.js';\r\n\r\nimport SinglePg from './tsfrmSinglePg.js';\r\n\r\n\r\n\r\nclass tsclsHome extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this,\r\n            LIsSideMenuVisible = true;\r\n\r\n        if (tsIsMobileView() === true) {\r\n            LIsSideMenuVisible = false;\r\n        }\r\n\r\n        LMe.state = {\r\n            IsSideMenuVisible: LIsSideMenuVisible,\r\n            FMenuList: 0,\r\n            IsShowLoading: true\r\n        };\r\n\r\n        LMe.pvtDefineProperties();\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n        var LMe = this;\r\n\r\n        LMe.FUserDetails = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtFetchInvoiceTypes(function () {\r\n\r\n            LMe.pvtFetchMenuJson();\r\n        });\r\n\r\n        // Check for session\r\n        if (tsIsUserLoggedIn() === false) {\r\n            LogOut(LMe.props.history);\r\n        }\r\n    }\r\n\r\n    pvtFetchInvoiceTypes(p_callback) {\r\n        /**\r\n         * @method pvtFetchInvoiceTypes\r\n         * This function will fetch the invoice types\r\n         * and sets in genutils cache\r\n         */\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'invoicetypes';\r\n\r\n        LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    LMe.setState({\r\n                        SIsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.status === false) {\r\n                        return;\r\n                    }\r\n\r\n                    //Updating cache\r\n                    tsSetInvoiceType(responseJson);\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n                        p_callback();\r\n                    }\r\n                },\r\n                (error) => {\r\n                    LMe.setState({\r\n                        SIsLoading: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchMenuJson() {\r\n        /**\r\n         * @method pvtFetchMenuJson\r\n         * This function will fetch the list which will visible in side panel\r\n         * \r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        if (LMe.state.FMenuList !== 0 && LMe.state.FMenuList !== -1) {\r\n\r\n            return;\r\n        }\r\n\r\n        LUrl = BaseUrl() + 'menujson';\r\n\r\n        LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.status === false) {\r\n                        LMe.setState({\r\n                            FMenuList: -1\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    if (new Date(responseJson.expDate) < new Date()) {\r\n\r\n                        responseJson = -2;\r\n                    }//if..\r\n\r\n                    LMe.setState({\r\n                        FMenuList: responseJson\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FMenuList: -1\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    HandleOnNodeSelect(p_event, p_value) {\r\n        /**\r\n         * INTENT: This function will call on node select\r\n         */\r\n\r\n        var LMe = this;\r\n\r\n        // Check if same node is clicked by user\r\n        if (LMe.pvtGetParamalink() === p_value) {\r\n            return;\r\n        }//if..\r\n\r\n        // Identifying is parent node or not, If parent node then no need to change URL\r\n        //Parent node means Parent Node in Menu Tree\r\n        var LArr = p_value.split(\"-\");\r\n        if (LArr[0] === 'tsparent') {\r\n            return;\r\n        }//if..\r\n\r\n        LMe.setState({ IsShowLoading: true });\r\n\r\n        LMe.props.history.push(\"/\" + p_value);\r\n    }\r\n\r\n    pvtShowLoading() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.state.IsShowLoading) {\r\n\r\n            return <LinearProgress color=\"secondary\" />;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    HideLoading() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.state.IsShowLoading === false) {\r\n            return;\r\n        }\r\n\r\n        if (tsIsMobileView() === true) {\r\n            LMe.setState({ IsShowLoading: false, IsSideMenuVisible: false });\r\n        }\r\n        else {\r\n            LMe.setState({ IsShowLoading: false });\r\n        }\r\n    }\r\n\r\n    pvtGetSingleCmp() {\r\n        /**\r\n         * INENT: This function will return the single cmp\r\n         */\r\n\r\n        var LMe = this;\r\n\r\n        // Mobile View\r\n        if (LMe.state.IsSideMenuVisible === true && tsIsMobileView() === true && LMe.state.IsShowLoading === false) {\r\n            return null;\r\n        }\r\n\r\n        return <SinglePg\r\n            onLoadComplete={() => LMe.HideLoading()}\r\n            Paramalink={LMe.pvtGetParamalink()}\r\n            arrMenuItems={LMe.state.FMenuList} />;\r\n    }\r\n\r\n    pvtGetAppBody() {\r\n        /**\r\n         * @method pvtGetAppBody\r\n         * This method will return the UI component for Application\r\n         */\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"tsAfterHeader\">\r\n                <TMenu arrMenuItems={LMe.state.FMenuList} isVisible={LMe.state.IsSideMenuVisible}\r\n                    OnNodeSelect={(p_event, p_value) => LMe.HandleOnNodeSelect(p_event, p_value)}\r\n                    Paramalink={LMe.pvtGetParamalink()}\r\n                />\r\n\r\n                <div className=\"tsMain\">\r\n                    {LMe.pvtGetSingleCmp()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    pvtGetAdminBody() {\r\n        /**\r\n         * @method pvtGetAdminBody\r\n         * This method will return the UI component for Admin Panel\r\n         */\r\n        var LMe = this,\r\n            LComponent;\r\n\r\n        const TDataJson = require('./admin/tsclsDataJson').default;\r\n\r\n        LComponent = <TDataJson\r\n            moduleType={LMe.pvtGetModuleType()}\r\n            historyProp={LMe.props.history}\r\n            onLoadComplete={() => LMe.HideLoading()}\r\n        ></TDataJson>;\r\n\r\n        return LComponent;\r\n    }\r\n\r\n    pvtGetParamalink() {\r\n        /**\r\n         * INTENT: This method will return the first paramalink from parameter\r\n         */\r\n\r\n        var LMe = this,\r\n            LPramalink = LMe.props.match.params.paramalink;\r\n\r\n        return LPramalink;\r\n    }\r\n\r\n    pvtGetModuleType() {\r\n        /**\r\n         * INTENT: This method will return the id from parameter\r\n         */\r\n\r\n        var LMe = this,\r\n            LModuleType = LMe.props.match.params.moduleType;\r\n\r\n        return LModuleType;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"tsHomePg\">\r\n                <div>\r\n                    <TAppBar\r\n                        onClose={() => LMe.setState({ IsSideMenuVisible: !LMe.state.IsSideMenuVisible })}\r\n                        historyProp={LMe.props.history}\r\n                        Title={LMe.pvtGetParamalink() === 'admin' ? 'Settings' : 'CRM SOFT'}\r\n                        GetUserDetails={(p_response) => LMe.FUserDetails = p_response || {}}\r\n                        CanShowBackButton={LMe.pvtGetParamalink() === 'admin' ? true : false}\r\n                    />\r\n                </div>\r\n                {LMe.pvtShowLoading()}\r\n\r\n                {LMe.pvtGetParamalink() === 'admin' ? LMe.pvtGetAdminBody() : LMe.pvtGetAppBody()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsclsHome;","import React, { Component } from 'react';\r\n\r\nimport { Box, Breadcrumbs, Typography, Link } from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport SettingsTwoToneIcon from '@material-ui/icons/SettingsTwoTone';\r\nimport { IsDesktopApp, isEmpty, tsSearchTree } from '../tsclsGenUtils';\r\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\r\nimport DashboardSharpIcon from '@material-ui/icons/DashboardSharp';\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport PermDataSettingIcon from '@material-ui/icons/PermDataSetting';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\nclass tsclsDataJson extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     var LMe = this;\r\n    // }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.props.onLoadComplete();\r\n        LMe.pvtDefineProperties();\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n        /**\r\n         * @method pvtDefineProperties\r\n         * This method will define the data json\r\n         */\r\n        // var LMe = this;\r\n    }\r\n\r\n    pvtGetParamalink() {\r\n        /**\r\n         * INTENT: This method will return the first paramalink from parameter\r\n         */\r\n\r\n        var LMe = this,\r\n            LHistoryProp = LMe.props.historyProp,\r\n            LPathName = '';\r\n\r\n        if (isEmpty(LHistoryProp) === false) {\r\n\r\n            LPathName = LHistoryProp.location.pathname;\r\n        }//if..\r\n\r\n        return LPathName;\r\n    }\r\n\r\n    pvtGetDataJson() {\r\n        /**\r\n         * @method pvtGetDataJson\r\n         * This method will return the data json\r\n         */\r\n        var //LMe = this,\r\n            LDataJson;\r\n\r\n        LDataJson = {\r\n            children: [\r\n                {\r\n                    moduleTitle: 'Manage User Accounts',\r\n                    moduleDescription: 'Add, Modify, Activate/Deactivate users.',\r\n                    moduleType: 'ManageUserAccount',\r\n                    moduleClass: 'pkgManageUserAccount/tsfrmUserAccount',\r\n                    hidden: false,\r\n                    iconCmp: <PeopleSharpIcon />\r\n                },\r\n                {\r\n                    moduleTitle: 'Manage Project Details',\r\n                    moduleDescription: 'Setup project details for showing info on invoices, statement, etc.',\r\n                    moduleType: 'ConfigureProjectDetails',\r\n                    moduleClass: 'pkgProjectDetails/tsfrmProjectForm',\r\n                    hidden: false,\r\n                    iconCmp: <PermDataSettingIcon />\r\n                },\r\n                {\r\n                    moduleTitle: 'Backup and Restore',\r\n                    moduleDescription: 'The most effective way to prevent business data loss is to back up your files.',\r\n                    moduleType: 'BackupRestore87885236',\r\n                    isFeatureAvailableInWeb: IsDesktopApp(),\r\n                    hidden: false,\r\n                    iconCmp: <CloudDownloadIcon />,\r\n                    children: [\r\n                        {\r\n                            moduleTitle: 'Backup',\r\n                            moduleDescription: 'This option will allow you to generate and download the backup file of your data.',\r\n                            moduleType: 'Backup87885236',\r\n                            moduleClass: 'pkgBackupAndRestore/frmBackup',\r\n                            // Made it available in web producation\r\n                            isFeatureAvailableInWeb: true,\r\n                            hidden: false,\r\n                            parentModuleType: 'BackupRestore87885236',\r\n                            iconCmp: <CloudDownloadIcon />\r\n                        },\r\n                        {\r\n                            moduleTitle: 'Restore',\r\n                            moduleDescription: 'This option will allow you to restore your data from the backup file.',\r\n                            moduleType: 'Restore',\r\n                            moduleClass: 'pkgBackupAndRestore/frmRestore',\r\n                            isFeatureAvailableInWeb: IsDesktopApp(),\r\n                            hidden: false,\r\n                            parentModuleType: 'BackupRestore',\r\n                            iconCmp: <RestoreIcon />\r\n                        },\r\n                    ]\r\n                },\r\n                {\r\n                    moduleTitle: 'Choose Invoice Template',\r\n                    moduleDescription: 'Select default template of invoice for printing.',\r\n                    moduleType: 'InvoiceTemplate',\r\n                    moduleClass: 'pkgTemplateSelection/tsfrmInvoiceSelection',\r\n                    hidden: false,\r\n                    iconCmp: <PrintIcon />\r\n                },\r\n                {\r\n                    moduleTitle: 'Configure Customer Fields',\r\n                    moduleDescription: 'Add, Modify, Delete fields for Customers.',\r\n                    moduleType: 'ConfigureCustomerFields',\r\n                    moduleClass: 'pkgCustomCustomersFields/tsfrmCstFieldsShell',\r\n                    hidden: false,\r\n                    iconCmp: <DashboardSharpIcon />\r\n                },\r\n                {\r\n                    moduleTitle: 'Configure Product Fields',\r\n                    moduleDescription: 'Add, Modify, Delete custom fields for Products, Stocks.',\r\n                    moduleType: 'ConfigureCustomFields',\r\n                    hidden: false,\r\n                    iconCmp: <BallotIcon />,\r\n                    children: [\r\n                        {\r\n                            moduleTitle: 'Configure Product Fields',\r\n                            moduleDescription: 'Add, Modify, Delete fields for Products.',\r\n                            moduleType: 'ConfigureProductFields',\r\n                            moduleClass: 'pkgCustomProductFields/tsfrmProductFieldsShell',\r\n                            hidden: false,\r\n                            parentModuleType: 'ConfigureCustomFields',\r\n                            iconCmp: <DashboardSharpIcon />\r\n                        },\r\n                        {\r\n                            moduleTitle: 'Configure Stock Fields',\r\n                            moduleDescription: 'Add, Modify, Delete fields for Stock.',\r\n                            moduleType: 'ConfigureStockFields',\r\n                            moduleClass: 'pkgCustomStockFields/tsfrmStockFieldsShell',\r\n                            hidden: false,\r\n                            parentModuleType: 'ConfigureCustomFields',\r\n                            iconCmp: <BallotIcon />\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    moduleTitle: 'Configure Invoice Types',\r\n                    moduleDescription: 'Add, Modify, Delete invoice types.',\r\n                    moduleType: 'ConfigureInvoiceTypes',\r\n                    moduleClass: 'pkgInvoiceTypes/tsfrmInvoiceTypeShell',\r\n                    hidden: false,\r\n                    iconCmp: <DashboardSharpIcon />\r\n                }\r\n            ]\r\n        };\r\n\r\n        return LDataJson;\r\n    }\r\n\r\n    pvtHandleOnLinkClick(p_moduleType) {\r\n        /**\r\n         * @method pvtHandleOnLinkClick\r\n         * This method will open module for moduleType\r\n         */\r\n        var LMe = this,\r\n            LHistoryProp = LMe.props.historyProp;\r\n\r\n        if (isEmpty(LHistoryProp) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LHistoryProp.push('/admin' + p_moduleType || '');\r\n    }\r\n\r\n    pvtGetUIComponent(p_objRecord) {\r\n        /**\r\n         * @method pvtGetUIComponent\r\n         * This function will return the UI component for parent object\r\n         */\r\n        var LMe = this,\r\n            LComponent = null;\r\n\r\n        if (isEmpty(p_objRecord) === true) {\r\n\r\n            return LComponent;\r\n        }\r\n\r\n        if (p_objRecord.hidden === true) {\r\n\r\n            return LComponent;\r\n        }\r\n\r\n        LComponent = (\r\n            <Box component=\"div\" className=\"tsVBox\" mt={4} ml={7} key={p_objRecord.moduleType}>\r\n                <div className=\"tsHBox\">\r\n                    <div style={{ margin: '5px 10px 0 0' }}>\r\n                        {p_objRecord.iconCmp}\r\n                    </div>\r\n                    <div>\r\n                        <Link\r\n                            style={{ cursor: 'pointer', fontSize: '20px' }}\r\n                            color=\"primary\"\r\n                            onClick={() => LMe.pvtHandleOnLinkClick('/' + p_objRecord.moduleType)}\r\n                            title={p_objRecord.moduleTitle}\r\n                        >\r\n                            {p_objRecord.moduleTitle}\r\n                        </Link>\r\n                        <Box component=\"div\" style={{ fontSize: '13px', margin: '5px 0 0 0' }}>{p_objRecord.moduleDescription}</Box>\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n        );\r\n\r\n        return LComponent;\r\n    }\r\n\r\n    pvtGetJsonFilesComponent(p_arrDataJson) {\r\n        /**\r\n         * @method pvtGetJsonFilesComponent\r\n         * This function will return the component from JSON object\r\n         */\r\n        var LMe = this,\r\n            LDataJson = p_arrDataJson || LMe.pvtGetDataJson().children || [],\r\n            LComponent = [];\r\n\r\n        if (isEmpty(LDataJson) === true) {\r\n\r\n            return LComponent;\r\n        }//if..\r\n\r\n        LDataJson.forEach(function (p_objRecord) {\r\n\r\n            if (LMe.pvtIsFeatureAvailableInWeb(p_objRecord.isFeatureAvailableInWeb) === false) {\r\n                // Here means the feature is not available in web\r\n                return true;\r\n            }\r\n\r\n            LComponent.push(LMe.pvtGetUIComponent(p_objRecord));\r\n        });//for..\r\n\r\n        return <div style={{ margin: '0 0 30px 0' }}>{LComponent}</div>;\r\n    }\r\n\r\n    pvtGetBreadcrumbs(p_moduleType) {\r\n        /**\r\n         * @method pvtGetBreadcrumbs\r\n         * This function will return the UI for breadcrumb\r\n         */\r\n        var LMe = this,\r\n            LModuleType = p_moduleType || LMe.props.moduleType,\r\n            LRecord,\r\n            LComponent = [];\r\n\r\n        if (isEmpty(LModuleType) === true) {\r\n\r\n            return null;\r\n        }//if..\r\n\r\n        LRecord = tsSearchTree(LMe.pvtGetDataJson() || {}, 'moduleType', LModuleType);\r\n\r\n        if (isEmpty(LRecord) === true) {\r\n\r\n            return LComponent;\r\n        }//if..\r\n\r\n        if (isEmpty(LRecord.parentModuleType) === false) {\r\n\r\n            LComponent.push(LMe.pvtGetBreadcrumbs(LRecord.parentModuleType));\r\n        }//if..\r\n\r\n        if (isEmpty(p_moduleType) === true) {\r\n            // Last node\r\n\r\n            LComponent.push(<Typography key={LModuleType + 'breadcrum'} color=\"textPrimary\">{LRecord.moduleTitle}</Typography>);\r\n        }\r\n        else {\r\n            // Buttons\r\n            LComponent.push(<Link color=\"inherit\" key={LModuleType + 'breadcrum'} style={{ cursor: 'pointer' }} onClick={() => LMe.pvtHandleOnLinkClick('/' + LRecord.moduleType)}>{LRecord.moduleTitle}</Link>);\r\n        }\r\n\r\n        return LComponent;\r\n    }\r\n\r\n    pvtGetSingleModule() {\r\n        /**\r\n         * @method pvtGetSingleModule\r\n         * This function will return the UI for single module\r\n         */\r\n        var LMe = this,\r\n            LModuleType = LMe.props.moduleType,\r\n            LRecord,\r\n            LComponent = null;\r\n\r\n        if (isEmpty(LModuleType) === true) {\r\n\r\n            return LComponent;\r\n        }//if..\r\n\r\n        LRecord = tsSearchTree(LMe.pvtGetDataJson() || {}, 'moduleType', LModuleType);\r\n\r\n        if (isEmpty(LRecord) === true) {\r\n\r\n            return LComponent;\r\n        }//if..\r\n\r\n        // if (LMe.pvtIsFeatureAvailableInWeb(LRecord.isFeatureAvailableInWeb) === false) {\r\n        //     // Here means the feature is not available in web\r\n        //     return LComponent;\r\n        // }\r\n\r\n        if (isEmpty(LRecord.children) === false) {\r\n\r\n            LComponent = LMe.pvtGetJsonFilesComponent(LRecord.children);\r\n            return LComponent;\r\n        }\r\n\r\n        const TModule = require('./' + LRecord.moduleClass).default;\r\n\r\n        LComponent = <TModule\r\n            moduleInfo={LRecord}\r\n            historyProp={LMe.props.history}\r\n        ></TModule>;\r\n\r\n        return LComponent;\r\n    }\r\n\r\n    pvtIsFeatureAvailableInWeb(p_boolIsFeatureAvailableInWeb) {\r\n        /**\r\n         * @method pvtIsFeatureAvailableInWeb\r\n         */\r\n\r\n        if (p_boolIsFeatureAvailableInWeb !== false) {\r\n            return true;\r\n        }//if..\r\n\r\n        return IsDesktopApp() === true;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"flex1 tsVBox tsOverFlowAuto\">\r\n                <Box component=\"div\" display=\"flex\" px={6} pb={2} style={{ background: '#f5f5f5' }}>\r\n                    {/* Admin Setting Icon */}\r\n                    <div style={{ margin: '25px 6px 0 0' }}><SettingsTwoToneIcon /></div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Admin Title */}\r\n                        <div style={{ fontSize: '25px' }}> Settings </div>\r\n\r\n                        {/* Admin Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.1}>\r\n                            {/* {'Here you can configure settings.'} */}\r\n                        </Box>\r\n\r\n                        {/* Admin Breadcrumbs */}\r\n                        <Box component=\"div\" mt={2}>\r\n                            <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                                <Link key=\"adminBread\" color=\"inherit\" style={{ cursor: 'pointer' }} onClick={() => LMe.pvtHandleOnLinkClick('')}>\r\n                                    Admin\r\n                                </Link>\r\n                                {LMe.pvtGetBreadcrumbs()}\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                <Box component=\"div\" px={5} className=\"flex1 tsVBox tsOverFlowAuto\" bgcolor=\"background.paper\">\r\n                    {LMe.pvtGetParamalink() === '/admin' ? LMe.pvtGetJsonFilesComponent() : LMe.pvtGetSingleModule()}\r\n                </Box>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsclsDataJson;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { GenConstants } from './tsclsGenConstants';\r\n\r\nexport function BaseUrl() {\r\n    // return 'http://localhost:5000/';\r\n    if (IsDesktopApp()) {\r\n        return 'http://localhost:5000/';\r\n    }//if..\r\n\r\n    return window.location.origin + '/';\r\n}\r\n\r\nexport function IsEmailValid(p_strEmail) {\r\n\r\n    if (isEmpty(p_strEmail)) {\r\n        return false;\r\n    }\r\n\r\n    const LArrEmail = String(p_strEmail).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n    return Array.isArray(LArrEmail) && (LArrEmail.length > 0);\r\n}\r\n\r\nexport function IsDesktopApp() {\r\n\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function OriginUrl() {\r\n\r\n    // return window.location.origin + '/';\r\n    return '';\r\n}\r\n\r\nvar FObjLoggedInUserDetails = {};\r\nvar FInvoiceTypeArr = [];\r\n\r\nexport function LogOut(p_objHistoryProp) {\r\n    /**\r\n     * INTENT: This function will logout the user\r\n     * Go to Login Page\r\n     */\r\n\r\n    FObjLoggedInUserDetails = {};\r\n    tsSaveInLocalStorage('LoggedInUserDetails', JSON.stringify(FObjLoggedInUserDetails));\r\n\r\n    tsSaveInLocalStorage('userDetailsForAppBar', '');\r\n\r\n    tsClearCache();\r\n\r\n    if (isEmpty(p_objHistoryProp)) {\r\n\r\n        if (window.location.pathname === '/login') {\r\n            return;\r\n        }\r\n\r\n        window.location.pathname = '/login';\r\n    }\r\n\r\n    p_objHistoryProp.push('/login');\r\n}\r\n\r\nexport function tsClearCache() {\r\n\r\n    tsSaveInLocalStorage('tsLastSelectedInvoiceType', '');\r\n    tsSaveInLocalStorage('tsLastSelectedState', '');\r\n}\r\n\r\nexport function tsLogin(p_username, p_password, p_params) {\r\n    /**\r\n     * INTENT: This function will login the user\r\n     */\r\n\r\n    if (isEmpty(p_username) || isEmpty(p_password)) {\r\n\r\n        window.location.pathname = '/login';\r\n        return false;\r\n    }//if..\r\n\r\n    // localStorage.setItem('tsKey1', btoa(p_username));\r\n    // localStorage.setItem('tsKey2', btoa(p_password));\r\n    // localStorage.setItem('tsLoggenUserId', p_params.userId);\r\n\r\n    FObjLoggedInUserDetails = {\r\n        tsKey1: p_username,\r\n        tsKey2: p_password,\r\n        tsLoggenUserId: p_params.userId || p_params.id,\r\n        tsProjectId: p_params.projectId\r\n    };\r\n\r\n    tsSaveInLocalStorage('LoggedInUserDetails', JSON.stringify(FObjLoggedInUserDetails));\r\n}\r\n\r\nexport function tsGetLoggedInUser() {\r\n\r\n    if (isObjEmpty(FObjLoggedInUserDetails) === true) {\r\n\r\n        FObjLoggedInUserDetails = JSON.parse(tsGetFromLocalStorage('LoggedInUserDetails'));\r\n    }\r\n\r\n    return FObjLoggedInUserDetails || {};\r\n}\r\n\r\nexport function tsGetProjectId() {\r\n\r\n    return tsGetLoggedInUser().tsProjectId;\r\n}\r\n\r\nexport function tsIsUserLoggedIn() {\r\n    /**\r\n     * INTENT: This function will check for user session\r\n     */\r\n\r\n    if (isObjEmpty(tsGetLoggedInUser()) === true) {\r\n\r\n        return false;\r\n    }//if..\r\n\r\n    return true;\r\n}\r\n\r\nexport function tsIsMobileView() {\r\n\r\n    // Setting the mobile min width\r\n    if (window.innerWidth < 800) {\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function tsGetTimeBySeconds(p_sec) {\r\n    var d = Number(p_sec);\r\n    var h = Math.floor(d / 3600);\r\n    var m = Math.floor(d % 3600 / 60);\r\n    var s = Math.floor(d % 3600 % 60);\r\n\r\n    // var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\r\n    // var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\r\n    // var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\r\n\r\n    var hDisplay = h > 0 ? h + ':' : \"\";\r\n    var mDisplay = m + ':';\r\n    var sDisplay = s.toString().length === 1 ? '0' + s : s;\r\n\r\n\r\n    return hDisplay + mDisplay + sDisplay;\r\n}\r\n\r\nexport function tsSearchTree(p_objTree, p_field, p_val) {\r\n    /**\r\n     * @method tsSearchTree\r\n     * This method will search the p_objTree in tree and return the obj\r\n     * \r\n     * @public\r\n     * \r\n     * @param {Object}: Tree Object\r\n     * @param {String}: Field to search\r\n     * @param {String}: Value of given field\r\n     * \r\n     * @returns {Object}: Tree Node\r\n     */\r\n\r\n    if (p_objTree[p_field] === p_val) {\r\n\r\n        return p_objTree;\r\n    }//if..\r\n    else if (p_objTree.children != null) {\r\n\r\n        var LIndex,\r\n            LResult = null;\r\n\r\n        for (LIndex = 0; LResult == null && LIndex < p_objTree.children.length; LIndex++) {\r\n\r\n            LResult = tsSearchTree(p_objTree.children[LIndex], p_field, p_val);\r\n        }//for..\r\n\r\n        return LResult;\r\n    }//else if..\r\n\r\n    return null;\r\n}\r\n\r\nexport function isEmpty(value, allowEmptyString) {\r\n    /**\r\n     * Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:\r\n     *\r\n     * - `null`\r\n     * - `undefined`\r\n     * - a zero-length array\r\n     * - a zero-length string (Unless the `allowEmptyString` parameter is set to `true`)\r\n     *\r\n     * @param {Object} value The value to test.\r\n     * @param {Boolean} [allowEmptyString=false] `true` to allow empty strings.\r\n     * @return {Boolean}\r\n     */\r\n\r\n    return (value == null) || (!allowEmptyString ? value === '' : false) || (isArray(value) && value.length === 0);\r\n}\r\n\r\nexport function isObjEmpty(object) {\r\n    for (var key in object) {\r\n        if (object.hasOwnProperty(key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isArray(value) {\r\n    /**\r\n    * Returns `true` if the passed value is a JavaScript Array, `false` otherwise.\r\n    *\r\n    * @param {Object} target The target to test.\r\n    * @return {Boolean}\r\n    * @method\r\n    */\r\n    return toString.call(value) === '[object Array]';\r\n}\r\n\r\nexport function isDate(value) {\r\n    /**\r\n    * Returns `true` if the passed value is a JavaScript Date object, `false` otherwise.\r\n    * @param {Object} object The object to test.\r\n    * @return {Boolean}\r\n    */\r\n    return toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function FindRecordInArrOfObj(p_array, p_property, p_value) {\r\n    /**\r\n     * @method FindRecordInArrOfObj\r\n     *   This method will find the element in array and return the result\r\n    */\r\n\r\n    var LResult = null;\r\n\r\n    if (isEmpty(p_array) === true || isEmpty(p_property) === true || isEmpty(p_value) === true) {\r\n        return LResult;\r\n    }//if..\r\n\r\n    p_array.forEach(function (p_objRecord) {\r\n\r\n        if (p_objRecord[p_property] === p_value) {\r\n\r\n            LResult = p_objRecord;\r\n            return false;\r\n        }//if..\r\n    });//forEach..\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetDateFromServerDateForInpField(p_jsDate) {\r\n    /**\r\n     * @method tsGetDateFromServerDateForInpField\r\n     *   This method will returns the date\r\n    */\r\n\r\n    var LDispDate = '';\r\n    // LMonth,\r\n    // LDate;\r\n\r\n    if (isEmpty(p_jsDate) === true) {\r\n\r\n        return LDispDate;\r\n    }//if..\r\n\r\n    var LDateObj = new Date(p_jsDate);\r\n\r\n    if (isEmpty(LDateObj) === true) {\r\n\r\n        return LDispDate;\r\n    }\r\n\r\n    return LDateObj.toLocaleString();\r\n}\r\n\r\nexport function tsGetDateFromServerDateForPrintField(p_jsDate) {\r\n    /**\r\n     * @method tsGetDateFromServerDateForPrintField\r\n     *   This method will returns the date\r\n    */\r\n\r\n    var LDispDate = '';\r\n\r\n    if (isEmpty(p_jsDate) === true) {\r\n\r\n        return LDispDate;\r\n    }//if..\r\n\r\n    var LDateObj = new Date(p_jsDate);\r\n\r\n    if (isEmpty(LDateObj) === true) {\r\n\r\n        return LDispDate;\r\n    }\r\n\r\n    // return LDateObj.toLocaleString();\r\n    return LDateObj.toLocaleDateString();\r\n}\r\n\r\nexport function tsSetInvoiceType(p_arrInvoiceTypes) {\r\n\r\n    FInvoiceTypeArr = p_arrInvoiceTypes || [];\r\n}\r\n\r\nexport function tsGetInvoiceTypes(p_boolCanIncludeSystemTypes) {\r\n\r\n    var LResult = cloneVar(FInvoiceTypeArr) || [];\r\n\r\n    if (p_boolCanIncludeSystemTypes === true) {\r\n\r\n        LResult.push(\r\n            {\r\n                SINGULAR_NAME: GenConstants().PAYMENT_IN,\r\n                NAME: GenConstants().PAYMENT_IN,\r\n                ACT_CODE: GenConstants().PAYMENT_IN_ACT_CODE,\r\n                INVOICE_NO_STARTS_WITH: 'I-'\r\n            },\r\n            {\r\n                SINGULAR_NAME: GenConstants().PAYMENT_OUT,\r\n                NAME: GenConstants().PAYMENT_OUT,\r\n                ACT_CODE: GenConstants().PAYMENT_OUT_ACT_CODE,\r\n                INVOICE_NO_STARTS_WITH: 'I-'\r\n            }\r\n        );\r\n    }\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetInvoiceDispNameByActionCode(p_strActionCode) {\r\n\r\n    var LDispName = p_strActionCode;\r\n\r\n    var LInvoiceTypeArr = tsGetInvoiceTypes(true);\r\n\r\n    LInvoiceTypeArr.some(function (p_objRecord) {\r\n\r\n        if (p_strActionCode === p_objRecord.ACT_CODE) {\r\n\r\n            LDispName = p_objRecord.SINGULAR_NAME;\r\n            return true;\r\n        }//if..\r\n\r\n        return false;\r\n    });\r\n\r\n    return LDispName;\r\n}\r\n\r\nexport function tsGetPaymentModes() {\r\n    /**\r\n     * @method tsGetPaymentModes\r\n     * This method will return the menu items for payment type\r\n     */\r\n    return [\r\n        {\r\n            name: 'Cash'\r\n        },\r\n        {\r\n            name: 'Cheque'\r\n        },\r\n        {\r\n            name: 'UPI'\r\n        },\r\n        {\r\n            name: 'Mobile Wallet'\r\n        },\r\n        {\r\n            name: 'Bank Transfer'\r\n        },\r\n        {\r\n            name: 'Credit'\r\n        }\r\n    ];\r\n}\r\n\r\nexport function cloneVar(item, cloneDom) {\r\n    /**\r\n     * Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference.\r\n     * A reference for the object itself is returned if it's not a direct descendant of Object.\r\n     *\r\n     * @param {Object} item The variable to clone\r\n     * @param {Boolean} [cloneDom=true] `true` to clone DOM nodes.\r\n     * @return {Object} clone\r\n     */\r\n\r\n    if (item === null || item === undefined) {\r\n        return item;\r\n    }\r\n\r\n    // DOM nodes\r\n    // recursively\r\n    if (cloneDom !== false && item.nodeType && item.cloneNode) {\r\n        return item.cloneNode(true);\r\n    }\r\n\r\n    var type = toString.call(item),\r\n        i, j, k, clone, key;\r\n\r\n    // Date\r\n    if (type === '[object Date]') {\r\n        return new Date(item.getTime());\r\n    }\r\n\r\n    // Array\r\n    if (type === '[object Array]') {\r\n        i = item.length;\r\n\r\n        clone = [];\r\n\r\n        while (i--) {\r\n            clone[i] = cloneVar(item[i], cloneDom);\r\n        }\r\n    }\r\n    // Object\r\n    else if (type === '[object Object]' && item.constructor === Object) {\r\n        clone = {};\r\n\r\n        for (key in item) {\r\n            clone[key] = cloneVar(item[key], cloneDom);\r\n        }\r\n        var enumerables = ['valueOf', 'toLocaleString', 'toString', 'constructor']\r\n        if (enumerables) {\r\n            for (j = enumerables.length; j--;) {\r\n                k = enumerables[j];\r\n                if (item.hasOwnProperty(k)) {\r\n                    clone[k] = item[k];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return clone || item;\r\n}\r\n\r\nfunction pvtPadLeadingZeros(num, size) {\r\n    var s = num + \"\";\r\n    while (s.length < size) s = \"0\" + s;\r\n    return s;\r\n}\r\n\r\nexport function tsGetInvoiceDispNoByInvoiceNo(p_intInvoiceNo, p_invoiceType, p_intIsPurchaserInvoice) {\r\n\r\n    var LInvocieNo;\r\n\r\n    p_intInvoiceNo = pvtPadLeadingZeros(p_intInvoiceNo, 3);\r\n\r\n    var LInvoiceTypeArr = tsGetInvoiceTypes(true);\r\n\r\n    LInvoiceTypeArr.forEach(function (p_objRecord) {\r\n\r\n        if (p_invoiceType === p_objRecord.ACT_CODE) {\r\n\r\n            LInvocieNo = p_objRecord.INVOICE_NO_STARTS_WITH + p_intInvoiceNo;\r\n\r\n            //If purchaser's invoice\r\n            if (p_intIsPurchaserInvoice === 1) {\r\n\r\n                LInvocieNo = 'SUP ' + p_objRecord.INVOICE_NO_STARTS_WITH + p_intInvoiceNo;\r\n            }//if..\r\n\r\n            return false;\r\n        }//if..\r\n    });\r\n\r\n    if (isEmpty(LInvocieNo) === true) {\r\n\r\n        LInvocieNo = 'I-' + p_intInvoiceNo;\r\n    }//if..\r\n\r\n    return LInvocieNo;\r\n}\r\n\r\nexport function tsIsInvoiceByType(p_invoiceType) {\r\n\r\n    var LInvoiceTypeArr = tsGetInvoiceTypes(),\r\n        LResult = false;\r\n\r\n    LInvoiceTypeArr.forEach(function (p_objRecord) {\r\n\r\n        if (p_invoiceType === p_objRecord.ACT_CODE) {\r\n\r\n            LResult = true;\r\n            return false;\r\n        }//if..\r\n    });\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetGstAmount(p_arrProducts, p_intGrandTotal, p_strPriceField) {\r\n    /**\r\n     * @method pvtGetGstAmount\r\n     * This function will return the GST\r\n     */\r\n    var LArrProducts = p_arrProducts || [],\r\n        LResult,\r\n        LGrandTotalOfCSGST = 0,\r\n        LGST = 0;\r\n\r\n    p_strPriceField = p_strPriceField || 'sellingPrice';\r\n\r\n    LArrProducts.forEach(function (p_objRecord) {\r\n\r\n        // if (p_objRecord.gstType === GenConstants().CSGST) {\r\n        if (p_objRecord.gstType !== GenConstants().IGST) {\r\n\r\n            LGST += (100 * (p_objRecord[p_strPriceField] * p_objRecord.qty)) / (100.0 + p_objRecord.gst);\r\n            LGrandTotalOfCSGST += p_objRecord[p_strPriceField] * p_objRecord.qty;\r\n        }\r\n\r\n    });\r\n\r\n    LResult = (LGrandTotalOfCSGST - LGST) / 2;\r\n\r\n    LResult = LResult.toFixed(2);\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetIGSTAmount(p_arrProducts, p_intGrandTotal, p_strPriceField) {\r\n    /**\r\n     * @method pvtGetGstAmount\r\n     * This function will return the GST\r\n     */\r\n    var LArrProducts = p_arrProducts || [],\r\n        LResult,\r\n        LGrandTotalOfIGST = 0,\r\n        LGST = 0;\r\n\r\n    p_strPriceField = p_strPriceField || 'sellingPrice';\r\n\r\n    LArrProducts.forEach(function (p_objRecord) {\r\n\r\n        if (p_objRecord.gstType === GenConstants().IGST) {\r\n\r\n            LGST += (100 * (p_objRecord[p_strPriceField] * p_objRecord.qty)) / (100.0 + p_objRecord.gst);\r\n            LGrandTotalOfIGST += p_objRecord[p_strPriceField] * p_objRecord.qty;\r\n        }\r\n\r\n    });\r\n\r\n    LResult = (LGrandTotalOfIGST - LGST);\r\n\r\n    LResult = LResult.toFixed(2);\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetDefaultToDate() {\r\n    var LDate = new Date();\r\n\r\n    return LDate.getFullYear() + '-' + ('0' + (LDate.getMonth() + 1)).slice(-2) + '-' + ('0' + LDate.getDate()).slice(-2);\r\n}\r\n\r\nexport function tsGetDefaultFromDate() {\r\n    var LDate = new Date();\r\n\r\n    return LDate.getFullYear() + '-' + ('0' + (LDate.getMonth() + 1)).slice(-2) + '-01';\r\n}\r\n\r\nexport function tsConvertNumInToWords(num) {\r\n    var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];\r\n    var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\r\n\r\n    if ((num = num.toString()).length > 9) return 'overflow';\r\n    var n = ('000000000' + num).substr(-9).match(/^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/);\r\n    if (!n) return; var str = '';\r\n    str += (n[1] !== 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';\r\n    str += (n[2] !== 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';\r\n    str += (n[3] !== 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';\r\n    str += (n[4] !== 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';\r\n    str += (n[5] !== 0) ? ((str !== '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + ' ' : '';\r\n    return str + \"Only\";\r\n}\r\n\r\nexport function tsPrintSupplierInvoice(p_invoiceType, p_invoiceNo) {\r\n    // var LMe = this;\r\n\r\n    if (isEmpty(p_invoiceType) || isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    // var LWindow = window.open('/singleInvoice/' + p_invoiceType + '/' + p_invoiceNo);\r\n\r\n    // LWindow.onload = function () {\r\n\r\n    //     setTimeout(function () {\r\n    //         LWindow.print();\r\n    //     }, 100);\r\n    // }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/supplierInvoice/' + p_invoiceType + '/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5'\r\n    };\r\n\r\n    tsFirePrintCmd(LParam);\r\n}\r\n\r\nexport function tsGenerateSupplierInvoicePDF(p_invoiceType, p_invoiceNo, p_callBack) {\r\n\r\n    if (isEmpty(p_invoiceType) || isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/supplierInvoice/' + p_invoiceType + '/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5',\r\n        downloadedFileName: tsGetInvoiceDispNoByInvoiceNo(p_invoiceNo, p_invoiceType, true) + '.pdf'\r\n    };\r\n\r\n    pvtGeneratePDF(LParam, p_callBack);\r\n}\r\n\r\nexport function tsPrint(p_invoiceType, p_invoiceNo) {\r\n    // var LMe = this;\r\n\r\n    if (isEmpty(p_invoiceType) || isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    // var LWindow = window.open('/singleInvoice/' + p_invoiceType + '/' + p_invoiceNo);\r\n\r\n    // LWindow.onload = function () {\r\n\r\n    //     setTimeout(function () {\r\n    //         LWindow.print();\r\n    //     }, 100);\r\n    // }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/singleInvoice/' + p_invoiceType + '/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5'\r\n    };\r\n\r\n    tsFirePrintCmd(LParam);\r\n}\r\n\r\nexport function tsPaymentPrint(p_invoiceNo) {\r\n\r\n    if (isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    // var LWindow = window.open('/paymentInvoice/' + p_invoiceNo);\r\n\r\n    // LWindow.onload = function () {\r\n\r\n    //     setTimeout(function () {\r\n    //         LWindow.print();\r\n    //     }, 100);\r\n    // }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/paymentInvoice/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5'\r\n    };\r\n\r\n    tsFirePrintCmd(LParam);\r\n}\r\n\r\nexport function tsStatementPrint(p_intCstId, p_strFromDate, p_strToDate) {\r\n\r\n    if (isEmpty(p_intCstId) || isEmpty(p_strFromDate) || isEmpty(p_strToDate)) {\r\n        return;\r\n    }\r\n\r\n    // var LWindow = window.open('/statement/' + p_intCstId + '/' + p_strFromDate + '/' + p_strToDate);\r\n\r\n    // LWindow.onload = function () {\r\n\r\n    //     setTimeout(function () {\r\n    //         LWindow.print();\r\n    //     }, 100);\r\n    // }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/statement/' + p_intCstId + '/' + p_strFromDate + '/' + p_strToDate,\r\n        landscape: false,\r\n        pageSize: 'A4'\r\n    };\r\n\r\n    tsFirePrintCmd(LParam);\r\n}\r\n\r\nexport function tsFirePrintCmd(p_objParam, p_callback) {\r\n    var LUrl;\r\n\r\n    if (IsDesktopApp() === false) {\r\n\r\n        var LWindow = window.open(p_objParam.url);\r\n\r\n        LWindow.onload = function () {\r\n            setTimeout(function () {\r\n                LWindow.print();\r\n            }, 100);\r\n        };\r\n\r\n        return;\r\n    }\r\n\r\n    LUrl = BaseUrl() + 'print';\r\n\r\n    var LRequestOptions = {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n        },\r\n        body: JSON.stringify(p_objParam)\r\n    };\r\n\r\n    // No need to check for session\r\n    fetch(LUrl, LRequestOptions)\r\n        .then((response) => response.json())\r\n        .then(\r\n            (responseJson) => {\r\n                if (responseJson.success === false) {\r\n\r\n                    console.error(responseJson);\r\n                    return;\r\n                }//if..\r\n\r\n                if (isEmpty(p_callback) === false) {\r\n\r\n                    p_callback();\r\n                }\r\n            },\r\n            (error) => {\r\n\r\n                console.error(error);\r\n            }\r\n        );\r\n}\r\n\r\nexport function tsGenerateInvoicePDF(p_invoiceType, p_invoiceNo, p_callBack) {\r\n\r\n    if (isEmpty(p_invoiceType) || isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/singleInvoice/' + p_invoiceType + '/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5',\r\n        downloadedFileName: tsGetInvoiceDispNoByInvoiceNo(p_invoiceNo, p_invoiceType) + '.pdf'\r\n    };\r\n\r\n    pvtGeneratePDF(LParam, p_callBack);\r\n}\r\n\r\nexport function tsGeneratePaymentInvoice(p_invoiceNo, p_callBack) {\r\n\r\n    if (isEmpty(p_invoiceNo)) {\r\n        return;\r\n    }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/paymentInvoice/' + p_invoiceNo,\r\n        landscape: true,\r\n        pageSize: 'A5',\r\n        downloadedFileName: tsGetInvoiceDispNoByInvoiceNo(p_invoiceNo) + '.pdf'\r\n    };\r\n\r\n    pvtGeneratePDF(LParam, p_callBack);\r\n}\r\n\r\nexport function tsGenerateStatement(p_intCstId, p_strFromDate, p_strToDate, p_callBack) {\r\n\r\n    if (isEmpty(p_intCstId) || isEmpty(p_strFromDate) || isEmpty(p_strToDate)) {\r\n        return;\r\n    }\r\n\r\n    var LParam = {\r\n        url: OriginUrl() + '#/statement/' + p_intCstId + '/' + p_strFromDate + '/' + p_strToDate,\r\n        landscape: false,\r\n        pageSize: 'A4',\r\n        downloadedFileName: 'Customer Statement ' + tsGetDateFromServerDateForInpField(p_strFromDate) + ' to ' + tsGetDateFromServerDateForInpField(p_strToDate) + '.pdf'\r\n    };\r\n\r\n    pvtGeneratePDF(LParam, p_callBack);\r\n}\r\n\r\nfunction pvtGeneratePDF(p_objParam, p_callback) {\r\n    var //LMe = this,\r\n        LUrl;\r\n\r\n    // LUrl = BaseUrl() + 'print';\r\n    LUrl = BaseUrl() + 'pdf';\r\n\r\n    var LRequestOptions = {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n        },\r\n        body: JSON.stringify(p_objParam)\r\n    };\r\n\r\n    // No need to check for session\r\n    fetch(LUrl, LRequestOptions)\r\n        .then((response) => response.json())\r\n        .then(\r\n            (responseJson) => {\r\n\r\n                if (isEmpty(p_callback) === false) {\r\n\r\n                    //most probably STOP the loading\r\n                    p_callback(responseJson);\r\n                }//if..\r\n\r\n                if (responseJson.success === false) {\r\n\r\n                    console.error(responseJson);\r\n                    return;\r\n                }//if..\r\n\r\n                tsDownlodByLink(BaseUrl() + responseJson.url, p_objParam.downloadedFileName);\r\n            },\r\n            (error) => {\r\n\r\n                if (isEmpty(p_callback) === false) {\r\n\r\n                    //most probably STOP the loading\r\n                    p_callback(error);\r\n                }//if..\r\n\r\n                console.error(error);\r\n            }\r\n        );\r\n}\r\n\r\nexport function tsDownlodByLink(p_url, p_strDownloadedFileName) {\r\n\r\n    var LAnchor = document.createElement('a');\r\n    LAnchor.setAttribute('href', p_url);\r\n    // LAnchor.setAttribute('target', '_blank');\r\n    LAnchor.setAttribute('download', p_strDownloadedFileName || 'File');\r\n\r\n    LAnchor.click();\r\n}\r\n\r\nexport function tsSaveInLocalStorage(p_key, p_value) {\r\n\r\n    localStorage.setItem(p_key, p_value);\r\n}\r\n\r\nexport function tsGetFromLocalStorage(p_key) {\r\n\r\n    return localStorage.getItem(p_key);\r\n}\r\n\r\nexport function tsGetDisplayTextByTaxType(p_strTaxTypeValue) {\r\n\r\n    var LResult = '',\r\n        LArrTaxTypes = tsGetTaxTypes() || [];\r\n\r\n    LArrTaxTypes.some((p_objRecord) => {\r\n\r\n        if (p_objRecord.value === p_strTaxTypeValue) {\r\n\r\n            LResult = p_objRecord.text;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    return LResult;\r\n}\r\n\r\nexport function tsGetTaxTypes() {\r\n\r\n    return [\r\n        {\r\n            text: 'CGST & SGST',\r\n            value: GenConstants().CSGST\r\n        },\r\n        {\r\n            text: 'IGST',\r\n            value: GenConstants().IGST\r\n        }\r\n    ];\r\n\r\n    //Unused\r\n    // return [\r\n    //     {\r\n    //         text: 'None 0.0%',\r\n    //         value: 0,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'Exempted 0.0%',\r\n    //         value: 0,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 0%',\r\n    //         value: 0,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 0.25%',\r\n    //         value: 0.25,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 3%',\r\n    //         value: 3,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 5%',\r\n    //         value: 5,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 12%',\r\n    //         value: 12,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 18%',\r\n    //         value: 18,\r\n    //         type: 'ggst'\r\n    //     },\r\n    //     {\r\n    //         text: 'GST 28%',\r\n    //         value: 28,\r\n    //         type: 'ggst'\r\n    //     },\r\n\r\n    //     {\r\n    //         text: 'IGST 0%',\r\n    //         value: 0,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 0.25%',\r\n    //         value: 0.25,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 3%',\r\n    //         value: 3,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 5%',\r\n    //         value: 5,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 12%',\r\n    //         value: 12,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 18%',\r\n    //         value: 18,\r\n    //         type: 'igst'\r\n    //     },\r\n    //     {\r\n    //         text: 'IGST 28%',\r\n    //         value: 28,\r\n    //         type: 'igst'\r\n    //     }\r\n    // ];\r\n}\r\n\r\nexport function tsGetStates() {\r\n\r\n    return [\r\n        \"01-Jammu & Kashmir\",\r\n        \"02-Himachal Pradesh\",\r\n        \"03-Punjab\",\r\n        \"04-Chandigarh\",\r\n        \"05-Uttarakhand\",\r\n        \"06-Haryana\",\r\n        \"07-Delhi\",\r\n        \"08-Rajasthan\",\r\n        \"09-Uttar Pradesh\",\r\n        \"10-Bihar\",\r\n        \"11-Sikkim\",\r\n        \"12-Arunachal Pradesh\",\r\n        \"13-Nagaland\",\r\n        \"14-Manipur\",\r\n        \"15-Mizoram\",\r\n        \"16-Tripura\",\r\n        \"17-Meghalaya\",\r\n        \"18-Assam\",\r\n        \"19-West Bengal\",\r\n        \"20-Jharkhand\",\r\n        \"21-Odisha\",\r\n        \"22-Chhattisgarh\",\r\n        \"23-Madhya Pradesh\",\r\n        \"24-Gujarat\",\r\n        \"25-Daman & Diu\",\r\n        \"26-Dadra & Nagar Haveli\",\r\n        \"27-Maharashtra\",\r\n        \"29-Karnataka\",\r\n        \"30-Goa\",\r\n        \"31-Lakshdweep\",\r\n        \"32-Kerala\",\r\n        \"33-Tamil Nadu\",\r\n        \"34-Puducherry\",\r\n        \"35-Andaman & Nicobar Islands\",\r\n        \"36-Telangana\",\r\n        \"37-Andhra Pradesh\",\r\n        \"97-Other Territory\"\r\n    ];\r\n    // var L = [\r\n    //     {\r\n    //         state: \"01-Jammu & Kashmir\",\r\n    //         stateId: 1\r\n    //     },\r\n    //     {\r\n    //         state: \"02-Himachal Pradesh\",\r\n    //         stateId: 2\r\n    //     },\r\n    //     {\r\n    //         state: \"03-Punjab\",\r\n    //         stateId: 3\r\n    //     },\r\n    //     {\r\n    //         state: \"04-Chandigarh\",\r\n    //         stateId: 4\r\n    //     },\r\n    //     {\r\n    //         state: \"05-Uttarakhand\",\r\n    //         stateId: 5\r\n    //     },\r\n    //     {\r\n    //         state: \"06-Haryana\",\r\n    //         stateId: 6\r\n    //     },\r\n    //     {\r\n    //         state: \"07-Delhi\",\r\n    //         stateId: 7\r\n    //     },\r\n    //     {\r\n    //         state: \"08-Rajasthan\",\r\n    //         stateId: 8\r\n    //     },\r\n    //     {\r\n    //         state: \"09-Uttar Pradesh\",\r\n    //         stateId: 9\r\n    //     },\r\n    //     {\r\n    //         state: \"10-Bihar\",\r\n    //         stateId: 10\r\n    //     },\r\n    //     {\r\n    //         state: \"11-Sikkim\",\r\n    //         stateId: 11\r\n    //     },\r\n    //     {\r\n    //         state: \"12-Arunachal Pradesh\",\r\n    //         stateId: 12\r\n    //     },\r\n    //     {\r\n    //         state: \"13-Nagaland\",\r\n    //         stateId: 13\r\n    //     },\r\n    //     {\r\n    //         state: \"14-Manipur\",\r\n    //         stateId: 14\r\n    //     },\r\n    //     {\r\n    //         state: \"15-Mizoram\",\r\n    //         stateId: 15\r\n    //     },\r\n    //     {\r\n    //         state: \"16-Tripura\",\r\n    //         stateId: 16\r\n    //     },\r\n    //     {\r\n    //         state: \"17-Meghalaya\",\r\n    //         stateId: 17\r\n    //     },\r\n    //     {\r\n    //         state: \"18-Assam\",\r\n    //         stateId: 18\r\n    //     },\r\n    //     {\r\n    //         state: \"19-West Bengal\",\r\n    //         stateId: 19\r\n    //     },\r\n    //     {\r\n    //         state: \"20-Jharkhand\",\r\n    //         stateId: 20\r\n    //     },\r\n    //     {\r\n    //         state: \"21-Odisha\",\r\n    //         stateId: 21\r\n    //     },\r\n    //     {\r\n    //         state: \"22-Chhattisgarh\",\r\n    //         stateId: 22\r\n    //     },\r\n    //     {\r\n    //         state: \"23-Madhya Pradesh\",\r\n    //         stateId: 23\r\n    //     },\r\n    //     {\r\n    //         state: \"24-Gujarat\",\r\n    //         stateId: 24\r\n    //     },\r\n    //     {\r\n    //         state: \"25-Daman & Diu\",\r\n    //         stateId: 25\r\n    //     },\r\n    //     {\r\n    //         state: \"26-Dadra & Nagar Haveli\",\r\n    //         stateId: 26\r\n    //     },\r\n    //     {\r\n    //         state: \"27-Maharashtra\",\r\n    //         stateId: 27\r\n    //     },\r\n    //     {\r\n    //         state: \"29-Karnataka\",\r\n    //         stateId: 29\r\n    //     },\r\n    //     {\r\n    //         state: \"30-Goa\",\r\n    //         stateId: 30\r\n    //     },\r\n    //     {\r\n    //         state: \"31-Lakshdweep\",\r\n    //         stateId: 31\r\n    //     },\r\n    //     {\r\n    //         state: \"32-Kerala\",\r\n    //         stateId: 32\r\n    //     },\r\n    //     {\r\n    //         state: \"33-Tamil Nadu\",\r\n    //         stateId: 33\r\n    //     },\r\n    //     {\r\n    //         state: \"34-Puducherry\",\r\n    //         stateId: 34\r\n    //     },\r\n    //     {\r\n    //         state: \"35-Andaman & Nicobar Islands\",\r\n    //         stateId: 35\r\n    //     },\r\n    //     {\r\n    //         state: \"36-Telangana\",\r\n    //         stateId: 36\r\n    //     },\r\n    //     {\r\n    //         state: \"37-Andhra Pradesh\",\r\n    //         stateId: 37\r\n    //     },\r\n    //     {\r\n    //         state: \"97-Other Territory\",\r\n    //         stateId: 97\r\n    //     }];\r\n}","import React, { Component } from 'react'\r\n// import BackupIcon from '@material-ui/icons/Backup';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport TurnedInIcon from '@material-ui/icons/TurnedIn';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\nimport { BaseUrl, isEmpty, tsDownlodByLink } from '../../tsclsGenUtils';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass frmBackup extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SLoading: false\r\n        };\r\n    }\r\n\r\n    pvtOnDownloadBtnClick(p_boolCanDownload, p_callBack) {\r\n        /**\r\n         * @method pvtOnDownloadBtnClick\r\n         * This method will fire the command\r\n         */\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LMe.FLoadingText = 'Generating backup file, please wait...';\r\n        LMe.setState({ SLoading: true });\r\n\r\n        setTimeout(() => {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            LUrl = BaseUrl() + 'backup-restores/backup';\r\n\r\n            if (p_boolCanDownload === true) {\r\n\r\n                tsDownlodByLink(LUrl);\r\n            }\r\n            else {\r\n\r\n                fetch(LUrl);\r\n            }\r\n\r\n            if (isEmpty(p_callBack) === false) {\r\n\r\n                p_callBack();\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    pvtOpenFolder() {\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'backup-restores/openfolder';\r\n\r\n        LMe.FLoadingText = 'Opening the folder, please wait...';\r\n        LMe.setState({ SLoading: true });\r\n\r\n        fetch(LUrl)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    LMe.setState({\r\n                        SLoading: false\r\n                    });\r\n\r\n                    //This will handle at rest side, \r\n                    //Nothing here\r\n                },\r\n                (error) => {\r\n                    LMe.setState({\r\n                        SLoading: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"flex1 tsVBox\">\r\n                <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n                    {/* Admin Setting Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <CloudDownloadIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Admin Title */}\r\n                        <div style={{ fontSize: '20px' }}>\r\n                            {' '}\r\n                            {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                        </div>\r\n\r\n                        {/* Admin Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            {LMe.props.moduleInfo.moduleDescription}\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                <div className=\"flex1\">\r\n                    <div className=\"tsVBox\" style={{ margin: '30px 0 0 70px' }}>\r\n\r\n                        <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<TurnedInIcon />}\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    LMe.pvtOnDownloadBtnClick(false, () => LMe.pvtOpenFolder());\r\n                                }}\r\n                            >\r\n                                Save backup file in Users folder\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <div style={{ margin: '20px 0 0 130px' }}>\r\n                            <span className=\"\">OR</span>\r\n                        </div>\r\n                        <div>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                startIcon={<CloudDownloadIcon />}\r\n                                style={{ margin: '20px 0 0 0' }}\r\n                                size=\"small\"\r\n                                onClick={() => LMe.pvtOnDownloadBtnClick(true)}\r\n                            >\r\n                                Generate and download the backup file\r\n                            </Button>\r\n                        </div>\r\n                        <span style={{ marginTop: 15 }} className=\"tsHelpText\">\r\n                            If the file has not downloaded automatically, <Link onClick={() => LMe.pvtOpenFolder()}>click here</Link> to open file path manually.\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <TLoading\r\n                    PLoadingText={LMe.FLoadingText}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default frmBackup;","import React, { Component } from 'react'\r\n// import BackupIcon from '@material-ui/icons/Backup';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\nimport { BaseUrl, isEmpty, tsDownlodByLink } from '../../tsclsGenUtils';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass frmBackup extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SLoading: false,\r\n            IsAlertDialogOpen: false\r\n        };\r\n\r\n        LMe.FForm = React.createRef();\r\n        LMe.FFileField = React.createRef();\r\n    }\r\n\r\n    pvtOnDownloadBtnClick(p_boolCanDownload, p_callBack) {\r\n        /**\r\n         * @method pvtOnDownloadBtnClick\r\n         * This method will fire the command\r\n         */\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LMe.FLoadingText = 'Generating backup file, please wait...';\r\n        LMe.setState({ SLoading: true });\r\n\r\n        setTimeout(() => {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            LUrl = BaseUrl() + 'backup-restores/backup';\r\n\r\n            if (p_boolCanDownload === true) {\r\n\r\n                tsDownlodByLink(LUrl);\r\n            }\r\n            else {\r\n\r\n                fetch(LUrl);\r\n            }\r\n\r\n            if (isEmpty(p_callBack) === false) {\r\n\r\n                p_callBack();\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    pvtOpenFolder() {\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'backup-restores/openfolder';\r\n\r\n        LMe.FLoadingText = 'Opening the folder, please wait...';\r\n        LMe.setState({ SLoading: true });\r\n\r\n        fetch(LUrl)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    LMe.setState({\r\n                        SLoading: false\r\n                    });\r\n\r\n                    //This will handle at rest side, \r\n                    //Nothing here\r\n                },\r\n                (error) => {\r\n                    LMe.setState({\r\n                        SLoading: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtOnFormSubmit(e) {\r\n\r\n        // var LMe = this;\r\n\r\n        return false;\r\n    }\r\n\r\n    pvtOnBtnClick() {\r\n\r\n        var LMe = this,\r\n            LSelectedFileName = LMe.FFileField.current.value;\r\n\r\n        if (isEmpty(LSelectedFileName) === true) {\r\n\r\n            LMe.FWarningText = 'Select the backup file which you want to restore and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        }//if..\r\n\r\n        LMe.FForm.current.submit();\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"flex1 tsVBox\">\r\n                <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n                    {/* Admin Setting Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <RestoreIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Admin Title */}\r\n                        <div style={{ fontSize: '20px' }}>\r\n                            {' '}\r\n                            {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                        </div>\r\n\r\n                        {/* Admin Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            {LMe.props.moduleInfo.moduleDescription}\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                <div className=\"flex1\">\r\n                    <div className=\"tsVBox\" style={{ margin: '30px 0 0 70px' }}>\r\n                        <form\r\n                            enctype=\"multipart/form-data\"\r\n                            action={BaseUrl() + 'backup-restores/uploadfile'}\r\n                            method=\"post\"\r\n                            ref={LMe.FForm}\r\n                        >\r\n                            <div>\r\n                                <input\r\n                                    accept=\".tnl\"\r\n                                    id=\"contained-button-file\"\r\n                                    multiple={false}\r\n                                    type=\"file\"\r\n                                    name=\"tsFileField\"\r\n                                    ref={LMe.FFileField}\r\n                                />\r\n                                {/* <input type=\"submit\" value=\"Submit\" /> */}\r\n                                <div style={{ marginTop: 25 }}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        startIcon={<CloudUploadIcon />}\r\n                                        size=\"small\"\r\n                                        onClick={LMe.pvtOnBtnClick.bind(LMe)}\r\n                                    >\r\n                                        Upload File and Restore data\r\n                                    </Button>\r\n                                </div>\r\n                                <div style={{ margin: '20px 0 0 0' }}>\r\n                                    <span className=\"tsHelpText\">\r\n                                        <b>Note</b>: Make sure you take a backup before restoring the data because once a new file is uploaded then there is no way to go with existing data.\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <TLoading\r\n                    PLoadingText={LMe.FLoadingText}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                />\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default frmBackup;","import React, { Component } from 'react';\r\nimport DashboardSharpIcon from '@material-ui/icons/DashboardSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Box, Toolbar, Button, IconButton, Tooltip } from '@material-ui/core';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TUserDialog from './tsdlgCustomerFields';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nclass tsfrmCstFieldsShell extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         UserRecord: {},\r\n         CanShowWarningIcon: false,\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false,\r\n         // SortModel: [\r\n         //    {\r\n         //       field: 'fieldName',\r\n         //       sort: 'asc'\r\n         //    }\r\n         // ]\r\n      };\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchCustomersFields();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchCustomersFields();\r\n\r\n      LMe.FSelectedRecord = null;\r\n      this.setState({\r\n         FetchedData: null,\r\n      });\r\n   }\r\n\r\n   pvtFetchCustomersFields() {\r\n      /**\r\n       * @method pvtFetchCustomersFields\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl;\r\n\r\n      LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.success === false) {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord._id;\r\n               // });\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtLoadDlg() {\r\n      /**\r\n       * @method pvtLoadDlg\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === false) {\r\n\r\n         return (<></>);\r\n      }//if..\r\n\r\n      return (\r\n         <TUserDialog\r\n            IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n            UpdateUserStore={(p_objUser) => LMe.UpdateUserStore(p_objUser)}\r\n            UserRecord={LMe.state.UserRecord || {}}\r\n         />\r\n      );\r\n   }\r\n\r\n   pvtEditUser(p_objParam) {\r\n      /**\r\n       * @method pvtEditUser\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         UserRecord: LRecord,\r\n      });\r\n   }\r\n\r\n   UpdateUserStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateUserStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser._id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser._id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      // Update state.\r\n      LMe.setState({ FetchedData: LArrResponse });\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditUser(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                     IsCnfrmDialogOpen: false\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               LMe.FSelectedRecord = null;\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               // Update state.\r\n               LMe.setState({\r\n                  FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.FCnfrmText = \"Are you sure want to delete this field?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n      return (\r\n         <div className=\"flex1 tsVBox\">\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n               {/* Admin Manage Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <DashboardSharpIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Admin Title */}\r\n                  <div style={{ fontSize: '20px' }}>\r\n                     {' '}\r\n                     {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                  </div>\r\n\r\n                  {/* Admin Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     {LMe.props.moduleInfo.moduleDescription}\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n\r\n            {/* ToolBar */}\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 30px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({ CanInvokeDialogOpen: true, UserRecord: {} })\r\n                  }\r\n               >\r\n                  New Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 10px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Field\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => {\r\n                     LMe.pvtRefresh();\r\n                  }}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n            </Toolbar>\r\n\r\n            {/* Grid */}\r\n            <div\r\n               style={{ margin: '5px 10px 20px 50px', maxWidth: '700px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={[\r\n                     {\r\n                        field: 'fieldName',\r\n                        headerName: 'Field Name',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 300,\r\n                        flex: 1,\r\n                     },\r\n                     {\r\n                        field: 'fieldType',\r\n                        headerName: 'Field Type',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 150,\r\n                     },\r\n                     {\r\n                        field: 'isRequired',\r\n                        headerName: 'Required?',\r\n                        headerClassName: 'tsGridHeader',\r\n                        width: 150,\r\n                        renderCell: (params) => (\r\n                           <>{params.value === 1 ? <CheckIcon /> : ''}</>\r\n                        ),\r\n                     },\r\n                  ]}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  pagination\r\n                  csvOptions={{ allColumns: false }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  //   components={{\r\n                  //      Toolbar: GridToolbar,\r\n                  //   }}\r\n                  onCellDoubleClick={(params) => LMe.pvtEditUser(params.row)}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                  // sortModel={LMe.state.SortModel}\r\n                  hideFooter\r\n               />\r\n            </div>\r\n\r\n            {LMe.pvtLoadDlg()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default tsfrmCstFieldsShell;\r\n","import React, { Component } from 'react';\r\nimport DashboardSharpIcon from '@material-ui/icons/DashboardSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Box, Toolbar, Button, IconButton, Tooltip } from '@material-ui/core';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TUserDialog from './tsdlgProductFields';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\n\r\nclass tsfrmProductFieldsShell extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         UserRecord: {},\r\n         CanShowWarningIcon: false,\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false,\r\n         // SortModel: [\r\n         //    {\r\n         //       field: 'fieldName',\r\n         //       sort: 'asc'\r\n         //    }\r\n         // ]\r\n         SInvoiceType: ''\r\n      };\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchProductsFields();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = null;\r\n      LMe.setState({\r\n         FetchedData: null,\r\n      });\r\n\r\n      LMe.pvtFetchProductsFields();\r\n   }\r\n\r\n   pvtFetchProductsFields(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtFetchProductsFields\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl,\r\n         LInvoiceType = p_actCodeInvoiceType || LMe.state.SInvoiceType;\r\n\r\n      if (isEmpty(LInvoiceType) === true) {\r\n\r\n         return;\r\n      }//if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/type/' + GenConstants().PRODUCT_CSTM_FIELDS + '/' + LInvoiceType;\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === false) {\r\n\r\n                  LMe.FWarningText = responseJson.message;\r\n                  LMe.setState({ IsAlertDialogOpen: true });\r\n                  return;\r\n               }\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord._id;\r\n               // });\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n               });\r\n            },\r\n            (error) => {\r\n\r\n               LMe.FWarningText = error.message;\r\n               LMe.setState({ IsAlertDialogOpen: true });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtLoadDlg() {\r\n      /**\r\n       * @method pvtLoadDlg\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === false) {\r\n\r\n         return (<></>);\r\n      }//if..\r\n\r\n      return (\r\n         <TUserDialog\r\n            IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n            UpdateUserStore={(p_objUser) => LMe.UpdateUserStore(p_objUser)}\r\n            UserRecord={LMe.state.UserRecord || {}}\r\n            InvoiceType={LMe.state.SInvoiceType}\r\n         />\r\n      );\r\n   }\r\n\r\n   pvtEditUser(p_objParam) {\r\n      /**\r\n       * @method pvtEditUser\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         UserRecord: LRecord,\r\n      });\r\n   }\r\n\r\n   UpdateUserStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateUserStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser._id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser._id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      // Update state.\r\n      LMe.setState({ FetchedData: LArrResponse });\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditUser(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                     IsCnfrmDialogOpen: false\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               LMe.FSelectedRecord = null;\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               // Update state.\r\n               LMe.setState({\r\n                  FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.FCnfrmText = \"Are you sure want to delete this field?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtHandleOnInvoiceTypeChange\r\n       * \r\n       * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n      LMe.FSelectedRecord = null;\r\n      LMe.pvtFetchProductsFields(p_actCodeInvoiceType);\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n      return (\r\n         <div className=\"flex1 tsVBox\">\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n               {/* Admin Manage Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <DashboardSharpIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Admin Title */}\r\n                  <div style={{ fontSize: '20px' }}>\r\n                     {' '}\r\n                     {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                  </div>\r\n\r\n                  {/* Admin Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     {LMe.props.moduleInfo.moduleDescription}\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n\r\n            {/* ToolBar */}\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 30px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({ CanInvokeDialogOpen: true, UserRecord: {} })\r\n                  }\r\n               >\r\n                  New Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 10px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Field\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => {\r\n                     LMe.pvtRefresh();\r\n                  }}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n\r\n               <TInvoiceType\r\n                  Value={LMe.state.SInvoiceType}\r\n                  OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                  EmptyText={'Product Fields Type'}\r\n               ></TInvoiceType>\r\n            </Toolbar>\r\n\r\n            {/* Grid */}\r\n            <div\r\n               style={{ margin: '5px 10px 20px 50px', maxWidth: '700px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={[\r\n                     {\r\n                        field: 'fieldName',\r\n                        headerName: 'Field Name',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 300,\r\n                        flex: 1,\r\n                     },\r\n                     {\r\n                        field: 'fieldType',\r\n                        headerName: 'Field Type',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 150,\r\n                     },\r\n                     {\r\n                        field: 'isRequired',\r\n                        headerName: 'Required?',\r\n                        headerClassName: 'tsGridHeader',\r\n                        width: 150,\r\n                        renderCell: (params) => (\r\n                           <>{params.value === 1 ? <CheckIcon /> : ''}</>\r\n                        ),\r\n                     },\r\n                  ]}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  pagination\r\n                  csvOptions={{ allColumns: false }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  //   components={{\r\n                  //      Toolbar: GridToolbar,\r\n                  //   }}\r\n                  onCellDoubleClick={(params) => LMe.pvtEditUser(params.row)}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                  // sortModel={LMe.state.SortModel}\r\n                  hideFooter\r\n               />\r\n            </div>\r\n\r\n            {LMe.pvtLoadDlg()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default tsfrmProductFieldsShell;\r\n","import React, { Component } from 'react';\r\nimport DashboardSharpIcon from '@material-ui/icons/DashboardSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Box, Toolbar, Button, IconButton, Tooltip } from '@material-ui/core';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TUserDialog from './tsdlgStockFields';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\n\r\nclass tsfrmStockFieldsShell extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         UserRecord: {},\r\n         CanShowWarningIcon: false,\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false,\r\n         // SortModel: [\r\n         //    {\r\n         //       field: 'fieldName',\r\n         //       sort: 'asc'\r\n         //    }\r\n         // ]\r\n         SInvoiceType: ''\r\n      };\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchProductsFields();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = null;\r\n      this.setState({\r\n         FetchedData: null,\r\n      });\r\n\r\n      LMe.pvtFetchProductsFields();\r\n   }\r\n\r\n   pvtFetchProductsFields(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtFetchProductsFields\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl,\r\n         LInvoiceType = p_actCodeInvoiceType || LMe.state.SInvoiceType;\r\n\r\n      if (isEmpty(LInvoiceType) === true) {\r\n\r\n         return;\r\n      }//if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/type/' + GenConstants().STOCK_CSTM_FIELDS + '/' + LInvoiceType;\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n      // No need to check for session\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === false) {\r\n                  LMe.FWarningText = responseJson.message;\r\n                  LMe.setState({ IsAlertDialogOpen: true });\r\n                  return;\r\n               }\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord._id;\r\n               // });\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n               });\r\n            },\r\n            (error) => {\r\n               LMe.FWarningText = error.message;\r\n               LMe.setState({ IsAlertDialogOpen: true });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtLoadDlg() {\r\n      /**\r\n       * @method pvtLoadDlg\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === false) {\r\n\r\n         return (<></>);\r\n      }//if..\r\n\r\n      return (\r\n         <TUserDialog\r\n            IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n            UpdateUserStore={(p_objUser) => LMe.UpdateUserStore(p_objUser)}\r\n            UserRecord={LMe.state.UserRecord || {}}\r\n            InvoiceType={LMe.state.SInvoiceType}\r\n         />\r\n      );\r\n   }\r\n\r\n   pvtEditUser(p_objParam) {\r\n      /**\r\n       * @method pvtEditUser\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         UserRecord: LRecord,\r\n      });\r\n   }\r\n\r\n   UpdateUserStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateUserStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser._id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser._id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      // Update state.\r\n      LMe.setState({ FetchedData: LArrResponse });\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditUser(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                     IsCnfrmDialogOpen: false\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               LMe.FSelectedRecord = null;\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               // Update state.\r\n               LMe.setState({\r\n                  FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Field and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.FCnfrmText = \"Are you sure want to delete this field?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtHandleOnInvoiceTypeChange\r\n       * \r\n       * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n      LMe.FSelectedRecord = null;\r\n      LMe.pvtFetchProductsFields(p_actCodeInvoiceType);\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n      return (\r\n         <div className=\"flex1 tsVBox\">\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n               {/* Admin Manage Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <DashboardSharpIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Admin Title */}\r\n                  <div style={{ fontSize: '20px' }}>\r\n                     {' '}\r\n                     {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                  </div>\r\n\r\n                  {/* Admin Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     {LMe.props.moduleInfo.moduleDescription}\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n\r\n            {/* ToolBar */}\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 30px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({ CanInvokeDialogOpen: true, UserRecord: {} })\r\n                  }\r\n               >\r\n                  New Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 10px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Field\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Field\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => {\r\n                     LMe.pvtRefresh();\r\n                  }}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n\r\n               <TInvoiceType\r\n                  Value={LMe.state.SInvoiceType}\r\n                  OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                  EmptyText={'Stock Fields Type'}\r\n               ></TInvoiceType>\r\n            </Toolbar>\r\n\r\n            {/* Grid */}\r\n            <div\r\n               style={{ margin: '5px 10px 20px 50px', maxWidth: '700px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={[\r\n                     {\r\n                        field: 'fieldName',\r\n                        headerName: 'Field Name',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 300,\r\n                        flex: 1,\r\n                     },\r\n                     {\r\n                        field: 'fieldType',\r\n                        headerName: 'Field Type',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 150,\r\n                     },\r\n                     {\r\n                        field: 'isRequired',\r\n                        headerName: 'Required?',\r\n                        headerClassName: 'tsGridHeader',\r\n                        width: 150,\r\n                        renderCell: (params) => (\r\n                           <>{params.value === 1 ? <CheckIcon /> : ''}</>\r\n                        ),\r\n                     },\r\n                  ]}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  pagination\r\n                  csvOptions={{ allColumns: false }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  //   components={{\r\n                  //      Toolbar: GridToolbar,\r\n                  //   }}\r\n                  hideFooter\r\n                  onCellDoubleClick={(params) => LMe.pvtEditUser(params.row)}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n               // sortModel={LMe.state.SortModel}\r\n\r\n               />\r\n            </div>\r\n\r\n            {LMe.pvtLoadDlg()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default tsfrmStockFieldsShell;\r\n","import React, { Component } from 'react';\r\nimport DashboardSharpIcon from '@material-ui/icons/DashboardSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Box, Toolbar, Button, IconButton, Tooltip } from '@material-ui/core';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { BaseUrl, isEmpty, tsGetProjectId, tsGetInvoiceTypes, tsSetInvoiceType } from '../../tsclsGenUtils';\r\nimport TInvoiceTypeDlg from './tsdlgInvoiceType';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmCstFieldsShell extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         UserRecord: {},\r\n         CanShowWarningIcon: false,\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false\r\n      };\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchInvoiceTypes(true);\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = null;\r\n      LMe.setState({\r\n         FetchedData: null,\r\n      });\r\n\r\n      LMe.pvtFetchInvoiceTypes();\r\n   }\r\n\r\n   pvtFetchInvoiceTypes(p_boolGetFromCache) {\r\n      /**\r\n       * @method pvtFetchInvoiceTypes\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this;\r\n\r\n      if (p_boolGetFromCache === true) {\r\n\r\n         LMe.setState({\r\n            FetchedData: tsGetInvoiceTypes(),\r\n         });\r\n\r\n         return;\r\n      }\r\n\r\n      var LUrl = BaseUrl() + 'invoicetypes';\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.success === false) {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }//if..\r\n\r\n               tsSetInvoiceType(responseJson);\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n               });\r\n            },\r\n            (error) => {\r\n               LMe.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtLoadDlg() {\r\n      /**\r\n       * @method pvtLoadDlg\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === false) {\r\n\r\n         return (<></>);\r\n      }//if..\r\n\r\n      return (\r\n         <TInvoiceTypeDlg\r\n            IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n            UpdateUserStore={(p_objUser) => LMe.UpdateUserStore(p_objUser)}\r\n            UserRecord={LMe.state.UserRecord || {}}\r\n         />\r\n      );\r\n   }\r\n\r\n   pvtEdit(p_objParam) {\r\n      /**\r\n       * @method pvtEdit\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         UserRecord: LRecord,\r\n      });\r\n   }\r\n\r\n   UpdateUserStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateUserStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser._id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser._id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      tsSetInvoiceType(LArrResponse);\r\n\r\n      // Update state.\r\n      LMe.setState({ FetchedData: LArrResponse });\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select the invoice type and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEdit(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n\r\n         LMe.FWarningText = 'Select the invoice type and try again..';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LUrl = BaseUrl() + 'invoicetypes/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === false) {\r\n\r\n                  LMe.FWarningText = responseJson.message;\r\n                  LMe.setState({ IsAlertDialogOpen: true, FetchedData: LArrFetchedData, IsCnfrmDialogOpen: false });\r\n                  return;\r\n               }\r\n\r\n               LMe.FSelectedRecord = null;\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               tsSetInvoiceType(LArrResponse);\r\n\r\n               // Update state.\r\n               LMe.setState({\r\n                  FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            },\r\n            (error) => {\r\n\r\n               LMe.FWarningText = error.message;\r\n               LMe.setState({ IsAlertDialogOpen: true, FetchedData: LArrFetchedData, IsCnfrmDialogOpen: false });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select the invoice type and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      var LAllFetchedData = LMe.state.FetchedData || [];\r\n      if (LAllFetchedData.length <= 1) {\r\n\r\n         LMe.FWarningText = <>At least one \"Invoice Type\" is mandatory.</>;\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      }\r\n\r\n      LMe.FCnfrmText = \"Are you sure you want to delete this invoice type?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n      return (\r\n         <div className=\"flex1 tsVBox\">\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n               {/* Admin Manage Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <DashboardSharpIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Admin Title */}\r\n                  <div style={{ fontSize: '20px' }}>\r\n                     {' '}\r\n                     {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                  </div>\r\n\r\n                  {/* Admin Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     {LMe.props.moduleInfo.moduleDescription}\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n\r\n            {/* ToolBar */}\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 30px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({ CanInvokeDialogOpen: true, UserRecord: {} })\r\n                  }\r\n               >\r\n                  New Invoice Type\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 10px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Invoice Type\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Invoice Type\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => {\r\n                     LMe.pvtRefresh();\r\n                  }}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n            </Toolbar>\r\n\r\n            {/* Grid */}\r\n            <div\r\n               style={{ margin: '5px 10px 20px 50px', maxWidth: '800px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={[\r\n                     {\r\n                        field: 'NAME',\r\n                        headerName: 'Invoice Type',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 300,\r\n                        flex: 1,\r\n                     },\r\n                     {\r\n                        field: 'SINGULAR_NAME',\r\n                        headerName: 'Singular Type',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 200,\r\n                     },\r\n                     {\r\n                        field: 'INVOICE_NO_STARTS_WITH',\r\n                        headerName: 'Invoice no starts with',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 220,\r\n                     }\r\n                  ]}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  pagination\r\n                  csvOptions={{ allColumns: false }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  //   components={{\r\n                  //      Toolbar: GridToolbar,\r\n                  //   }}\r\n                  onCellDoubleClick={(params) => LMe.pvtEdit(params.row)}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                  // sortModel={LMe.state.SortModel}\r\n                  hideFooter\r\n               />\r\n            </div>\r\n\r\n            {LMe.pvtLoadDlg()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default tsfrmCstFieldsShell;\r\n","import React, { Component } from 'react';\r\n\r\nimport { Box, Toolbar, Button, IconButton, Tooltip } from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\n\r\nimport TUserDialog from './tsdlgUser';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmUserAccount extends Component {\r\n   /**\r\n    * @props: moduleInfo,\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         UserRecord: {},\r\n         IsAlertDialogOpen: false,\r\n      };\r\n\r\n      LMe.FGridRef = React.createRef();\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchUsers();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchUsers();\r\n\r\n      this.setState({\r\n         FetchedData: null,\r\n      });\r\n   }\r\n\r\n   pvtFetchUsers() {\r\n      /**\r\n       * @method pvtLoadListData\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl;\r\n\r\n      LUrl = BaseUrl() + 'users';\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      // No need to check for session\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }//if..\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord._id;\r\n               // });//forEach\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtLoadUserDialog() {\r\n      /**\r\n       * @method pvtNewUser\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === false) {\r\n\r\n         return (<></>);\r\n      }//if..\r\n\r\n      return (\r\n         <TUserDialog\r\n            IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n            UpdateUserStore={(p_objUser) => LMe.UpdateUserStore(p_objUser)}\r\n            UserRecord={LMe.state.UserRecord || {}}\r\n            PAllUsers={LMe.state.FetchedData || []}\r\n         />\r\n      );\r\n   }\r\n\r\n   pvtEditUser(p_objParam) {\r\n      /**\r\n       * @method pvtEditUser\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         UserRecord: LRecord,\r\n      });\r\n   }\r\n\r\n   UpdateUserStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateUserStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.state.FetchedData || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n\r\n            // p_objResponseUser.id = p_objResponseUser._id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser._id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      // Update state.\r\n      LMe.setState({ FetchedData: LArrResponse });\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a User and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditUser(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <div className=\"flex1 tsVBox\">\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n               {/* Admin Setting Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <PeopleSharpIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Admin Title */}\r\n                  <div style={{ fontSize: '20px' }}>\r\n                     {' '}\r\n                     {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                  </div>\r\n\r\n                  {/* Admin Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     {LMe.props.moduleInfo.moduleDescription}\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 30px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({ CanInvokeDialogOpen: true, UserRecord: {} })\r\n                  }\r\n               >\r\n                  New User\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 10px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit User\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => LMe.pvtRefresh()}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n            </Toolbar>\r\n            <div\r\n               style={{ margin: '5px 10px 20px 50px', maxWidth: '1000px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={[\r\n                     {\r\n                        field: 'isActive',\r\n                        headerName: 'Active',\r\n                        headerClassName: 'tsGridHeader',\r\n                        width: 120,\r\n                        renderCell: (params) => (\r\n                           <>{params.value === 1 ? <CheckIcon /> : ''}</>\r\n                        ),\r\n                     },\r\n                     {\r\n                        field: 'displayName',\r\n                        headerName: 'Name',\r\n                        headerClassName: 'tsGridHeader',\r\n                        flex: 1,\r\n                        color: 'primary',\r\n                        sort: 'asc',\r\n                     },\r\n                     // {\r\n                     //    field: 'birthdate',\r\n                     //    headerName: 'Birthday 🎂',\r\n                     //    headerClassName: 'tsGridHeader',\r\n                     //    width: 200,\r\n                     //    valueFormatter: (params) => {\r\n                     //       var LDate = params.value,\r\n                     //          LDispDate = '';\r\n\r\n                     //       if (isEmpty(LDate) === false) {\r\n                     //          LDispDate = tsGetDateFromServerDate(LDate);\r\n                     //       } //if..\r\n\r\n                     //       return LDispDate;\r\n                     //    },\r\n                     // },\r\n                     {\r\n                        field: 'username',\r\n                        headerName: 'Email',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 200,\r\n                     },\r\n                     {\r\n                        field: 'password',\r\n                        headerName: 'Password',\r\n                        headerClassName: 'tsGridHeader',\r\n                        minWidth: 150,\r\n                        hide: true,\r\n                     },\r\n                  ]}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  ref={LMe.FGridRef}\r\n                  // rowHeight={50}\r\n                  pagination\r\n                  // pageSize={10}\r\n                  csvOptions={{ allColumns: true }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  // sortModel={LMe.state.SortModel}\r\n                  // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                  components={{\r\n                     Toolbar: GridToolbar,\r\n                  }}\r\n                  density={'compact'}\r\n                  onCellDoubleClick={(params) => LMe.pvtEditUser(params.row)}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                  hideFooter\r\n               />\r\n            </div>\r\n            {LMe.pvtLoadUserDialog()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsfrmUserAccount;\r\n","import React, { Component } from 'react';\r\n\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, tsGetProjectId, tsGetStates } from '../../tsclsGenUtils';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PermDataSettingIcon from '@material-ui/icons/PermDataSetting';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nclass tsfrmProjectForm extends Component {\r\n    /**\r\n     * @props: moduleInfo,\r\n     * @returns\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SIsEditMode: false,\r\n            SFetchedData: {},\r\n            SIsLoading: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        // var LObj = {\r\n        //     orgName: 'Achal Krushi Kendra',\r\n        //     orgAddress: 'Old Bus stand, Government Hospital Road',\r\n        //     orgCity: 'Anjangaon Surji',\r\n        //     orgPincode: 444705,\r\n\r\n        //     cstName: 'Nandishor Lokhande',\r\n        //     cstMobile: '8275395543, 9921487399',\r\n        //     cstState: 'Maharashtra',\r\n\r\n        //     liscense: 'LASD132465, LAID123456'\r\n        // };\r\n        // LMe.FServerData = {};\r\n\r\n        LMe.pvtFetchProjectDetails();\r\n    }\r\n\r\n    pvtFetchProjectDetails() {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        LMe.setState({ SIsLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n                        LMe.setState({ SIsLoading: false });\r\n                        return;\r\n                    }//if..\r\n\r\n                    // LMe.FServerData = cloneVar(responseJson);\r\n\r\n                    LMe.setState({\r\n                        SFetchedData: responseJson,\r\n                        SIsLoading: false\r\n                    });\r\n                },\r\n                (error) => {\r\n                    LMe.setState({ SIsLoading: false });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtSave() {\r\n        /**\r\n         * @method pvtSave\r\n         * This method will save/update the project details\r\n         */\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl,\r\n            LParamObj = LMe.state.SFetchedData || {};\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        LUrl = BaseUrl() + 'project/' + tsGetProjectId();\r\n\r\n        if (LMe.state.SIsLoading === true) {\r\n            return;\r\n        }\r\n\r\n        LMe.setState({ SIsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        SIsLoading: false,\r\n                        SIsEditMode: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        SIsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetLiscenseDispName(p_strLic) {\r\n\r\n        p_strLic = p_strLic || '';\r\n\r\n        return p_strLic.replaceAll(',', ',');\r\n    }\r\n\r\n    pvtGetHeaderBox() {\r\n\r\n        var LMe = this;\r\n\r\n        // if (LMe.props.POpenedInSignUpWindow === true) {\r\n\r\n        //     return <></>;\r\n        // }\r\n\r\n        return (\r\n            <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n                {/* Admin Setting Icon */}\r\n                <div style={{ margin: '20px 6px 0 0' }}>\r\n                    <PermDataSettingIcon />\r\n                </div>\r\n                <div style={{ margin: '18px 6px 0 0' }}>\r\n                    {/* Admin Title */}\r\n                    <div style={{ fontSize: '20px' }}>\r\n                        {' '}\r\n                        {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                    </div>\r\n\r\n                    {/* Admin Description */}\r\n                    <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                        {LMe.props.moduleInfo.moduleDescription}\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LProjectDetails = LMe.state.SFetchedData || {},\r\n            LIsEditMode = LMe.state.SIsEditMode;\r\n\r\n        return (\r\n            <div className=\"flex1 tsVBox\">\r\n\r\n                {LMe.pvtGetHeaderBox()}\r\n\r\n                <div\r\n                    style={{ margin: '5px 10px 20px 50px', maxWidth: 700 }}\r\n                    className=\"flex1 tsVBox\"\r\n                >\r\n                    <div className=\"tsHBox\">\r\n                        {LIsEditMode === false ?\r\n                            <Button\r\n                                size=\"small\"\r\n                                style={{ margin: '0 0 5px 0' }}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={() => {\r\n\r\n                                    LMe.setState({ SIsEditMode: true });\r\n                                }}\r\n                                startIcon={<EditIcon />}\r\n                            >\r\n                                Edit Details\r\n                            </Button> :\r\n                            <>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    style={{ margin: '0 0 5px 0' }}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disableElevation\r\n                                    onClick={() => {\r\n\r\n                                        LMe.pvtSave();\r\n                                    }}\r\n                                    startIcon={LMe.state.SIsLoading ? '' : <SaveIcon />}\r\n                                >\r\n                                    {LMe.state.SIsLoading ? <><CircularProgress size={20} color=\"inherit\" /> <span style={{ margin: '0 0 0 10px' }}>Loading...</span></>\r\n                                        : 'Save Details'}\r\n\r\n                                </Button>\r\n                                {/* <Button\r\n                                    size=\"small\"\r\n                                    style={{ margin: '0 0 5px 7px' }}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    disableElevation\r\n                                    onClick={() => {\r\n\r\n                                        LMe.setState({\r\n                                            SIsEditMode: false,\r\n                                            SFetchedData: LMe.FServerData\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    Cancel\r\n                                </Button> */}\r\n                            </>\r\n\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"flex1 tsVBox tsOverFlowAuto\">\r\n                        <div className=\"tsHBox tsInvoiceViewBorder\">\r\n                            <span className=\"tsInvoiceViewDispField\"><b>Organisation Details</b></span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">Name</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.orgName\r\n                                    :\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={LProjectDetails.orgName}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.orgName = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">Address</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.orgAddress\r\n                                    :\r\n                                    <textarea\r\n                                        value={LProjectDetails.orgAddress}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.orgAddress = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">City</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.orgCity\r\n                                    :\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={LProjectDetails.orgCity}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.orgCity = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">Pin Code</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.orgPincode\r\n                                    :\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={LProjectDetails.orgPincode}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.orgPincode = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox tsInvoiceViewBorder\">\r\n                            <span className=\"tsInvoiceViewDispField\"><b>Proprietor Details</b></span>\r\n                            {/* <span className=\"tsInvoiceViewValField\"></span> */}\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">Name</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.propName\r\n                                    :\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={LProjectDetails.propName}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.propName = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">Mobile Number</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.propMobileNo\r\n                                    :\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={LProjectDetails.propMobileNo}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.propMobileNo = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\">State</span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LProjectDetails.propState\r\n                                    :\r\n                                    // <input\r\n                                    //     type=\"text\"\r\n                                    //     value={LProjectDetails.propState}\r\n                                    //     onChange={(e) => {\r\n                                    //         LProjectDetails.propState = e.currentTarget.value;\r\n                                    //         LMe.setState({ SFetchedData: LProjectDetails });\r\n                                    //     }}\r\n                                    //     className=\"tsDetailEditorEditField\"\r\n                                    // />\r\n\r\n                                    <Autocomplete\r\n                                        options={tsGetStates()}\r\n                                        getOptionLabel={(option) => {\r\n\r\n                                            return option || '';\r\n                                        }}\r\n                                        clearOnEscape\r\n                                        value={LProjectDetails.propState}\r\n                                        onChange={(e, p_value, p_reason) => {\r\n                                            LProjectDetails.propState = p_value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        // id=\"state\"\r\n                                        renderInput={(params) => {\r\n\r\n                                            return <TextField\r\n                                                {...params}\r\n                                                label={'State'}\r\n                                                margin=\"dense\"\r\n                                            />\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox tsInvoiceViewBorder\">\r\n                            <span className=\"tsInvoiceViewDispField\"><b>Liscense/GST Numbers</b></span>\r\n                            {/* <span className=\"tsInvoiceViewValField\"></span> */}\r\n                        </div>\r\n                        <div className=\"tsHBox\">\r\n                            <span className=\"tsInvoiceViewDispField\"></span>\r\n                            <span className=\"tsInvoiceViewValField flex1\">\r\n                                {LIsEditMode === false ?\r\n                                    LMe.pvtGetLiscenseDispName(LProjectDetails.liscenseNos)\r\n                                    :\r\n                                    <><textarea\r\n                                        value={LProjectDetails.liscenseNos}\r\n                                        onChange={(e) => {\r\n                                            LProjectDetails.liscenseNos = e.currentTarget.value;\r\n                                            LMe.setState({ SFetchedData: LProjectDetails });\r\n                                        }}\r\n                                        className=\"tsDetailEditorEditField\"\r\n                                    />\r\n                                        <span className=\"tsHelpText tsGrayColor\">Comma seperated liscense numbers and GST number will print on seperate line on Invoices.</span>\r\n                                    </>\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"tsHBox tsInvoiceViewBorder\">\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmProjectForm;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box, Button, FormControl,\r\n    // FormLabel,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel\r\n} from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n// import TInvoiceViewer from '../../single/pkgInvoice/tsfrmInvoiceViewer';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PermDataSettingIcon from '@material-ui/icons/PermDataSetting';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TSingleInvoice from '../../single/pkgInvoice/tsfrmSingleInvoice';\r\n\r\nclass tsfrmInvoiceSelection extends Component {\r\n    /**\r\n     * @props: moduleInfo,\r\n     * @returns\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SIsLoading: false,\r\n            STemplate: '',\r\n            SInvoiceNo: 1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtLoadTemplates();\r\n        LMe.pvtFetchProjectDetails();\r\n    }\r\n\r\n    pvtFetchProjectDetails() {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        LMe.setState({ SIsLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n                        LMe.setState({ SIsLoading: false });\r\n                        return;\r\n                    }//if..\r\n\r\n                    // LMe.FServerData = cloneVar(responseJson);\r\n\r\n                    LMe.FTplActionCode = responseJson.defaultInvoice || LMe.FTemplatesArr[0].tplActionCode;\r\n\r\n                    LMe.setState({\r\n                        SIsLoading: false,\r\n                        STemplate: LMe.FTplActionCode\r\n                    });\r\n                },\r\n                (error) => {\r\n                    LMe.setState({ SIsLoading: false });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadTemplates() {\r\n        /**\r\n         * @method pvtLoadTemplates\r\n         * This method will loads the template\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FTemplatesArr = [\r\n            {\r\n                tplTitle: 'GST Theme 1',\r\n                tplActionCode: 'tpl1'\r\n            },\r\n            {\r\n                tplTitle: 'Document Theme',\r\n                tplActionCode: 'tpl2'\r\n            },\r\n            // {\r\n            //     tplTitle: 'GST Theme 3',\r\n            //     tplActionCode: 'tpl3'\r\n            // }\r\n        ];\r\n\r\n    }\r\n\r\n    pvtGetTemplates() {\r\n        /**\r\n         * @method pvtGetTemplates\r\n         * This method will returns the templates\r\n         */\r\n        var LMe = this,\r\n            LArrUITpl = [];\r\n\r\n        LMe.FTemplatesArr = LMe.FTemplatesArr || [];\r\n\r\n        LMe.FTemplatesArr.forEach(function (p_objRecord) {\r\n\r\n            LArrUITpl.push(\r\n                <FormControlLabel value={p_objRecord.tplActionCode} control={<Radio color=\"primary\" />} label={p_objRecord.tplTitle} />\r\n            );\r\n        });\r\n\r\n        return <>{LArrUITpl}</>;\r\n    }\r\n\r\n    pvtSave() {\r\n        /**\r\n         * @method pvtSave\r\n         * This method will save/update the project details\r\n         */\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl,\r\n            LParamObj = {\r\n                defaultInvoice: LMe.state.STemplate\r\n            };\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        LUrl = BaseUrl() + 'project/invoice/' + tsGetProjectId();\r\n\r\n        if (LMe.state.SIsLoading === true) {\r\n            return;\r\n        }\r\n\r\n        LMe.setState({ SIsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n                        LMe.setState({\r\n                            SIsLoading: false,\r\n                        });\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n                    LMe.FTplActionCode = responseJson.defaultInvoice || LMe.state.STemplate;\r\n                    LMe.setState({\r\n                        SIsLoading: false,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        SIsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetInvoice() {\r\n        var LMe = this;\r\n\r\n        return <TSingleInvoice\r\n            PInvoiceNoAndType={{\r\n                invoiceNo: LMe.state.SInvoiceNo,\r\n                invoiceType: GenConstants().PESTICIDE_ACT_CODE\r\n            }}\r\n            PTplActionCode={LMe.state.STemplate}\r\n            PIsShowingInApp={true}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div className=\"flex1 tsVBox tsOverFlowAuto\">\r\n                <Box component=\"div\" display=\"flex\" px={4} pb={2}>\r\n                    {/* Admin Setting Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <PermDataSettingIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Admin Title */}\r\n                        <div style={{ fontSize: '20px' }}>\r\n                            {' '}\r\n                            {LMe.props.moduleInfo.moduleTitle}{' '}\r\n                        </div>\r\n\r\n                        {/* Admin Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            {LMe.props.moduleInfo.moduleDescription}\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <div\r\n                    style={{ margin: '5px 0px 20px 50px' }}\r\n                    className=\"flex1 tsHBox tsOverFlowAuto\"\r\n                >\r\n\r\n                    <div className=\"tsVBox\" style={{ margin: '0 10px 0 0' }}>\r\n\r\n                        {/* <div style={{ fontSize: '13px' }}>\r\n                            Invoice No: <input type=\"number\" onChange={(e) => {\r\n\r\n                                LMe.setState({ SInvoiceNo: parseInt(e.currentTarget.value) })\r\n                            }}\r\n                                placeholder=\"Enter Invoice No\" value={LMe.state.SInvoiceNo} />\r\n                        </div> */}\r\n\r\n                        {LMe.FTplActionCode === LMe.state.STemplate ? <></> :\r\n                            <div><Button\r\n                                size=\"small\"\r\n                                style={{ margin: '0 0 20px 0' }}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disableElevation\r\n                                onClick={() => {\r\n\r\n                                    LMe.pvtSave();\r\n                                }}\r\n                                startIcon={LMe.state.SIsLoading ? '' : <SaveIcon />}\r\n                            >\r\n                                {LMe.state.SIsLoading ? <><CircularProgress size={20} color=\"inherit\" /> <span style={{ margin: '0 0 0 10px' }}>Loading...</span></>\r\n                                    : 'Save Details'}\r\n                            </Button></div>\r\n                        }\r\n\r\n                        <FormControl component=\"fieldset\" style={{ margin: '0 0 0 0' }}>\r\n                            {/* <FormLabel component=\"legend\">Choose Invoice Template</FormLabel> */}\r\n\r\n                            <RadioGroup style={{ margin: '5px 0 0 0' }} value={LMe.state.STemplate} onChange={(event) => LMe.setState({ STemplate: event.target.value })}>\r\n                                {LMe.pvtGetTemplates()}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </div>\r\n\r\n                    <div className=\"flex1 tsVBox\" style={{ margin: '-0 0 0 0' }}>\r\n                        <span style={{ fontWeight: 'bold', textAlign: 'right' }}>Theme Preview</span>\r\n                        <div className=\"flex1 tsVBox tsOverFlowAuto\" style={{\r\n                            border: '1px solid #aaa'\r\n                        }}>\r\n                            {/* {isEmpty(LMe.FDummyInvoice) === true ? <></> :\r\n                            <TInvoiceViewer\r\n                                PSelectedRecord={LMe.FDummyInvoice}\r\n                            />\r\n                        } */}\r\n                            {LMe.pvtGetInvoice()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceSelection;\r\n","import React, { Component } from 'react';\r\nimport { GenConstants } from '../../../tsclsGenConstants';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode, tsConvertNumInToWords,\r\n    isEmpty, tsGetInvoiceDispNoByInvoiceNo, tsGetDateFromServerDateForPrintField, tsGetGstAmount, tsGetIGSTAmount\r\n} from '../../../tsclsGenUtils';\r\nimport TProductSelectionCntr from '../tsfrmProductSelectionCntr';\r\nimport './tpl.css';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        var LMe = this,\r\n            LCstData = LMe.props.PInvoice.customerData || {};\r\n\r\n        if (isEmpty(LCstData) === false && isEmpty(LCstData.cstFieldValues) === false && LMe.props.PIsShowingInApp === false) {\r\n\r\n            document.title = LCstData.cstFieldValues.cstName;\r\n        }\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">Customer Name: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstName}</td>\r\n            </tr>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <tr className=\"\">\r\n                    <td className=\"tsTdProperty\">Balance: </td>\r\n                    <td className=\"tsTdVal\">{L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n                </tr>\r\n            }</>,\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">GST No: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstGSTNo}</td>\r\n            </tr>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <tr className=\"\">\r\n                    <td className=\"tsTdProperty\">{p_objRecord.fieldName}: </td>\r\n                    <td className=\"tsTdVal\">{p_objCstValues[p_objRecord.columnName]}</td>\r\n                </tr>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return <table className=\"tsTbl\">{LArrColumn}</table>;\r\n    }\r\n\r\n    pvtGetLicencesUI(p_liscenseNos) {\r\n\r\n        p_liscenseNos = p_liscenseNos || '';\r\n\r\n        var LUI = [];\r\n        p_liscenseNos = p_liscenseNos.split(',');\r\n        p_liscenseNos.forEach(function (p_licNo) {\r\n\r\n            LUI.push(<span style={{ fontSize: 13 }}>{p_licNo}</span>);\r\n        });\r\n\r\n        return LUI;\r\n    }\r\n\r\n    pvtGetGSTContainer(p_arrProducts, p_intGrandTotal, p_strPropertyText) {\r\n\r\n        var LGstAmount;\r\n\r\n        if (p_strPropertyText === GenConstants().IGST) {\r\n            LGstAmount = tsGetIGSTAmount(p_arrProducts, p_intGrandTotal);\r\n        }\r\n        else {\r\n            LGstAmount = tsGetGstAmount(p_arrProducts, p_intGrandTotal);\r\n        }\r\n\r\n        if (LGstAmount < 1) {\r\n            return null;\r\n        }\r\n\r\n        return <tr>\r\n            <td className=\"tsTdProperty\">{p_strPropertyText}: </td>\r\n            <td className=\"tsTdVal\">Rs. {LGstAmount}</td>\r\n        </tr>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {};\r\n\r\n        return (\r\n            <div className=\"tsRootPg\">\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 5px 0'\r\n                }}>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold', }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox flex1\" style={{\r\n                    borderTop: '1px solid #aaa'\r\n                }}>\r\n                    <div className=\"tsHBox\">\r\n                        <div className=\"tsVBox flex1\">\r\n                            <div>{LMe.pvtGetCustomerFields(LObjInvoice.customerData)}</div>\r\n                        </div>\r\n\r\n                        <div style={{ textAlign: 'center', margin: '15px 0 0 0', fontWeight: 'bold' }}>Tax Invoice</div>\r\n\r\n                        <div className=\"tsHBox flex1\" >\r\n                            <div className=\"flex1\"></div>\r\n                            <div>\r\n                                <table className=\"tsTbl\">\r\n                                    <tr>\r\n                                        {isEmpty(LObjInvoice.invoiceType) === false ? <><td className=\"tsTdProperty\">Invoice Type: </td>\r\n                                            <td className=\"tsTdVal\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</td></> : <></>}\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Number: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType)}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Date: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetDateFromServerDateForPrintField(LObjInvoice.invoiceDate)}</td>\r\n                                    </tr>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        borderTop: '1px solid #aaa',\r\n                        borderBottom: '1px solid #aaa'\r\n                    }}>\r\n                        <TProductSelectionCntr\r\n                            PInvoiceType={LObjInvoice.invoiceType}\r\n                            SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                            }}\r\n\r\n                            SetProducts={(p_arrProducts) => {\r\n\r\n                                LMe.setState({ SProducts: p_arrProducts || [] })\r\n                            }}\r\n\r\n                            //This will load the products according to product arrays\r\n                            PProductsArr={LObjInvoice.products}\r\n\r\n                            //Set ReadOnlyMode\r\n                            PIsReadOnlyMode={true}\r\n                            PIsPrintMode={true}\r\n                        />\r\n                    </div>\r\n                    {/* Footer */}\r\n                    <div className=\"tsHBox\" style={{ borderBottom: '0.5px solid #aaa' }}>\r\n\r\n                        <div className=\"flex1\" >\r\n                            <table className=\"tsTbl\" style={{}}>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Payment Mode: </td>\r\n                                    <td className=\"tsTdVal\">{LObjInvoice.mode}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Credited Amount: </td>\r\n                                    <td className=\"tsTdVal\">Rs. {LObjInvoice.creditedAmount}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Invoice Amount In Word: </td>\r\n                                    <td className=\"tsTdVal\" style={{ fontSize: 12 }}>{tsConvertNumInToWords(LObjInvoice.grandTotal)}</td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                        <div style={{ borderLeft: '0.5px solid #aaa' }}>\r\n                            <table className=\"tsTbl\" style={{}}>\r\n                                {LMe.pvtGetGSTContainer(LMe.state.SProducts, LObjInvoice.grandTotal, GenConstants().CGST)}\r\n                                {LMe.pvtGetGSTContainer(LMe.state.SProducts, LObjInvoice.grandTotal, GenConstants().SGST)}\r\n                                {LMe.pvtGetGSTContainer(LMe.state.SProducts, LObjInvoice.grandTotal, GenConstants().IGST)}\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Total Inovice Amount: </td>\r\n                                    <td className=\"tsTdVal\">Rs. <b>{LObjInvoice.grandTotal}</b></td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsHBox\" style={{\r\n                    borderBottom: '1px solid #aaa',\r\n                    fontSize: 12,\r\n                    paddingTop: 15\r\n                }}>\r\n                    <div className=\"flex1\" style={{ textAlign: 'left', marginLeft: 10 }}>Authorised Signature</div>\r\n                    <div className=\"flex1\" style={{ textAlign: 'right', marginRight: 10 }}>Customer's Signature</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","import React, { Component } from 'react';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport { tsGetInvoiceDispNameByActionCode, isEmpty, tsGetInvoiceDispNoByInvoiceNo, tsGetDateFromServerDateForPrintField, tsGetGstAmount, tsGetIGSTAmount } from '../../../tsclsGenUtils';\r\nimport TProductSelectionCntr from '../tsfrmProductSelectionCntr';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: []\r\n        };\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                <span className=\"tsInvoiceViewDispField\">Customer Name</span>\r\n                <span className=\"tsInvoiceViewValField\">{p_objCstValues.cstName}</span>\r\n            </div>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">Balance</span>\r\n                    <span className=\"tsInvoiceViewValField\">{L_funGetBalance(p_objCstValues.cstBalance)}</span>\r\n                </div>\r\n            }</>,\r\n            <div className=\"tsHBoxForPrint\" key=\"tskey33a\">\r\n                <span className=\"tsInvoiceViewDispField\" key=\"tskey11\">GST No</span>\r\n                <span className=\"tsInvoiceViewValField\" key=\"tskey12\">{p_objCstValues.cstGSTNo}</span>\r\n            </div>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">{p_objRecord.fieldName}</span>\r\n                    <span className=\"tsInvoiceViewValField\">{p_objCstValues[p_objRecord.columnName]}</span>\r\n                </div>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtGetLicencesUI(p_liscenseNos) {\r\n\r\n        p_liscenseNos = p_liscenseNos || '';\r\n\r\n        var LUI = [];\r\n        p_liscenseNos = p_liscenseNos.split(',');\r\n        p_liscenseNos.forEach(function (p_licNo) {\r\n\r\n            LUI.push(<span style={{ fontSize: 13 }}>{p_licNo}</span>);\r\n        });\r\n\r\n        return LUI;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {};\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 0 0'\r\n                }}>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold' }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox\">\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        {isEmpty(LObjInvoice.invoiceType) === false ? <><span className=\"tsInvoiceViewDispField\">Invoice Type</span>\r\n                            <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</span></> : <></>}\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Number</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType)}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Date</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetDateFromServerDateForPrintField(LObjInvoice.invoiceDate)}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    {LMe.pvtGetCustomerFields(LObjInvoice.customerData)}\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Payment Mode</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.mode}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Credited Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.creditedAmount}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Remark</span>\r\n                        <span className=\"tsInvoiceViewValField\"> {LObjInvoice.remark}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Products</span>\r\n                        <span className=\"tsInvoiceViewValField flex1\" style={{ width: 540 }}>\r\n                            {/* {JSON.stringify(LObjInvoice.products)} */}\r\n                            <TProductSelectionCntr\r\n                                PInvoiceType={LObjInvoice.invoiceType}\r\n                                SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                                }}\r\n\r\n                                SetProducts={(p_arrProducts) => {\r\n\r\n                                    LMe.setState({ SProducts: p_arrProducts || [] })\r\n                                }}\r\n\r\n                                //This will load the products according to product arrays\r\n                                PProductsArr={LObjInvoice.products}\r\n\r\n                                //Set ReadOnlyMode\r\n                                PIsReadOnlyMode={true}\r\n                                PIsPrintMode={true}\r\n                            />\r\n\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">SGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">CGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">IGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetIGSTAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Total Inovice Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.grandTotal}</span>\r\n                    </div>\r\n                    <div className=\"tsInvoiceViewBorder\"></div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode,\r\n    isEmpty, tsGetInvoiceDispNoByInvoiceNo, tsGetDateFromServerDateForPrintField\r\n} from '../../../tsclsGenUtils';\r\n\r\nimport './tpl.css';\r\n\r\nclass tpl1 extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        var LMe = this,\r\n            LCstData = LMe.props.PInvoice.customerData || {};\r\n\r\n        if (isEmpty(LCstData) === false && isEmpty(LCstData.cstFieldValues) === false) {\r\n\r\n            document.title = LCstData.cstFieldValues.cstName;\r\n        }\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {};\r\n        // L_funGetBalance = function (p_value) {\r\n        //     var LValue = p_value;\r\n\r\n        //     if (LValue > 0) {\r\n\r\n        //         return LValue + ' Cr';\r\n        //     }\r\n        //     else if (LValue < 0) {\r\n\r\n        //         return Math.abs(LValue) + ' Dr';\r\n        //     }\r\n\r\n        //     return LValue;\r\n        // };\r\n\r\n        LArrColumn = [\r\n            <tr key=\"statementCstName\" className=\"\">\r\n                <td className=\"tsTdProperty\">Customer Name: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstName}</td>\r\n            </tr>,\r\n\r\n            // <tr className=\"\">\r\n            //     <td className=\"tsTdProperty\">Balance: </td>\r\n            //     <td className=\"tsTdVal\">{p_objCstValues.cstBalance === 0 ? <i>Nil</i> : L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n            // </tr>\r\n            // <>{\r\n            //     p_objCstValues.cstBalance === 0 ? <></> : <tr className=\"\">\r\n            //         <td className=\"tsTdProperty\">Balance: </td>\r\n            //         <td className=\"tsTdVal\">{L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n            //     </tr>\r\n            // }</>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <tr key={'statementField' + p_intIndex} className=\"\">\r\n                    <td className=\"tsTdProperty\">{p_objRecord.fieldName}: </td>\r\n                    <td className=\"tsTdVal\">{p_objCstValues[p_objRecord.columnName]}</td>\r\n                </tr>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return <table className=\"tsTbl\"><tbody>{LArrColumn}</tbody></table>;\r\n    }\r\n\r\n    pvtGetTableRows(p_arrPaymentRecords) {\r\n\r\n        var LArrRows = [];\r\n\r\n        p_arrPaymentRecords = p_arrPaymentRecords || [];\r\n\r\n        p_arrPaymentRecords.forEach(function (p_objRecord) {\r\n\r\n\r\n            LArrRows.push(\r\n                <tr>\r\n                    <td>\r\n                        {tsGetDateFromServerDateForPrintField(p_objRecord.paymentDate)}\r\n                    </td>\r\n                    <td>\r\n                        {tsGetInvoiceDispNameByActionCode(p_objRecord.invoiceType)}\r\n                    </td>\r\n                    <td>\r\n                        {tsGetInvoiceDispNoByInvoiceNo(p_objRecord.invoiceNo || p_objRecord.id, p_objRecord.invoiceType, p_objRecord.isPurchaserInvoice)}\r\n                    </td>\r\n                    <td>\r\n                        {p_objRecord.mode}\r\n                    </td>\r\n                    <td>\r\n                        Rs. {p_objRecord.total}\r\n                    </td>\r\n                    <td>\r\n                        Rs. {p_objRecord.credit}\r\n                    </td>\r\n                    <td>\r\n                        Rs. {p_objRecord.debit}\r\n                    </td>\r\n                    <td>\r\n                        {p_objRecord.balance}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return LArrRows;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {};\r\n\r\n        return (\r\n            <div className=\"tsRootPg\" style={{\r\n                margin: '10px 0 10px 0'\r\n            }}>\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 5px 0'\r\n                }}>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {/* {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)} */}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold', }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox flex1\" style={{\r\n                    borderTop: '0.5px solid #aaa',\r\n                    // borderBottom: '0.5px solid #aaa',\r\n                }}>\r\n                    <div className=\"tsHBox\">\r\n                        <div className=\"tsVBox flex1\">\r\n                            <div>{LMe.pvtGetCustomerFields(LObjInvoice.customerData)}</div>\r\n                        </div>\r\n\r\n                        <div className=\"flex1\" style={{ textAlign: 'center', margin: '15px 0 0 0', fontWeight: 'bold' }}>\r\n                            Statement\r\n                        </div>\r\n\r\n                        <div className=\"tsHBox flex1\">\r\n                            <div className=\"flex1\"></div>\r\n                            <div><table className=\"tsTbl\">\r\n                                <tbody>\r\n                                    <tr key=\"statementFromdate\">\r\n                                        <td className=\"tsTdProperty\">From Date: </td>\r\n                                        <td className=\"tsTdVal\">{LMe.props.PReqParam && LMe.props.PReqParam.fromDate}</td>\r\n                                    </tr>\r\n                                    <tr key=\"statementTodate\">\r\n                                        <td className=\"tsTdProperty\">To Date: </td>\r\n                                        <td className=\"tsTdVal\">{LMe.props.PReqParam && LMe.props.PReqParam.toDate}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <table className=\"tsStatementTbl\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Invocie Type</th>\r\n                                <th>Invocie No</th>\r\n                                <th>Pay Mode</th>\r\n                                <th>Total</th>\r\n                                <th>Credit</th>\r\n                                <th>Debit</th>\r\n                                <th>Balance</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {LMe.pvtGetTableRows(LObjInvoice.paymentRecords)}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tpl1;","import React, { Component } from 'react';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode, tsConvertNumInToWords,\r\n    isEmpty,\r\n    // tsGetInvoiceDispNoByInvoiceNo,\r\n    tsGetDateFromServerDateForPrintField, tsGetGstAmount\r\n} from '../../../tsclsGenUtils';\r\nimport TProductSelectionCntr from '../tsfrmProductSelectionCntr';\r\nimport './tpl.css';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        var LMe = this,\r\n            LCstData = LMe.props.PInvoice.customerData || {};\r\n\r\n        if (isEmpty(LCstData) === false && isEmpty(LCstData.cstFieldValues) === false) {\r\n\r\n            document.title = LCstData.cstFieldValues.cstName;\r\n        }\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">Supplier's Name: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstName}</td>\r\n            </tr>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <tr className=\"\">\r\n                    <td className=\"tsTdProperty\">Balance: </td>\r\n                    <td className=\"tsTdVal\">{L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n                </tr>\r\n            }</>,\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">GST No: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstGSTNo}</td>\r\n            </tr>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <tr className=\"\">\r\n                    <td className=\"tsTdProperty\">{p_objRecord.fieldName}: </td>\r\n                    <td className=\"tsTdVal\">{p_objCstValues[p_objRecord.columnName]}</td>\r\n                </tr>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return <table className=\"tsTbl\">{LArrColumn}</table>;\r\n    }\r\n\r\n    pvtGetLicencesUI(p_liscenseNos) {\r\n\r\n        p_liscenseNos = p_liscenseNos || '';\r\n\r\n        var LUI = [];\r\n        p_liscenseNos = p_liscenseNos.split(',');\r\n        p_liscenseNos.forEach(function (p_licNo) {\r\n\r\n            LUI.push(<span style={{ fontSize: 13 }}>{p_licNo}</span>);\r\n        });\r\n\r\n        return LUI;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {};\r\n\r\n        return (\r\n            <div className=\"tsRootPg\">\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 5px 0'\r\n                }}>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold', }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox flex1\" style={{\r\n                    borderTop: '1px solid #aaa'\r\n                }}>\r\n                    <div className=\"tsHBox\">\r\n                        <div className=\"tsVBox flex1\">\r\n                            <div>{LMe.pvtGetCustomerFields(LObjInvoice.customerData)}</div>\r\n                        </div>\r\n\r\n                        <div style={{ textAlign: 'center', margin: '15px 0 0 0', fontWeight: 'bold' }}>Supplier's Invoice</div>\r\n\r\n                        <div className=\"tsHBox flex1\" >\r\n                            <div className=\"flex1\"></div>\r\n                            <div>\r\n                                <table className=\"tsTbl\">\r\n                                    <tr>\r\n                                        {isEmpty(LObjInvoice.invoiceType) === false ? <><td className=\"tsTdProperty\">Invoice Type: </td>\r\n                                            <td className=\"tsTdVal\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</td></> : <></>}\r\n                                    </tr>\r\n                                    {/* <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Number: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType, 1)}</td>\r\n                                    </tr> */}\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Supplier's Invoice Number: </td>\r\n                                        <td className=\"tsTdVal\">{LObjInvoice.strInvoiceNo}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Date: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetDateFromServerDateForPrintField(LObjInvoice.invoiceDate)}</td>\r\n                                    </tr>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        borderTop: '1px solid #aaa',\r\n                        borderBottom: '1px solid #aaa'\r\n                    }}>\r\n                        <TProductSelectionCntr\r\n                            PInvoiceType={LObjInvoice.invoiceType}\r\n                            SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                            }}\r\n\r\n                            SetProducts={(p_arrProducts) => {\r\n\r\n                                LMe.setState({ SProducts: p_arrProducts || [] })\r\n                            }}\r\n\r\n                            //This will load the products according to product arrays\r\n                            PProductsArr={LObjInvoice.products}\r\n\r\n                            //Set ReadOnlyMode\r\n                            PIsReadOnlyMode={true}\r\n                        />\r\n                    </div>\r\n                    {/* Footer */}\r\n                    <div className=\"tsHBox\" style={{ borderBottom: '0.5px solid #aaa' }}>\r\n\r\n                        <div className=\"flex1\" >\r\n                            <table className=\"tsTbl\" style={{}}>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Payment Mode: </td>\r\n                                    <td className=\"tsTdVal\">{LObjInvoice.mode}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Credited Amount: </td>\r\n                                    <td className=\"tsTdVal\">Rs. {LObjInvoice.creditedAmount}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Invoice Amount In Word: </td>\r\n                                    <td className=\"tsTdVal\" style={{ fontSize: 12 }}>{tsConvertNumInToWords(LObjInvoice.grandTotal)}</td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                        <div style={{ borderLeft: '0.5px solid #aaa' }}>\r\n                            <table className=\"tsTbl\" style={{}}>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">CGST: </td>\r\n                                    <td className=\"tsTdVal\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">SGST: </td>\r\n                                    <td className=\"tsTdVal\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"tsTdProperty\">Total Inovice Amount: </td>\r\n                                    <td className=\"tsTdVal\">Rs. <b>{LObjInvoice.grandTotal}</b></td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsHBox\" style={{\r\n                    borderBottom: '1px solid #aaa',\r\n                    fontSize: 12,\r\n                    paddingTop: 15\r\n                }}>\r\n                    <div className=\"flex1\" style={{ textAlign: 'left', marginLeft: 10 }}>Authorised Signature</div>\r\n                    <div className=\"flex1\" style={{ textAlign: 'right', marginRight: 10 }}>Supplier's Signature</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","import React, { Component } from 'react';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport { tsGetInvoiceDispNameByActionCode, isEmpty, tsGetDateFromServerDateForPrintField, tsGetGstAmount } from '../../../tsclsGenUtils';\r\nimport TProductSelectionCntr from '../tsfrmProductSelectionCntr';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: []\r\n        };\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                <span className=\"tsInvoiceViewDispField\">Supplier's Name</span>\r\n                <span className=\"tsInvoiceViewValField\">{p_objCstValues.cstName}</span>\r\n            </div>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">Balance</span>\r\n                    <span className=\"tsInvoiceViewValField\">{L_funGetBalance(p_objCstValues.cstBalance)}</span>\r\n                </div>\r\n            }</>,\r\n            <div className=\"tsHBoxForPrint\">\r\n                <span className=\"tsInvoiceViewDispField\">GST No</span>\r\n                <span className=\"tsInvoiceViewValField\">{p_objCstValues.cstGSTNo}</span>\r\n            </div>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">{p_objRecord.fieldName}</span>\r\n                    <span className=\"tsInvoiceViewValField\">{p_objCstValues[p_objRecord.columnName]}</span>\r\n                </div>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtGetLicencesUI(p_liscenseNos) {\r\n\r\n        p_liscenseNos = p_liscenseNos || '';\r\n\r\n        var LUI = [];\r\n        p_liscenseNos = p_liscenseNos.split(',');\r\n        p_liscenseNos.forEach(function (p_licNo) {\r\n\r\n            LUI.push(<span style={{ fontSize: 13 }}>{p_licNo}</span>);\r\n        });\r\n\r\n        return LUI;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {};\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 0 0'\r\n                }}>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold' }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox\">\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        {isEmpty(LObjInvoice.invoiceType) === false ? <><span className=\"tsInvoiceViewDispField\">Invoice Type</span>\r\n                            <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</span></> : <></>}\r\n                    </div>\r\n                    {/* <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Number</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType, 1)}</span>\r\n                    </div> */}\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Supplier's Invoice Number</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.strInvoiceNo}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Date</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetDateFromServerDateForPrintField(LObjInvoice.invoiceDate)}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    {LMe.pvtGetCustomerFields(LObjInvoice.customerData)}\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Payment Mode</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.mode}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Credited Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.creditedAmount}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Remark</span>\r\n                        <span className=\"tsInvoiceViewValField\"> {LObjInvoice.remark}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Products</span>\r\n                        <span className=\"tsInvoiceViewValField flex1\" style={{ width: 540 }}>\r\n                            {/* {JSON.stringify(LObjInvoice.products)} */}\r\n                            <TProductSelectionCntr\r\n                                PInvoiceType={LObjInvoice.invoiceType}\r\n                                SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                                }}\r\n\r\n                                SetProducts={(p_arrProducts) => {\r\n\r\n                                    LMe.setState({ SProducts: p_arrProducts || [] })\r\n                                }}\r\n\r\n                                //This will load the products according to product arrays\r\n                                PProductsArr={LObjInvoice.products}\r\n\r\n                                //Set ReadOnlyMode\r\n                                PIsReadOnlyMode={true}\r\n                            />\r\n\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">SGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">CGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Total Inovice Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.grandTotal}</span>\r\n                    </div>\r\n                    <div className=\"tsInvoiceViewBorder\"></div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode, tsConvertNumInToWords,\r\n    isEmpty, tsGetInvoiceDispNoByInvoiceNo, tsGetDateFromServerDateForPrintField, tsIsInvoiceByType\r\n} from '../../../tsclsGenUtils';\r\n\r\nimport './tpl.css';\r\n\r\nclass tpl1 extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        var LMe = this,\r\n            LCstData = LMe.props.PInvoice.customerData || {};\r\n\r\n        if (isEmpty(LCstData) === false && isEmpty(LCstData.cstFieldValues) === false) {\r\n\r\n            document.title = LCstData.cstFieldValues.cstName;\r\n        }\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">Customer Name: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstName}</td>\r\n            </tr>,\r\n            // Here we always show balance\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">Balance: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstBalance === 0 ? <i>Nil</i> : L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n            </tr>,\r\n            <tr className=\"\">\r\n                <td className=\"tsTdProperty\">GST No: </td>\r\n                <td className=\"tsTdVal\">{p_objCstValues.cstGSTNo}</td>\r\n            </tr>,\r\n            // <>{\r\n            //     p_objCstValues.cstBalance === 0 ? <></> : <tr className=\"\">\r\n            //         <td className=\"tsTdProperty\">Balance: </td>\r\n            //         <td className=\"tsTdVal\">{L_funGetBalance(p_objCstValues.cstBalance)}</td>\r\n            //     </tr>\r\n            // }</>\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <tr className=\"\">\r\n                    <td className=\"tsTdProperty\">{p_objRecord.fieldName}: </td>\r\n                    <td className=\"tsTdVal\">{p_objCstValues[p_objRecord.columnName]}</td>\r\n                </tr>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return <table className=\"tsTbl\">{LArrColumn}</table>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PInvoice || {},\r\n            LObjPrjData = LMe.props.PProjectData || {},\r\n            LIsCreditMode = LObjInvoice.paymentRecord.debit === 0;\r\n\r\n        return (\r\n            <div className=\"tsRootPg\" style={{\r\n                margin: '10px 0 0 0'\r\n            }}>\r\n                <div className=\"tsHBox\" style={{\r\n                    padding: '10px 0 5px 0'\r\n                }}>\r\n\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'start',\r\n                        padding: '0 0 0 10px',\r\n                    }}>\r\n                        {/* {LMe.pvtGetLicencesUI(LObjPrjData.liscenseNos)} */}\r\n                    </div>\r\n                    <span className=\"tsVBox\" style={{ textAlign: 'center' }}>\r\n                        <span style={{ fontSize: 20, fontWeight: 'bold', }}>{LObjPrjData.orgName}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.propName}</span>\r\n                        <span style={{ fontSize: 13 }}> {LObjPrjData.propMobileNo}</span>\r\n                    </span>\r\n                    <div className=\"tsVBox flex1\" style={{\r\n                        textAlign: 'end',\r\n                        margin: '0 10px 0 0'\r\n                    }}>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgAddress}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgCity}</span>\r\n                        <span style={{ fontSize: 13 }}>{LObjPrjData.orgPincode}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tsVBox flex1\" style={{\r\n                    borderTop: '1px solid #aaa'\r\n                }}>\r\n                    <div className=\"tsHBox\">\r\n                        <div className=\"tsVBox flex1\">\r\n                            <div>{LMe.pvtGetCustomerFields(LObjInvoice.customerData)}</div>\r\n                        </div>\r\n\r\n                        <div style={{ textAlign: 'center', margin: '15px 0 0 0', fontWeight: 'bold' }}>\r\n                            {LIsCreditMode ? 'Credit Note' : 'Debit Note'}\r\n                        </div>\r\n\r\n                        <div className=\"tsHBox flex1\" >\r\n                            <div className=\"flex1\"></div>\r\n                            <div>\r\n                                <table className=\"tsTbl\">\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Payment Receipt No: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.paymentRecord.id, LObjInvoice.paymentRecord.invoiceType, null)}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        {isEmpty(LObjInvoice.paymentRecord.invoiceType) === false ? <><td className=\"tsTdProperty\">Invoice Type: </td>\r\n                                            <td className=\"tsTdVal\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.paymentRecord.invoiceType)}</td></> : <></>}\r\n                                    </tr>\r\n                                    {tsIsInvoiceByType(LObjInvoice.paymentRecord.invoiceType) ? <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Number: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.paymentRecord.invoiceNo, LObjInvoice.paymentRecord.invoiceType, LObjInvoice.paymentRecord.isPurchaserInvoice)}</td>\r\n                                    </tr> : <></>}\r\n                                    <tr>\r\n                                        <td className=\"tsTdProperty\">Invoice Date: </td>\r\n                                        <td className=\"tsTdVal\">{tsGetDateFromServerDateForPrintField(LObjInvoice.paymentRecord.paymentDate)}</td>\r\n                                    </tr>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"tsHBox\" style={{ padding: '20px', borderBottom: '0.5px solid #aaa', borderTop: '0.5px solid #aaa' }}>\r\n\r\n                        <div className=\"flex1\" >\r\n                        </div>\r\n                        <table className=\"tsTbl\">\r\n                            <tr>\r\n                                <td className=\"tsTdProperty\">Payment Mode: </td>\r\n                                <td className=\"tsTdVal\">{LObjInvoice.paymentRecord.mode}</td>\r\n                            </tr>\r\n                            {tsIsInvoiceByType(LObjInvoice.paymentRecord.invoiceType) ? <tr>\r\n                                <td className=\"tsTdProperty\">Invoice Total: </td>\r\n                                <td className=\"tsTdVal\">Rs.{LObjInvoice.paymentRecord.total}</td>\r\n                            </tr> : <></>}\r\n                            <tr>\r\n                                <td className=\"tsTdProperty\" style={{\r\n                                    fontWeight: 'bold'\r\n                                }}>{LIsCreditMode ? 'Credited Amount' : 'Debited Amount'}: </td>\r\n                                <td className=\"tsTdVal\" style={{\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: 15\r\n                                }}>Rs.{LIsCreditMode ? LObjInvoice.paymentRecord.credit : LObjInvoice.paymentRecord.debit}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"tsTdProperty\">In words:</td>\r\n                                <td className=\"tsTdVal\">\r\n                                    {tsConvertNumInToWords(LIsCreditMode ? LObjInvoice.paymentRecord.credit : LObjInvoice.paymentRecord.debit)}\r\n                                </td>\r\n                            </tr>\r\n                            {\r\n                                isEmpty(LObjInvoice.paymentRecord.remark) === false ? <tr>\r\n                                    <td className=\"tsTdProperty\">Remark:</td>\r\n                                    <td className=\"tsTdVal\">\r\n                                        {LObjInvoice.paymentRecord.remark}\r\n                                    </td> </tr> : <></>\r\n                            }\r\n                        </table>\r\n                        <div className=\"flex1\" >\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Footer */}\r\n                <div className=\"tsHBox\" style={{\r\n                    borderBottom: '1px solid #aaa',\r\n                    fontSize: 12,\r\n                    paddingTop: 30\r\n                }}>\r\n                    <div className=\"flex1\" style={{ textAlign: 'left', marginLeft: 10 }}>Authorised Signature</div>\r\n                    <div className=\"flex1\" style={{ textAlign: 'right', marginRight: 10 }}>Customer's Signature</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tpl1;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport HomePage from './tsclsHome';\r\nimport LoginPg from './tsfrmLogin';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"./theme\";\r\nimport TSingleInvoice from './single/pkgInvoice/tsfrmSingleInvoice';\r\nimport TPaymentInvoice from './single/pkgPayments/tsfrmPaymentInvoice';\r\nimport TStatement from './single/pkgManageCustomers/tsclsStatement';\r\nimport TSupplierSingleInvoice from './single/pkgSupplier/tsfrmSingleInvoice';\r\nimport { BaseUrl, tsSetInvoiceType, tsGetProjectId } from './tsclsGenUtils.js';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var LMe = this;\r\n\r\n    LMe.state = {\r\n      SIsLoading: true\r\n    };\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    var LMe = this;\r\n\r\n    LMe.pvtFetchInvoiceTypes();\r\n  }\r\n\r\n  pvtFetchInvoiceTypes() {\r\n    /**\r\n     * @method pvtFetchInvoiceTypes\r\n     * This function will fetch the invoice types\r\n     * and sets in genutils cache\r\n     */\r\n    var LMe = this,\r\n      LRequestOptions,\r\n      LUrl;\r\n    \r\n\r\n    LUrl = BaseUrl() + 'invoicetypes';\r\n\r\n    LRequestOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'projectid': tsGetProjectId()\r\n      }\r\n    };\r\n\r\n    // No need to check for session\r\n    fetch(LUrl, LRequestOptions)\r\n      .then((response) => response.json())\r\n      .then(\r\n        (responseJson) => {\r\n\r\n          LMe.setState({\r\n            SIsLoading: false\r\n          });\r\n\r\n          if (responseJson.status === false) {\r\n            return;\r\n          }\r\n\r\n          //Updating cache\r\n          tsSetInvoiceType(responseJson);\r\n        },\r\n        (error) => {\r\n          LMe.setState({\r\n            SIsLoading: false\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    var LMe = this;\r\n\r\n    if (LMe.state.SIsLoading === true) {\r\n\r\n      return <></>;\r\n    }//if..\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/supplierInvoice/:invoiceType/:invoiceNo\" component={TSupplierSingleInvoice} />\r\n            <Route exact path=\"/singleInvoice/:invoiceType/:invoiceNo\" component={TSingleInvoice} />\r\n            <Route exact path=\"/paymentInvoice/:invoiceNo\" component={TPaymentInvoice} />\r\n            <Route exact path=\"/statement/:cstId/:fromDate/:toDate\" component={TStatement} />\r\n            <Route exact path=\"/login\" component={LoginPg} />\r\n            <Route exact path=\"/:paramalink\" component={HomePage} />\r\n            <Route exact path=\"/:paramalink/:moduleType\" component={HomePage} />\r\n          </Switch>\r\n        </Router>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport { AppBar, Snackbar, Popover, Toolbar, Typography, IconButton, Backdrop, CircularProgress, Tooltip, List, ListItem, ListItemText } from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\n\r\nimport { BaseUrl, LogOut, tsClearCache, tsGetLoggedInUser, tsGetProjectId, IsDesktopApp } from './tsclsGenUtils.js';\r\nimport { isEmpty } from './tsclsGenUtils';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport TLoading from './reusable/tsclsLoading.js';\r\n\r\nclass tsframAppBar extends Component {\r\n\r\n    /**\r\n     * @param {*} props: \r\n     *  onClose - Hide the side bar\r\n     *  historyProp - It contain the history prop (LMe.props.history)\r\n     *  GetUserDetails(): This function will call on admin user details fetch\r\n     *  CanShowBackButton- Sets the visibility of back button\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsOpenAccountPopOver: false,\r\n            FetchedObj: null,\r\n            IsLoading: false,\r\n            SLoading: false,\r\n            IsSnackOn: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        // Fetch the user details\r\n        LMe.pvtFetchUserDetails();\r\n    }\r\n\r\n    pvtFetchUserDetails() {\r\n        /**\r\n         * @method pvtFetchUserDetails\r\n         * This function will fetch the logged in user details and sets the state\r\n         * \r\n         */\r\n        var LMe = this,\r\n            LLocalStorageResponse,\r\n            LUrl;\r\n\r\n        // Check for local data\r\n        LLocalStorageResponse = localStorage.getItem('userDetailsForAppBar');\r\n\r\n        if (isEmpty(LLocalStorageResponse) === false && LLocalStorageResponse !== 'null') {\r\n\r\n            LLocalStorageResponse = atob(LLocalStorageResponse);\r\n            LLocalStorageResponse = JSON.parse(LLocalStorageResponse);\r\n            LMe.pvtHandleOnSuccessUserDetails(LLocalStorageResponse);\r\n            return;\r\n        }\r\n\r\n        if (isEmpty(tsGetProjectId())) {\r\n            return;\r\n        }\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        LUrl = BaseUrl() + 'users/' + tsGetLoggedInUser().tsLoggenUserId;\r\n\r\n        LMe.setState({ IsLoading: true, FetchedObj: null });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.error === true) {\r\n                        LMe.setState({\r\n                            IsLoading: false\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.pvtHandleOnSuccessUserDetails(responseJson);\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnSuccessUserDetails(p_response) {\r\n        /**\r\n         * INTENT: This function will call after successfully fetech user data from server\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(p_response) === true) {\r\n            return;\r\n        }\r\n\r\n        LMe.setState({\r\n            FetchedObj: p_response,\r\n            IsLoading: false\r\n        });\r\n\r\n        // Calling base function\r\n        if (LMe.props.GetUserDetails !== undefined) {\r\n\r\n            LMe.props.GetUserDetails(p_response);\r\n        }\r\n\r\n        var LLocalStorageResponse = btoa(JSON.stringify(p_response));\r\n        localStorage.setItem('userDetailsForAppBar', LLocalStorageResponse);\r\n    }\r\n\r\n    pvtLogout() {\r\n        /**\r\n         * INTENT: This function will logout the user and go to home page\r\n         */\r\n        var LMe = this;\r\n\r\n        LogOut(LMe.props.historyProp);\r\n    }\r\n\r\n    pvtHandleOnAdminClick() {\r\n        /**\r\n         * INTENT: This function will open the Account Page\r\n         */\r\n        var LMe = this,\r\n            LHistoryProp = LMe.props.historyProp;\r\n\r\n        LHistoryProp.push('/admin');\r\n    }\r\n\r\n    pvtHandleOnBackupClick() {\r\n        /**\r\n         * INTENT: This function will open the Account Page\r\n         */\r\n        var LMe = this,\r\n            LHistoryProp = LMe.props.historyProp;\r\n\r\n        LHistoryProp.push('/admin/Backup');\r\n    }\r\n\r\n    pvtGetBackupButton() {\r\n\r\n        if (IsDesktopApp() === false) {\r\n            return null;\r\n        }//if..\r\n\r\n        const LMe = this;\r\n\r\n        return <Tooltip title={'Backup'}>\r\n            <IconButton\r\n                // aria-label=\"account of current user\"\r\n                // aria-controls=\"menu-appbar\"\r\n                // aria-haspopup=\"true\"\r\n                onClick={(e) => LMe.pvtHandleOnBackupClick()}\r\n                color=\"inherit\"\r\n            >\r\n                <CloudDownloadIcon />\r\n            </IconButton>\r\n        </Tooltip>\r\n    }\r\n\r\n    pvtGetSideIcon() {\r\n        var LMe = this,\r\n            LSideIcon,\r\n            LIsPopOverOpen = false;\r\n\r\n        if (LMe.state.IsOpenAccountPopOver !== false) {\r\n            LIsPopOverOpen = true;\r\n        };\r\n\r\n        LSideIcon = (\r\n            <>\r\n                <Tooltip title={'Settings'}>\r\n                    <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={(e) => LMe.pvtHandleOnAdminClick()}\r\n                        color=\"inherit\"\r\n                    >\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {LMe.pvtGetBackupButton()}\r\n                <Tooltip title={isEmpty(LMe.state.FetchedObj) === true ? '' : LMe.state.FetchedObj.displayName || ''}>\r\n                    <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={(e) => LMe.setState({ IsOpenAccountPopOver: e.currentTarget })}\r\n                        color=\"inherit\"\r\n                    >\r\n                        <AccountCircle />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Popover\r\n                    open={LIsPopOverOpen}\r\n                    anchorEl={LMe.state.IsOpenAccountPopOver}\r\n                    onClose={() => LMe.setState({ IsOpenAccountPopOver: false })}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                >\r\n                    <List>\r\n                        {/* <ListItem button onClick={() => LMe.pvtHandleOnAdminClick()}>\r\n                                <ListItemText primary=\"Administrator\" />\r\n                            </ListItem> */}\r\n                        <ListItem dense={true} button onClick={() => LMe.pvtOnClearCache()}>\r\n                            <CachedIcon className=\"tsMenuIcon\" />\r\n                            <ListItemText primary=\"Clear Cache\" />\r\n                        </ListItem>\r\n                        <ListItem dense={true} button onClick={() => LMe.pvtLogout()}>\r\n                            <ExitToAppIcon className=\"tsMenuIcon\" />\r\n                            <ListItemText primary=\"Logout\" />\r\n                        </ListItem>\r\n                    </List>\r\n                </Popover>\r\n            </>);\r\n\r\n        return LSideIcon;\r\n    }\r\n\r\n    pvtOnClearCache() {\r\n\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            IsOpenAccountPopOver: false,\r\n            SLoading: true,\r\n        });\r\n\r\n        LMe.FLoadingText = 'Clearing cache, please wait...';\r\n\r\n        setTimeout(() => {\r\n\r\n            tsClearCache();\r\n\r\n            LMe.FSnackMsg = 'Cache is cleared successfully.';\r\n\r\n            LMe.setState({\r\n                SLoading: false,\r\n                IsSnackOn: true\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    pvtBackBtnOnClick() {\r\n        var LMe = this,\r\n            LHistoryProp = LMe.props.historyProp;\r\n\r\n        if (isEmpty(LHistoryProp) === false) {\r\n\r\n            if (LHistoryProp.location.pathname === '/admin') {\r\n\r\n                LHistoryProp.push('/');\r\n            }\r\n            else {\r\n\r\n                LHistoryProp.goBack();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div>\r\n                <AppBar className=\"tsAppBar\" position=\"static\">\r\n                    <Toolbar>\r\n\r\n                        {/* Showing back icon  or Menu Icon */}\r\n\r\n                        <span className=\"tsNonDragable\">\r\n                            {LMe.props.CanShowBackButton === true ?\r\n                                <IconButton edge=\"start\" onClick={(e) => LMe.pvtBackBtnOnClick()} color=\"inherit\" aria-label=\"menu\">\r\n                                    <ArrowBackIcon />\r\n                                </IconButton>\r\n                                :\r\n                                <IconButton edge=\"start\" onClick={LMe.props.onClose} color=\"inherit\" aria-label=\"menu\">\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            }\r\n                        </span>\r\n\r\n                        <Typography style={{ flexGrow: 1 }} variant=\"h6\" >\r\n                            {/* <Tooltip title=\"Click here to open homepage\" placement=\"bottom\"> */}\r\n                            {/* <Link to=\"/\" className=\"tsLink\"> */}\r\n                            {/* { IsMobileView() === true ? LMe.props.Title.substr(0, 21) : LMe.props.Title} */}\r\n                            {LMe.props.Title || 'CRM SOFT'}\r\n                            {/* </Link> */}\r\n                            {/* </Tooltip> */}\r\n                        </Typography>\r\n                        {/* { LMe.state.FetchedObj === null ? '' : LMe.pvtGetSideIcon()} */}\r\n                        <span className=\"tsNonDragable\" style={{\r\n                            // margin: '17px 0 0 0'\r\n                        }}>{LMe.pvtGetSideIcon()}</span>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Backdrop open={LMe.state.IsLoading} style={{\r\n                    zIndex: 1,\r\n                    color: '#fff',\r\n                }}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n\r\n                <TLoading\r\n                    PLoadingText={LMe.FLoadingText}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                    variant=\"success\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsframAppBar;","import React, { Component } from 'react';\r\n\r\n\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { Button, Slide, Tooltip } from '@material-ui/core';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n// import { isEmpty } from './tsclsGenUtils';\r\n\r\nclass MenuCls extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.FArrOfIds = [];\r\n    }\r\n\r\n    pvtGetListItems() {\r\n        /**\r\n         * INTENT: This function will return the list components\r\n         */\r\n        var LMe = this,\r\n            LArrSyllabus = LMe.props.arrMenuItems,\r\n            LArrComponent = [];\r\n\r\n        if (LArrSyllabus === 0) {\r\n            LArrComponent.push(\r\n                <div key={'loading-syllabus-list'} className=\"tsMiddle\">\r\n                    <CircularProgress key=\"loading-cmp\" />\r\n                </div>\r\n            );\r\n\r\n            return LArrComponent;\r\n        }\r\n\r\n        if (LArrSyllabus === -1) {\r\n            LArrComponent.push(\r\n                <div key={'error-syllabus'} className=\"tsMiddle\">\r\n                    <ErrorIcon htmlColor=\"red\" /><p className=\"tsHelpText\" style={{ margin: '0 0 0 5px' }}>Error occurred!</p>\r\n                </div>);\r\n\r\n            return LArrComponent;\r\n        }\r\n\r\n        if (LArrSyllabus === -2) {\r\n            LArrComponent.push(\r\n                <div key={'error-syllabus'} className=\"tsMiddle\">\r\n                    <ErrorIcon htmlColor=\"red\" /><p className=\"tsHelpText\" style={{ margin: '0 0 0 5px' }}>Software Expired!</p>\r\n                </div>);\r\n\r\n            return LArrComponent;\r\n        }\r\n\r\n        LArrSyllabus = LArrSyllabus.items;\r\n\r\n        LArrComponent = LMe.pvtCreateTreeCmp(LArrSyllabus);\r\n\r\n        var LTreeCmp = (\r\n            <div style={{ flex: 1 }}>\r\n                <TreeView\r\n                    // className={classes.root}\r\n                    defaultExpanded={LMe.FArrOfIds}\r\n                    defaultCollapseIcon={<ExpandMoreIcon />}\r\n                    defaultExpandIcon={<ChevronRightIcon />}\r\n                    onNodeSelect={LMe.props.OnNodeSelect}\r\n                    key=\"TreePanel\"\r\n                    selected={[LMe.props.Paramalink]}\r\n                >\r\n                    {LArrComponent}\r\n                </TreeView>\r\n            </div>\r\n        );\r\n\r\n\r\n        return LTreeCmp;\r\n    }\r\n\r\n    pvtCreateTreeCmp(p_arrTree) {\r\n        /**\r\n         * INTENT: This function will create tree components\r\n         */\r\n        var LMe = this,\r\n            LCmp,\r\n            LRecord,\r\n            LHint,\r\n            LArrComponent = [],\r\n            LLenSyllabus;\r\n\r\n        LLenSyllabus = p_arrTree.length;\r\n\r\n        for (var LIndex = 0; LIndex < LLenSyllabus; LIndex++) {\r\n\r\n            LRecord = p_arrTree[LIndex];\r\n            LHint = LRecord.toolTip || LRecord.displayTxt || '';\r\n\r\n            if (LRecord.hidden === true) {\r\n                continue;\r\n            }\r\n\r\n            // If hint is not present then show display text as a hint\r\n\r\n            if (LRecord.children !== undefined) {\r\n                // Parent\r\n\r\n                LCmp = LMe.pvtCreateTreeCmp(LRecord.children);\r\n\r\n                LArrComponent.push(\r\n                    <TreeItem label={\r\n                        <Button fullWidth={true} style={{ justifyContent: 'flex-start', cursor: 'grab' }} size=\"small\">\r\n                            <b>{LRecord.displayTxt}</b>\r\n                        </Button>\r\n                    } nodeId={LRecord.id} key={LRecord.id + 'key'}>\r\n                        {LCmp}\r\n                    </TreeItem>\r\n                );\r\n            }\r\n            else {\r\n                // Child\r\n                LArrComponent.push(\r\n                    <TreeItem label={\r\n                        <Tooltip title={LHint} placement=\"right\" key={LRecord.id + 'tooltipmenukey'}>\r\n                            <Button fullWidth={true} style={{ justifyContent: 'flex-start' }} size=\"small\">\r\n                                {LRecord.displayTxt}\r\n                            </Button>\r\n                        </Tooltip>\r\n                    } nodeId={LRecord.id} key={LRecord.id + 'key'}>\r\n                        {LCmp}\r\n                    </TreeItem>\r\n                );\r\n            }\r\n\r\n            LMe.FArrOfIds.push(LRecord.id);\r\n        }\r\n\r\n        return LArrComponent;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <Slide direction=\"right\" in={LMe.props.isVisible} mountOnEnter unmountOnExit>\r\n                <div style={{\r\n                    width: '100%',\r\n                    maxWidth: 270,\r\n                    backgroundColor: '#fff',\r\n                    zIndex: 1,\r\n                    position: 'relative',\r\n                    overflow: 'auto',\r\n                    padding: '10px',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    boxShadow: '4px 4px 10px #bbb'\r\n                }}>\r\n                    {LMe.pvtGetListItems()}\r\n                </div>\r\n            </Slide>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuCls;","import React, { Component } from 'react';\r\nimport { tsSearchTree, isEmpty } from './tsclsGenUtils.js';\r\n// import RestoreIcon from '@material-ui/icons/Restore';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nclass tsfrmSinglePg extends Component {\r\n\r\n    /**\r\n     * @param {onLoadComplete} props : {function} - Call the function for stop loading\r\n     * @param {Paramalink} props: {String} - link\r\n     * @param {arrMenuItems} props: {Array} - Fetched menu items\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        /**\r\n         * @method componentDidUpdate\r\n         * Called immediately after updating occurs. Not called for the initial render.\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.props.onLoadComplete();\r\n    }\r\n\r\n    pvtGetContainer(p_strParamalink) {\r\n        /**\r\n         * @method pvtGetContainer\r\n         * This method will returns the container on the basis of paramalink\r\n         * \r\n         * @param {string}: paramalink\r\n         * @returns {Component}: The container on the basis of paramalink\r\n         */\r\n        var LMe = this,\r\n            LObjMenuItems = LMe.props.arrMenuItems || {},\r\n            LArrMenuItems,\r\n            LRecord,\r\n            LComponent = null,\r\n            LTree;\r\n\r\n        //If error occured\r\n        if (LObjMenuItems === -1) {\r\n\r\n            return (\r\n                <div key={'error-detail-editor'} className=\"tsMiddle\">\r\n                    <WarningIcon htmlColor=\"red\" />\r\n                    <p className=\"tsHelpText\" style={{ margin: '0 0 0 5px' }}>Some error occurred on the server, you can contact with System Administrator! <br /> &nbsp;&nbsp;&nbsp;You can mail us at <i>placementprep20@gmail.com</i></p>\r\n                </div>);\r\n        }//if..\r\n\r\n        //If expired\r\n        if (LObjMenuItems === -2) {\r\n\r\n            return (\r\n                <div key={'error-detail-editor'} className=\"tsMiddle\">\r\n                    <WarningIcon htmlColor=\"red\" />\r\n                    <p className=\"tsHelpText\" style={{ margin: '0 0 0 5px' }}>Your software is expired, kindly contact with System Administrator at <i>placementprep20@gmail.com</i></p>\r\n                </div>);\r\n        }//if..\r\n\r\n        LArrMenuItems = LObjMenuItems.items || [];\r\n\r\n        LTree = {\r\n            id: 'main',\r\n            children: LArrMenuItems\r\n        }\r\n\r\n        if (isEmpty(p_strParamalink) === true) {\r\n\r\n            p_strParamalink = 'home';\r\n        }//if..\r\n\r\n        LRecord = tsSearchTree(LTree, 'id', p_strParamalink);\r\n\r\n        if (isEmpty(LRecord) === true) {\r\n\r\n            return LComponent;\r\n        }//if..\r\n\r\n        // switch (LRecord.moduleType) {\r\n\r\n        //     case \"invoice\": \r\n        //         const TInvoice = require('./single/tsfrmInvoice').default;\r\n\r\n        //         LComponent = <TInvoice invoiceRecord={LRecord}></TInvoice>;\r\n        //     break;\r\n        // }\r\n\r\n        if (isEmpty(LRecord.moduleClass) === true) {\r\n\r\n            return <><p>Page not found.</p></>;\r\n        }//if..\r\n\r\n        const TModule = require('./' + LRecord.moduleClass).default;\r\n\r\n        LComponent = <TModule\r\n            moduleInfo={LRecord}\r\n            historyProp={LMe.props.history}\r\n        ></TModule>;\r\n\r\n        return LComponent;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n        return (\r\n            <div className=\"flex1 tsVBox tsDetailEditor\">\r\n                {LMe.pvtGetContainer(LMe.props.Paramalink)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmSinglePg;","import React, { Component } from 'react';\r\nimport TCustomerSelectionCntr from '../../reusable/tsfrmCustomerSelectionCntr';\r\nimport TProductSelectionCntr from './tsfrmProductSelectionCntr';\r\nimport { Box, Paper, FormControl, Select, MenuItem, InputLabel, TextField, Button, Snackbar } from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { isEmpty, BaseUrl, tsGetPaymentModes, tsPrint, tsGetProjectId, tsGetInvoiceDispNoByInvoiceNo } from '../../tsclsGenUtils';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmInvoice extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            cstId: -1,\r\n            SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            SIsLoading: false,\r\n            IsAlertDialogOpen: false,\r\n            IsSnackOn: false\r\n        };\r\n\r\n        LMe.FSnackMsg = '';\r\n        LMe.FWarningText = '';\r\n\r\n        LMe.FGridPanel = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isEmpty(LRecord) === true) {\r\n            return;\r\n        }//if..\r\n        // setTimeout(function () {\r\n\r\n        // }, 1000);\r\n        LMe.setState({\r\n            cstId: LRecord.cstId,\r\n            SGrandTotal: LRecord.grandTotal,\r\n            SInvoiceType: LRecord.invoiceType,\r\n            SPayingAmount: LRecord.creditedAmount,\r\n            SPaymentMode: LRecord.mode,\r\n            SRemark: LRecord.remark || ''\r\n        });\r\n    }\r\n\r\n    pvtResetAllFields() {\r\n        var LMe = this;\r\n\r\n        LMe.FGridPanel.current.ResetFields();\r\n\r\n        LMe.setState({\r\n            // cstId: -1,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            IsAlertDialogOpen: false,\r\n            SIsLoading: false,\r\n            //Making snack enable\r\n            IsSnackOn: true\r\n        });\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SInvoiceType: p_actCodeInvoiceType,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0\r\n        });\r\n\r\n        // LMe.pvtFetchProductsFields(p_actCodeInvoiceType);\r\n    }\r\n\r\n    pvtGetPaymentModeMenuItems() {\r\n        /**\r\n         * @method pvtGetPaymentModeMenuItems\r\n         * This method will return the menu items for payment type\r\n         */\r\n        var //LMe = this,\r\n            LKey,\r\n            LArrComponent = [],\r\n            LArrPaymentModes = tsGetPaymentModes() || [];\r\n\r\n        LArrComponent.push(<MenuItem key={'none-paymentmode-key'} value={''}><em>None</em></MenuItem>);\r\n\r\n        LArrPaymentModes.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            //Remove all spaces\r\n            LKey = p_objRecord.name.replace(/\\s/g, '') + '-key' + p_intIndex;\r\n\r\n            LArrComponent.push(<MenuItem key={LKey} value={p_objRecord.name}>{p_objRecord.name}</MenuItem>);\r\n        });\r\n\r\n        return LArrComponent;\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.cstId) === true || LMe.state.cstId === -1) {\r\n            LMe.FWarningText = 'Select a Customer and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SInvoiceType) === true) {\r\n            LMe.FWarningText = 'Select a Invoice type and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        var LArrProducts = LMe.FGridPanel.current.GetProductJson();\r\n        if (isEmpty(LArrProducts) === true) {\r\n            LMe.FWarningText = 'Add at least one Product to continue.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        // if (LMe.props.PIsOpenInDialog === true) {\r\n        //     return true;\r\n        // }\r\n\r\n        if (isEmpty(LMe.state.SPayingAmount) === true || LMe.state.SPayingAmount === 0) {\r\n            LMe.FWarningText = 'Enter Paying Amount (Credit) and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SPaymentMode) === true) {\r\n            LMe.FWarningText = 'Select Payment mode and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    EditInvoice(p_callBack) {\r\n        /**\r\n         * @public\r\n         */\r\n        var LMe = this;\r\n\r\n        /**\r\n         * Edit invoice will first delete the invoice and create new one with same invoice no\r\n         */\r\n\r\n        //This will always give true \r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n\r\n            LMe.pvtDelete(p_callBack);\r\n        }\r\n    }\r\n\r\n    pvtGenerateBtnClick(p_callBack) {\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'invoices',\r\n            LArrProducts,\r\n            LRequestOptions,\r\n            LMethod = 'POST',\r\n            LRequestJson = {};\r\n\r\n        // cstId: -1,\r\n        // SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n        // SPayingAmount: 0,\r\n        // SGrandTotal: 0,\r\n        // SPaymentMode: '',\r\n        // SRemark: '',\r\n\r\n        if (LMe.pvtValidate() === false || LMe.state.SIsLoading === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LArrProducts = LMe.FGridPanel.current.GetProductJson();\r\n\r\n        LRequestJson = {\r\n            cstId: LMe.state.cstId,\r\n            products: LArrProducts,\r\n            payingAmount: LMe.state.SPayingAmount,\r\n            grandTotal: LMe.state.SGrandTotal,\r\n            invoiceType: LMe.state.SInvoiceType,\r\n            invoiceDate: (LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceDate) || new Date().toString(),\r\n            mode: LMe.state.SPaymentMode,\r\n            remark: LMe.state.SRemark || '',\r\n        };\r\n\r\n        //Edit mode\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n\r\n            LRequestJson.invoiceNo = LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceNo;\r\n            // LMethod = 'PUT';\r\n            // LUrl = BaseUrl() + 'invoices/' + LRequestJson.invoiceNo;\r\n            if (isEmpty(LRequestJson.invoiceNo) === true) {\r\n\r\n                LMe.FWarningText = 'Something wents wrong.';\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n                return;\r\n            }\r\n        }\r\n        // console.log(LMe.props.PSelectedRecord);\r\n\r\n        LMe.setState({\r\n            SIsLoading: true\r\n        });\r\n\r\n        LRequestOptions = {\r\n            method: LMethod,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LRequestJson)\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        SIsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        LMe.FWarningText = responseJson.message || 'Error occur on server';\r\n                        LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                        return false;\r\n                    } //if..\r\n\r\n                    LMe.FSnackMsg = 'Invoice created - Invoice No: ' + tsGetInvoiceDispNoByInvoiceNo(responseJson.invoiceNo, responseJson.invoiceType, 0);\r\n                    // LMe.setState({IsSnackOn: true});\r\n\r\n                    LMe.pvtResetAllFields();\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        //Callback contain stop loading for edit mode\r\n                        p_callBack();\r\n                    }\r\n\r\n                    tsPrint(responseJson.invoiceType || LRequestJson.invoiceType, responseJson.invoiceNo)\r\n                },\r\n                (error) => {\r\n                    LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtDelete(p_callBack) {\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        // eslint-disable-next-line no-useless-concat\r\n        LUrl = BaseUrl() + 'invoices' + '/' + (LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceNo) + '/' + LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(LMe.props.PSelectedRecord.invoiceNo) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LRequestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify({ cstId: LMe.state.cstId }),\r\n        };\r\n\r\n        // fire command\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtGenerateBtnClick(p_callBack);\r\n\r\n                },\r\n                (error) => {\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({\r\n                        IsAlertDialogOpen: true\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetHeader() {\r\n        /**\r\n         * @method pvtGetHeader\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n            return <></>;\r\n        }\r\n\r\n        return <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n            {/* Module Icon */}\r\n            <div style={{ margin: '20px 6px 0 0' }}>\r\n                <DescriptionIcon />\r\n            </div>\r\n            <div style={{ margin: '18px 6px 0 0' }}>\r\n                {/* Module Title */}\r\n                <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                {/* Module Description */}\r\n                <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                    Create a new Invoice.\r\n                </Box>\r\n            </div>\r\n        </Box>;\r\n    }\r\n\r\n    pvtGetSaveBtn() {\r\n        /**\r\n         * @method pvtGetSaveBtn\r\n         * This method will return the save and generate invoice btn, if form is not invoked as a model\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n            return <></>;\r\n        }//if..\r\n\r\n        return <Button\r\n            style={{ margin: '0 0 0 0' }}\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={LMe.state.SIsLoading ? '' : <SaveIcon />}\r\n            disableElevation\r\n            onClick={() => { LMe.pvtGenerateBtnClick() }}\r\n        >\r\n            {LMe.state.SIsLoading ? <><CircularProgress size={20} color=\"inherit\" /> <span style={{ margin: '0 0 0 10px' }}>Loading...</span></>\r\n                : 'Generate Invoice'}\r\n        </Button>;\r\n    }\r\n\r\n    pvtGetPaymentFields() {\r\n        var LMe = this;\r\n\r\n        // if (LMe.props.PIsOpenInDialog === true) {\r\n        //     return <></>;\r\n        // }//if..\r\n\r\n        return <>\r\n            <TextField label=\"Credit\" placeholder=\"Amount\" required\r\n                style={{ margin: '3px 0 0 20px', width: '130px' }}\r\n                onChange={(e) => LMe.setState({ SPayingAmount: e.currentTarget.value })}\r\n                value={LMe.state.SPayingAmount}\r\n                margin=\"dense\"\r\n                type=\"number\"\r\n            />\r\n\r\n            <FormControl style={{ margin: '0 0 0 20px', width: '200px' }}>\r\n                <InputLabel>Payment Mode</InputLabel>\r\n                <Select\r\n                    value={LMe.state.SPaymentMode}\r\n                    onChange={(e) => {\r\n                        LMe.setState({ SPaymentMode: e.target.value });\r\n                    }}\r\n                >\r\n                    {LMe.pvtGetPaymentModeMenuItems()}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField label=\"Remark\" placeholder=\"Remark\"\r\n                style={{ margin: '4px 0 0 20px', width: '200px' }}\r\n                onChange={(e) => LMe.setState({ SRemark: e.currentTarget.value })}\r\n                value={LMe.state.SRemark}\r\n                margin=\"dense\"\r\n            // multiline\r\n            />\r\n\r\n        </>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n\r\n                {LMe.pvtGetHeader()}\r\n\r\n                {/* Customer selection and Invoice type */}\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <TCustomerSelectionCntr\r\n                        SetCstId={(p_intCustomerId) => LMe.setState({ cstId: p_intCustomerId })}\r\n\r\n                        //Not setting state here, because it is loading for first time and call componentDidMont method is getting -1 id\r\n                        //This will load the customer for this id\r\n                        cstId={LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.cstId}\r\n                    ></TCustomerSelectionCntr>\r\n\r\n                    <div style={{ margin: '5px 0 0 30px' }}>\r\n                        <h4>Invoice Type</h4>\r\n\r\n                        <div style={{ margin: '27px 0 0 0' }}>\r\n                            <TInvoiceType\r\n                                Value={LMe.state.SInvoiceType}\r\n                                OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                                EmptyText={'Invoice Type'}\r\n                            ></TInvoiceType>\r\n                        </div>\r\n                    </div>\r\n                </Paper>\r\n\r\n                <TProductSelectionCntr\r\n                    PInvoiceType={LMe.state.SInvoiceType}\r\n                    ref={LMe.FGridPanel}\r\n                    SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                        //Edit mode\r\n                        if (LMe.props.PIsOpenInDialog === true) {\r\n                            LMe.setState({ SGrandTotal: p_intGrandTotal });\r\n                        }\r\n                        else {\r\n                            LMe.setState({ SGrandTotal: p_intGrandTotal, SPayingAmount: p_intGrandTotal });\r\n                        }\r\n                    }}\r\n\r\n                    //This will load the products according to product arrays\r\n                    PProductsArr={LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.products}\r\n                />\r\n\r\n                <Paper style={{ margin: '20px 20px 20px 20px', padding: '0 20px 20px 20px' }} className=\"tsVBox\" variant=\"outlined\">\r\n                    <h4>Payment Details</h4>\r\n\r\n                    <div className=\"tsHBox\">\r\n                        <TextField label=\"Total Amount\" placeholder=\"Amount\" required\r\n                            style={{ margin: '3px 0 0 0', width: '120px' }}\r\n                            onChange={(e) => LMe.setState({ SGrandTotal: e.currentTarget.value })}\r\n                            value={LMe.state.SGrandTotal}\r\n                            margin=\"dense\"\r\n                            type=\"number\"\r\n                            InputProps={{\r\n                                readOnly: true\r\n                            }}\r\n                        />\r\n\r\n                        {LMe.pvtGetPaymentFields()}\r\n\r\n                        <div className=\"flex1\"></div>\r\n                        {LMe.pvtGetSaveBtn()}\r\n                    </div>\r\n                </Paper>\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoice;","import React, { Component } from 'react';\r\nimport {\r\n   Box,\r\n   Toolbar,\r\n   Button,\r\n   IconButton,\r\n   Tooltip, Input,\r\n   InputAdornment\r\n} from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TCustomerDialog from './tsdlgCustomers';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { Search } from '@material-ui/icons';\r\n\r\nclass tsfrmCustomersGrid extends Component {\r\n   /**\r\n    * @props: moduleInfo,\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         CustomerRecord: {},\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false,\r\n         ColumnFields: LMe.pvtGetGridColumn(),\r\n         SortingModel: [{\r\n            field: 'cstName',\r\n            sort: 'asc',\r\n         }]\r\n      };\r\n\r\n      LMe.FGridRef = React.createRef();\r\n      LMe.FSearchField = React.createRef();\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchCustomersFields();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchCustomersFields();\r\n\r\n      LMe.FSelectedRecord = null;\r\n\r\n      if (LMe.FSearchField && LMe.FSearchField.current && LMe.FSearchField.current.firstElementChild) {\r\n         LMe.FSearchField.current.firstElementChild.value = '';\r\n      }\r\n\r\n      LMe.setState({\r\n         FetchedData: null,\r\n      });\r\n   }\r\n\r\n   pvtFetchCustomersFields() {\r\n      /**\r\n       * @method pvtFetchCustomersFields\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl;\r\n\r\n      LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord.id;\r\n               // });\r\n\r\n               LMe.pvtFetchCustomers(responseJson);\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtFetchCustomers(p_arrCstFields) {\r\n      /**\r\n       * @method pvtFetchCustomers\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl;\r\n\r\n      LUrl = BaseUrl() + 'customers';\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      // No need to check for session\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               // responseJson.forEach(function (p_objRecord) {\r\n               //    p_objRecord.id = p_objRecord.id;\r\n               // });\r\n\r\n               LMe.FAllFetectedRecords = responseJson;\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n                  ColumnFields: LMe.pvtGetGridColumn(p_arrCstFields) || [],\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtGetGridColumn(p_arrCstFields) {\r\n      /**\r\n       * @method pvtGetGridColumn\r\n       * This method will return the grid column json\r\n       */\r\n\r\n      var //LMe = this,\r\n         LArrColumn = [],\r\n         LObj = {};\r\n\r\n      LArrColumn = [\r\n         {\r\n            field: 'cstName',\r\n            headerName: 'Name',\r\n            headerClassName: 'tsGridHeader',\r\n            minWidth: 200,\r\n            flex: 1,\r\n            color: 'primary',\r\n            sort: 'ASC',\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isRequired: true\r\n         },\r\n         {\r\n            field: 'cstBalance',\r\n            headerName: 'Balance',\r\n            headerClassName: 'tsGridHeader',\r\n            color: 'primary',\r\n            minWidth: 150,\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isField: false,\r\n            renderCell: (params) => {\r\n               var LValue = params.value;\r\n\r\n               if (LValue > 0) {\r\n\r\n                  return LValue + ' Cr';\r\n               }\r\n               else if (LValue < 0) {\r\n\r\n                  return Math.abs(LValue) + ' Dr';\r\n               }\r\n\r\n               return LValue;\r\n            },\r\n         },\r\n         {\r\n            field: 'cstGSTNo',\r\n            headerName: 'GST No',\r\n            headerClassName: 'tsGridHeader',\r\n            minWidth: 200,\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isRequired: false,\r\n            pattern : \"d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}\"\r\n\r\n         },\r\n         {\r\n            field: 'cstState',\r\n            headerName: 'State',\r\n            headerClassName: 'tsGridHeader',\r\n            minWidth: 200,\r\n            fieldType: GenConstants().STATE_FIELD,\r\n            isRequired: false\r\n         }\r\n      ];\r\n\r\n      //Getting custom fields\r\n      if (isEmpty(p_arrCstFields) === false) {\r\n\r\n         //Convert it into array\r\n         p_arrCstFields = p_arrCstFields || [];\r\n\r\n         p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isSystemField === true) {\r\n\r\n               return true;\r\n            }//if..\r\n\r\n            LObj = {};\r\n\r\n            LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n            //Setting column name\r\n            LObj['field'] = p_objRecord.columnName;\r\n            LObj['headerClassName'] = 'tsGridHeader';\r\n            LObj['minWidth'] = 150;\r\n\r\n            LObj['fieldType'] = p_objRecord.fieldType;\r\n            LObj['isRequired'] = p_objRecord.isRequired === 1;\r\n\r\n            LArrColumn.push(LObj);\r\n         });\r\n      }//if..\r\n\r\n      return LArrColumn;\r\n   }\r\n\r\n   pvtLoadUserDialog() {\r\n      /**\r\n       * @method pvtNewUser\r\n       * This method will Create new user\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === true) {\r\n         return (\r\n            <TCustomerDialog\r\n               IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n               UpdateCustomerStore={(p_objUser) =>\r\n                  LMe.UpdateCustomerStore(p_objUser)\r\n               }\r\n               CustomerRecord={LMe.state.CustomerRecord || {}}\r\n\r\n               ColumnFields={LMe.state.ColumnFields || []}\r\n            />\r\n         );\r\n      }\r\n      return (<></>);\r\n   }\r\n\r\n   pvtEditCustomer(p_objParam) {\r\n      /**\r\n       * @method pvtEditCustomer\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         CustomerRecord: LRecord\r\n      });\r\n   }\r\n\r\n   UpdateCustomerStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateCustomerStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.FAllFetectedRecords || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser.id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser.id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      LMe.FAllFetectedRecords = LArrResponse;\r\n      // Update state.\r\n      // LMe.setState({ FetchedData: LArrResponse });\r\n      LMe.pvtFilterOnSearch();\r\n\r\n      if (LMe.props.IsSelectMode === true) {\r\n\r\n         LMe.props.HandleOnSelect(p_objResponseUser);\r\n      }\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Customer and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditCustomer(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Customer and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.FCnfrmText = \"Are you sure want to delete this customer?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Customer and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      // eslint-disable-next-line no-useless-concat\r\n      LUrl = BaseUrl() + 'customers' + '/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.FAllFetectedRecords || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n\r\n               if (responseJson.success === false) {\r\n\r\n                  LMe.FWarningText = responseJson.message;\r\n                  LMe.setState({ IsAlertDialogOpen: true, IsCnfrmDialogOpen: false });\r\n\r\n                  LMe.pvtFilterOnSearch();\r\n                  return;\r\n               }\r\n\r\n               LMe.FSelectedRecord = null;\r\n\r\n               if (LMe.props.IsSelectMode === true) {\r\n\r\n                  LMe.props.SelectedRecord(LMe.FSelectedRecord);\r\n               }//if..\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               LMe.FAllFetectedRecords = LArrResponse;\r\n               // Update state.\r\n               LMe.setState({\r\n                  // FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n               LMe.pvtFilterOnSearch();\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n\r\n      if (LMe.props.IsSelectMode === true) {\r\n\r\n         LMe.props.SelectedRecord(LMe.FSelectedRecord);\r\n      }//if..\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }//if..\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   pvtGetHeader() {\r\n      var LMe = this;\r\n\r\n      if (LMe.props.IsSelectMode === true) {\r\n         return <></>;\r\n      }\r\n\r\n      return (<Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n         {/* Module Icon */}\r\n         <div style={{ margin: '20px 6px 0 0' }}>\r\n            <PeopleSharpIcon />\r\n         </div>\r\n         <div style={{ margin: '18px 6px 0 0' }}>\r\n            {/* Module Title */}\r\n            <div style={{ fontSize: '20px' }}> Manage Customers </div>\r\n\r\n            {/* Module Description */}\r\n            <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n               Create new customer, edit customer details, remove\r\n               customer, etc.\r\n            </Box>\r\n         </div>\r\n      </Box>);\r\n   }\r\n\r\n   pvtFilterOnSearch(p_searchText) {\r\n      /**\r\n       * @method pvtFilterOnSearch\r\n       * This method will filter the grid record\r\n       */\r\n      var LMe = this,\r\n         LCustomers = LMe.FAllFetectedRecords || [],\r\n         LCstName;\r\n\r\n      p_searchText = p_searchText || (LMe.FSearchField.current && LMe.FSearchField.current.firstElementChild && LMe.FSearchField.current.firstElementChild.value) || '';\r\n\r\n      if (isEmpty(p_searchText) === true) {\r\n\r\n         LMe.setState({\r\n            FetchedData: LMe.FAllFetectedRecords\r\n         });\r\n\r\n         return;\r\n      }//if..\r\n\r\n      p_searchText = p_searchText.toLowerCase();\r\n\r\n      var LFilteredRecords = LCustomers.filter((p_objCustomer) => {\r\n\r\n         LCstName = p_objCustomer.cstName || '';\r\n         LCstName = LCstName.toLowerCase();\r\n         //partial matches\r\n         return LCstName.includes(p_searchText);\r\n      });\r\n\r\n      LMe.setState({\r\n         FetchedData: LFilteredRecords\r\n      });\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <div\r\n            className=\"flex1 tsVBox\"\r\n            style={{\r\n               margin: '10px 0 10px 0',\r\n               // width: '100/%'\r\n            }}\r\n         >\r\n            {LMe.pvtGetHeader()}\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 0px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({\r\n                        CanInvokeDialogOpen: true,\r\n                        CustomerRecord: {},\r\n                     })\r\n                  }\r\n               >\r\n                  New Customer\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Customer\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Customer\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => LMe.pvtRefresh()}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n               <div className=\"flex1\"></div>\r\n\r\n               <Input label=\"Search\" placeholder=\"Search Customer\"\r\n                  onChange={(e) => {\r\n                     LMe.pvtFilterOnSearch(e.currentTarget.value)\r\n                  }}\r\n                  ref={LMe.FSearchField}\r\n                  type=\"text\"\r\n                  margin=\"dense\"\r\n                  style={{ margin: '10px 0 0 0' }}\r\n                  endAdornment={\r\n                     <InputAdornment position=\"start\">\r\n                        <Search />\r\n                     </InputAdornment>\r\n                  }\r\n               />\r\n            </Toolbar>\r\n            <div\r\n               style={{ margin: '5px 20px 0 20px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  style={{ minHeight: '400px' }}\r\n                  columns={LMe.state.ColumnFields}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  ref={LMe.FGridRef}\r\n                  // rowHeight={50}\r\n                  pagination={true}\r\n                  // pageSize={10}\r\n                  csvOptions={{ allColumns: true }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n\r\n                  sortModel={LMe.state.SortingModel}\r\n                  onSortModelChange={(model) => LMe.setState({ SortingModel: model })}\r\n\r\n                  // filterModel={{\r\n                  //    items: [{ columnField: 'cstName', operatorValue: 'contains', value: 'Trinesh' }],\r\n                  // }}\r\n\r\n                  components={{\r\n                     Toolbar: GridToolbar,\r\n                  }}\r\n                  density={'compact'}\r\n                  onCellDoubleClick={(params) => {\r\n                     if (LMe.props.IsSelectMode === true) {\r\n\r\n                        LMe.props.HandleOnSelect(params.row);\r\n                     }\r\n                     else {\r\n\r\n                        LMe.pvtEditCustomer(params.row)\r\n                     }\r\n                  }}\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                  hideFooter={LMe.props.IsSelectMode === true}\r\n               />\r\n            </div>\r\n            {LMe.pvtLoadUserDialog()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsfrmCustomersGrid;\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { BaseUrl, isEmpty, tsGetProjectId, tsGetStates, tsSaveInLocalStorage, tsGetFromLocalStorage } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nclass tsdlgCustomers extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  CustomerRecord\r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            ShowPassword: false,\r\n            IsLoading: false,\r\n\r\n            IsAlertDialogOpen: false,\r\n            AlertDialog: {\r\n                AlertDialogContent: <></>,\r\n                AlertDialogHeader: 'Warning'\r\n            },\r\n\r\n            SFields: []\r\n        };\r\n\r\n        LMe.FIsInvokedFirstTime = true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtDefineProperties();\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n\r\n        var LMe = this,\r\n            LRecord = LMe.props.CustomerRecord,\r\n            LColumnFields = LMe.props.ColumnFields || [],\r\n            LObj = {},\r\n            LStateFields = [];\r\n\r\n        LColumnFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isField === false) {\r\n\r\n                return true; //continue...\r\n            }\r\n\r\n            LObj = {};\r\n            LObj[p_objRecord.field] = LRecord[p_objRecord.field];\r\n\r\n            LObj['fieldName'] = p_objRecord.field;\r\n            LObj['headerName'] = p_objRecord.headerName;\r\n            LObj['fieldType'] = p_objRecord.fieldType;\r\n            LObj['isRequired'] = p_objRecord.isRequired;\r\n\r\n            LStateFields.push(LObj);\r\n        });\r\n\r\n        //Upate state here\r\n        LMe.setState({\r\n            SFields: LStateFields\r\n        });\r\n    }\r\n\r\n    pvtResetFields() {\r\n        /**\r\n         * @method pvtResetFields\r\n         * This method will reset all the fields\r\n         */\r\n        var LMe = this;\r\n\r\n        //Reset the variables\r\n        LMe.setState({\r\n            SFields: []\r\n        });\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LUI = [];\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        LArrFields.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            if (p_objRecord['fieldType'] === GenConstants().FIELD_DATE) {\r\n\r\n                LUI.push(\r\n                    <TextField\r\n                        label={p_objRecord['headerName']}\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        style={{ margin: '20px 0 0 0' }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        required={p_objRecord['isRequired']}\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n            else if (p_objRecord['fieldType'] === GenConstants().FIELD_NUMBER) {\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        type=\"number\"\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n            else if (p_objRecord['fieldType'] === GenConstants().STATE_FIELD) {\r\n\r\n                LUI.push(<Autocomplete\r\n                    options={tsGetStates()}\r\n                    getOptionLabel={(option) => {\r\n\r\n                        return option || '';\r\n                    }}\r\n                    clearOnEscape\r\n                    onChange={(e, p_value, p_reason) => {\r\n                        p_objRecord[p_objRecord.fieldName] = p_value;\r\n                        LMe.setState({ SFields: LArrFields });\r\n\r\n                        //Save in local storage\r\n                        tsSaveInLocalStorage('tsLastSelectedState', p_value);\r\n                    }}\r\n                    value={p_objRecord[p_objRecord.fieldName] || LMe.pvtGetLastSelectedState(p_objRecord, LArrFields)}\r\n                    key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                    // id=\"state\"\r\n                    renderInput={(params) => {\r\n\r\n                        return <TextField\r\n                            {...params}\r\n                            label={'State'}\r\n                            margin=\"dense\"\r\n                        />\r\n                    }}\r\n                />\r\n                );\r\n            }\r\n            else {\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n                {LUI}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    pvtGetLastSelectedState(p_objRecord, p_arrFields) {\r\n\r\n        var LMe = this,\r\n            LastSelectedState = tsGetFromLocalStorage('tsLastSelectedState');\r\n\r\n        if ((isEmpty(LastSelectedState) || LastSelectedState === \"null\")) {\r\n\r\n            return '';\r\n        }//if..\r\n\r\n        p_objRecord[p_objRecord.fieldName] = LastSelectedState;\r\n        LMe.setState({ SFields: p_arrFields });\r\n\r\n        return LastSelectedState;\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.pvtSaveCustomer() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            Save\r\n        </Button>);\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the user dlg\r\n         */\r\n        var LMe = this,\r\n            LAlertStateObj = {},\r\n            LIsValid = true;\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord['isRequired'] === true && isEmpty(p_objRecord[p_objRecord.fieldName]) === true) {\r\n\r\n                LIsValid = false;\r\n\r\n                LAlertStateObj = {\r\n                    AlertDialogContent: <span> {p_objRecord['headerName']} is required. </span>,\r\n                    AlertDialogHeader: 'Warning'\r\n                };\r\n            }\r\n        });\r\n\r\n        if (LIsValid === false) {\r\n\r\n            LMe.setState({\r\n                IsAlertDialogOpen: true,\r\n                AlertDialog: LAlertStateObj\r\n            });\r\n        }\r\n\r\n        return LIsValid;\r\n    }\r\n\r\n    pvtSaveCustomer() {\r\n        /**\r\n        * @method pvtSaveCustomer\r\n        * This function will fire the command and save the user data\r\n        *\r\n        */\r\n        var LMe = this,\r\n            LParamObj = {},\r\n            LArrFieldNames = [],\r\n            LRequestOptions,\r\n            LUrl = BaseUrl() + 'customers',\r\n            LIsValid = false,\r\n            LIsEditMode = isEmpty(LMe.props.CustomerRecord.id) === false;\r\n\r\n        LIsValid = LMe.pvtValidate();\r\n\r\n        if (LIsValid === false) {\r\n\r\n            return false;\r\n        }//if..\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            LParamObj[p_objRecord.fieldName] = p_objRecord[p_objRecord.fieldName] || '';\r\n\r\n            LArrFieldNames.push(p_objRecord.fieldName);\r\n        });\r\n\r\n        LParamObj.fieldsArr = LArrFieldNames;\r\n\r\n        LRequestOptions = {\r\n            method: LIsEditMode === true ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        if (LIsEditMode === true) {\r\n\r\n            LUrl = BaseUrl() + 'customers/' + LMe.props.CustomerRecord.id;\r\n        }\r\n\r\n        LMe.setState({ IsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        var LAlertStateObj = {\r\n                            AlertDialogContent: <span> {responseJson.message} </span>,\r\n                            AlertDialogHeader: 'Error',\r\n                        };\r\n\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true,\r\n                            AlertDialog: LAlertStateObj,\r\n                        });\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n                    LMe.pvtHandleOnClose();\r\n                    LMe.props.UpdateCustomerStore(responseJson);\r\n\r\n                    if (LIsEditMode === false) {\r\n\r\n                        LMe.pvtResetFields();\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={isEmpty(LMe.props.CustomerRecord.id) ? 'New Customer' : 'Edit Customer'}\r\n                    DialogLoading={LMe.state.IsLoading}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsdlgCustomers;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsdlgStocks extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  StockRecord\r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            ShowPassword: false,\r\n            IsLoading: false,\r\n\r\n            IsAlertDialogOpen: false,\r\n            AlertDialog: {\r\n                AlertDialogContent: <></>,\r\n                AlertDialogHeader: 'Warning'\r\n            },\r\n\r\n            SFields: []\r\n        };\r\n\r\n        LMe.FIsInvokedFirstTime = GenConstants().PESTICIDE_ACT_CODE;\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtDefineProperties();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /**\r\n         * @method componentDidUpdate\r\n         * \r\n         */\r\n        // var LMe = this;\r\n\r\n        // if (LMe.FIsInvokedFirstTime === true || prevProps.StockRecord.id !== LMe.props.StockRecord.id) {\r\n\r\n        //     LMe.pvtDefineProperties();\r\n        //     LMe.FIsInvokedFirstTime = false;\r\n        // }\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.StockRecord,\r\n            LColumnFields = LMe.props.ColumnFields || [],\r\n            LObj = {},\r\n            LStateFields = [];\r\n\r\n        LColumnFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isField === false) {\r\n\r\n                return true;//continue\r\n            }\r\n\r\n            LObj = {};\r\n            LObj[p_objRecord.field] = LRecord[p_objRecord.field];\r\n\r\n            LObj['fieldName'] = p_objRecord.field;\r\n            LObj['headerName'] = p_objRecord.headerName;\r\n            LObj['fieldType'] = p_objRecord.fieldType;\r\n            LObj['isRequired'] = p_objRecord.isRequired;\r\n            // LObj['isField'] = p_objRecord.isField;\r\n\r\n            LStateFields.push(LObj);\r\n        });\r\n\r\n        //Upate state here\r\n        LMe.setState({\r\n            SFields: LStateFields\r\n        });\r\n    }\r\n\r\n    pvtResetFields() {\r\n        /**\r\n         * @method pvtResetFields\r\n         * This method will reset all the fields\r\n         */\r\n        var LMe = this;\r\n\r\n        //Reset the variables\r\n        LMe.setState({\r\n            SFields: []\r\n        });\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LUI = [];\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isField === false) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            if (p_objRecord['fieldType'] === GenConstants().FIELD_DATE) {\r\n\r\n                LUI.push(\r\n                    <TextField\r\n                        label={p_objRecord['headerName']}\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        style={{ margin: '20px 0 0 0' }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={p_objRecord['isRequired']}\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                    />\r\n                );\r\n\r\n            }\r\n            else if (p_objRecord['fieldType'] === GenConstants().FIELD_NUMBER) {\r\n\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        type=\"number\"\r\n                        inputProps={{\r\n                            min: 1\r\n                        }}\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n            else {\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n                {LUI}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.pvtSaveProduct() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            Save\r\n        </Button>);\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the user dlg\r\n         */\r\n        var LMe = this,\r\n            LAlertStateObj = {},\r\n            LIsValid = true;\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        //Todo - Need to reverse the loop\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord['isRequired'] === true && isEmpty(p_objRecord[p_objRecord.fieldName]) === true) {\r\n\r\n                LIsValid = false;\r\n\r\n                LAlertStateObj = {\r\n                    AlertDialogContent: <span> {p_objRecord['headerName']} is required. </span>,\r\n                    AlertDialogHeader: 'Warning'\r\n                };\r\n            }\r\n        });\r\n\r\n        if (LIsValid === false) {\r\n\r\n            LMe.setState({\r\n                IsAlertDialogOpen: true,\r\n                AlertDialog: LAlertStateObj\r\n            });\r\n        }\r\n\r\n        return LIsValid;\r\n    }\r\n\r\n    pvtSaveProduct() {\r\n        /**\r\n        * @method pvtSaveProduct\r\n        * This function will fire the command and save the user data\r\n        *\r\n        */\r\n        var LMe = this,\r\n            LParamObj = {},\r\n            LArrFieldNames = [],\r\n            LRequestOptions,\r\n            LUrl = BaseUrl() + 'stocks',\r\n            LIsValid = false,\r\n            LIsEditMode = isEmpty(LMe.props.StockRecord.id) === false;\r\n\r\n        LIsValid = LMe.pvtValidate();\r\n\r\n        if (LIsValid === false) {\r\n\r\n            return false;\r\n        }//if..\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            LParamObj[p_objRecord.fieldName] = p_objRecord[p_objRecord.fieldName] || '';\r\n\r\n            LArrFieldNames.push(p_objRecord.fieldName);\r\n        });\r\n\r\n        LArrFieldNames.push('productId');\r\n\r\n        LParamObj.fieldsArr = LArrFieldNames;\r\n        LParamObj.productId = LMe.props.ProductId;\r\n\r\n        LRequestOptions = {\r\n            method: LIsEditMode === true ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        if (LIsEditMode === true) {\r\n\r\n            LUrl = BaseUrl() + 'stocks/' + LMe.props.StockRecord.id;\r\n        }\r\n\r\n        LMe.setState({ IsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        var LAlertStateObj = {\r\n                            AlertDialogContent: <span> {responseJson.message} </span>,\r\n                            AlertDialogHeader: 'Error',\r\n                        };\r\n\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true,\r\n                            AlertDialog: LAlertStateObj,\r\n                        });\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n                    LMe.pvtHandleOnClose();\r\n                    LMe.props.UpdateStockStore(responseJson);\r\n\r\n                    if (LIsEditMode === false) {\r\n\r\n                        LMe.pvtResetFields();\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={isEmpty(LMe.props.StockRecord.id) ? `Add stock for ${LMe.props.ProductDispName}` : 'Edit stock'}\r\n                    DialogLoading={LMe.state.IsLoading}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsdlgStocks;","import React, { Component } from 'react';\r\nimport {\r\n    // FormControl, InputLabel, Select,\r\n    TextField, MenuItem\r\n} from '@material-ui/core';\r\n// import { GenConstants } from '../tsclsGenConstants';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId,\r\n    //  isEmpty \r\n} from '../tsclsGenUtils';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nclass tscmpProductSelection extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtFetchProducts();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        var LMe = this;\r\n\r\n        if (prevProps.InvoiceType !== LMe.props.InvoiceType) {\r\n\r\n            LMe.pvtFetchProducts();\r\n        }\r\n    }\r\n\r\n    pvtFetchProducts() {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        if (isEmpty(LMe.props.InvoiceType) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LUrl = BaseUrl() + 'products/type/' + LMe.props.InvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    var LState = {\r\n                        FetchedData: responseJson\r\n                    };\r\n\r\n                    if (isEmpty(LMe.props.Value.id) === false && LMe.props.Value.hasOwnProperty('productName') === false) {\r\n\r\n                        responseJson.forEach(function (p_objRecord) {\r\n\r\n                            if (p_objRecord.id === LMe.props.Value.id) {\r\n\r\n                                LMe.props.OnChange(p_objRecord);\r\n                            }//if..\r\n                        });\r\n                    }//if..\r\n\r\n                    LMe.setState(LState);\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetItems() {\r\n        /**\r\n         * @method pvtGetItems\r\n         */\r\n\r\n        var LMe = this,\r\n            LArrMenuItem = [],\r\n            LArrProducts;\r\n\r\n        LArrProducts = LMe.state.FetchedData || [];\r\n\r\n        LArrProducts.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            LArrMenuItem.push(\r\n                <MenuItem key={p_objRecord.productName + 'key' + p_intIndex} value={p_objRecord}>{p_objRecord.productName}</MenuItem>\r\n            );\r\n        });\r\n\r\n        return LArrMenuItem;\r\n    }\r\n\r\n    render() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            // <FormControl style={{ margin: '-20px 0 0 0', width: '200px' }}>\r\n            //     <InputLabel>{LMe.props.EmptyText}</InputLabel>\r\n            //     <Select\r\n            //         value={LMe.props.Value}\r\n            //         onChange={(e) => {\r\n            //             LMe.props.OnChange(e.target.value);\r\n            //         }}\r\n            //     >\r\n            //         {LMe.pvtGetItems()}\r\n            //     </Select>\r\n            // </FormControl>\r\n            <Autocomplete\r\n                options={LMe.state.FetchedData}\r\n                getOptionLabel={(option) => {\r\n\r\n                    return option.productName || '';\r\n                }}\r\n                clearOnEscape\r\n                style={{ margin: '-20px 0 0 0', width: '200px' }}\r\n                value={LMe.props.Value}\r\n                onChange={(e, p_value, p_reason) => {\r\n\r\n                    LMe.props.OnChange(p_value || {});\r\n                }}\r\n                id=\"product\"\r\n                renderInput={(params) => {\r\n\r\n                    return <TextField\r\n                        {...params}\r\n                        label={LMe.props.EmptyText}\r\n                        margin=\"dense\"\r\n                    // value={LMe.props.Value}\r\n                    // onChange={(e) => {\r\n                    //     debugger\r\n                    //     LMe.props.OnChange(e.target.value);\r\n                    // }}\r\n                    />\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default tscmpProductSelection;","import React, { Component } from 'react';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode, isEmpty, isObjEmpty, tsPrint, tsGenerateInvoicePDF,\r\n    tsGetInvoiceDispNoByInvoiceNo, tsGetDateFromServerDateForInpField, tsGetGstAmount, tsGetIGSTAmount\r\n} from '../../tsclsGenUtils';\r\nimport TProductSelectionCntr from './tsfrmProductSelectionCntr';\r\nimport {\r\n    IconButton,\r\n    Tooltip,\r\n    Button\r\n} from '@material-ui/core';\r\nimport TInvoiceDlg from './tsfrmSingleInvoice';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: [],\r\n            SIsDialogOpen: false,\r\n            SIsDialogOpenInReadOnlyMode: true,\r\n            SLoading: false,\r\n            IsAlertDialogOpen: false\r\n        };\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <div className=\"tsHBoxForPrint tsInvoiceViewBorder\" key=\"tskey1\">\r\n                <span className=\"tsInvoiceViewDispField\" key=\"tskey11\">Customer Name</span>\r\n                <span className=\"tsInvoiceViewValField\" key=\"tskey12\">{p_objCstValues.cstName}</span>\r\n            </div>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <div key=\"tskey2\" className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\" key=\"tskey21\">Balance</span>\r\n                    <span className=\"tsInvoiceViewValField\" key=\"tskey22\">{L_funGetBalance(p_objCstValues.cstBalance)}</span>\r\n                </div>\r\n            }</>,\r\n            <div className=\"tsHBoxForPrint\" key=\"tskey33a\">\r\n                <span className=\"tsInvoiceViewDispField\" key=\"tskey11\">GST No</span>\r\n                <span className=\"tsInvoiceViewValField\" key=\"tskey12\">{p_objCstValues.cstGSTNo}</span>\r\n            </div>,\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord, p_index) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <div className=\"tsHBoxForPrint\" key={\"tskey3\" + p_index}>\r\n                    <span className=\"tsInvoiceViewDispField\" key={\"tskey31\" + p_index}>{p_objRecord.fieldName}</span>\r\n                    <span className=\"tsInvoiceViewValField\" key={\"tskey32\" + p_index}>{p_objCstValues[p_objRecord.columnName]}</span>\r\n                </div>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtPrint() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n\r\n        tsPrint(LRecord.invoiceType, LRecord.invoiceNo);\r\n        // var LWindow = window.open('/singleInvoice/' + LRecord.invoiceType + '/' + LRecord.invoiceNo);\r\n\r\n        // LWindow.onload = function () {\r\n\r\n        //     setTimeout(function () {\r\n        //         LWindow.print();\r\n        //     }, 100);\r\n        // }\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        tsGenerateInvoicePDF(LRecord.invoiceType, LRecord.invoiceNo, function (p_objResponseJson) {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            if (p_objResponseJson.success === false) {\r\n\r\n                LMe.FWarningText = p_objResponseJson.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }//if..\r\n        });\r\n    }\r\n\r\n    pvtHandleOnEditButtonClick() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({\r\n            SIsDialogOpen: true,\r\n            SIsDialogOpenInReadOnlyMode: false\r\n        });\r\n    }\r\n\r\n    pvtLoadDialog() {\r\n        /**\r\n         * @method pvtLoadDialog\r\n         * This method will loads the Dialog\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsDialogOpen === false) {\r\n\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsDialogOpen: false })}\r\n            PSelectedRecord={LMe.props.PSelectedRecord}\r\n            PIsReadOnlyMode={LMe.state.SIsDialogOpenInReadOnlyMode}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PSelectedRecord || {};\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div\r\n                    className=\"tsHBox\"\r\n                >\r\n                    <div>\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            disableElevation\r\n                            style={{ margin: '7px 0 0 0' }}\r\n                            onClick={() => {\r\n                                LMe.pvtHandleOnEditButtonClick();\r\n                            }}\r\n                            startIcon={<EditIcon />}\r\n                        >\r\n                            Edit Invoice\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"flex1\"> </div>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Generate PDF\"\r\n                        onClick={() => LMe.pvtGeneratePDF()}\r\n                        color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Generate PDF\">\r\n                            <PictureAsPdfIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <div>\r\n                        <IconButton\r\n                            onClick={() => LMe.pvtPrint()}\r\n                        >\r\n                            <Tooltip title=\"Print\">\r\n                                <PrintIcon />\r\n                            </Tooltip>\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"tsVBox\" key=\"tskey4\">\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\" key=\"tskey41\">\r\n                        {isEmpty(LObjInvoice.invoiceType) === false ? <><span className=\"tsInvoiceViewDispField\">Invoice Type</span>\r\n                            <span key=\"tskey42\" className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</span></> : <></>}\r\n                    </div>\r\n                    <div key=\"tskey43\" className=\"tsHBoxForPrint\">\r\n                        <span key=\"tskey44\" className=\"tsInvoiceViewDispField\">Invoice Number</span>\r\n                        <span key=\"tskey45\" className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType)}</span>\r\n                    </div>\r\n                    <div key=\"tskey6\" className=\"tsHBoxForPrint\">\r\n                        <span key=\"tskey7\" className=\"tsInvoiceViewDispField\">Invoice Date</span>\r\n                        <span key=\"tskey8\" className=\"tsInvoiceViewValField\">{tsGetDateFromServerDateForInpField(LObjInvoice.invoiceDate)}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    {LMe.pvtGetCustomerFields(LObjInvoice.customerData)}\r\n                    {/* Seperator */}\r\n                    <div key=\"tskey9\" className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Payment Mode</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.mode}</span>\r\n                    </div>\r\n                    <div key=\"tskey10\" className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Credited Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.creditedAmount}</span>\r\n                    </div>\r\n                    <div key=\"tskey14\" className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Remark</span>\r\n                        <span className=\"tsInvoiceViewValField\"> {LObjInvoice.remark}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    <div key=\"tskey15\" className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Products</span>\r\n                        <span className=\"tsInvoiceViewValField flex1\" style={{ width: 540 }}>\r\n                            {/* {JSON.stringify(LObjInvoice.products)} */}\r\n                            <TProductSelectionCntr\r\n                                PInvoiceType={LObjInvoice.invoiceType}\r\n                                SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                                }}\r\n\r\n                                SetProducts={(p_arrProducts) => {\r\n\r\n                                    LMe.setState({ SProducts: p_arrProducts || [] })\r\n                                }}\r\n\r\n                                //This will load the products according to product arrays\r\n                                PProductsArr={LObjInvoice.products}\r\n\r\n                                //Set ReadOnlyMode\r\n                                PIsReadOnlyMode={true}\r\n                            />\r\n\r\n                        </span>\r\n                    </div>\r\n                    <div key=\"tskey13\" className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">SGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n                    <div key=\"tskey16\" className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">CGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">IGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetIGSTAmount(LMe.state.SProducts, LObjInvoice.grandTotal)}</span>\r\n                    </div>\r\n\r\n                    <div key=\"tskey17\" className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Total Inovice Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.grandTotal}</span>\r\n                    </div>\r\n                    <div key=\"tskey18\" className=\"tsInvoiceViewBorder\"></div>\r\n                </div>\r\n                {LMe.pvtLoadDialog()}\r\n\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Button, Paper, TextField } from '@material-ui/core'\r\nimport React, { Component } from 'react'\r\nimport { GenConstants } from '../tsclsGenConstants';\r\nimport { cloneVar, tsGetDefaultFromDate, tsGetDefaultToDate } from '../tsclsGenUtils';\r\nimport TInvoiceType from './tscmpInvoiceType';\r\n\r\nclass cmpFilters extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            fromDate: tsGetDefaultFromDate(),\r\n            toDate: tsGetDefaultToDate(),\r\n            SInvoiceType: GenConstants().PESTICIDE_ACT_CODE\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        var LMe = this;\r\n        LMe.props.onFilterApplied(cloneVar(LMe.state))\r\n    }\r\n\r\n    pvtGetInvoiceTypeContainer() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PCanAddShowInvoiceType === false) {\r\n\r\n            return;\r\n        }\r\n\r\n        return <div style={{ margin: '45px 0 0 20px' }}>\r\n            <TInvoiceType\r\n                Value={LMe.state.SInvoiceType}\r\n                OnChange={p_value => LMe.setState({ SInvoiceType: p_value })}\r\n                CanAddPsudoNode={LMe.props.PCanAddPsudoNodeInInvoiceType || false}\r\n            >\r\n            </TInvoiceType>\r\n        </div>;\r\n    }\r\n\r\n    render() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                {LMe.pvtGetInvoiceTypeContainer()}\r\n\r\n                <TextField\r\n                    label={'From Date'}\r\n                    type=\"date\"\r\n                    margin=\"dense\"\r\n                    style={{ margin: '29px 0 0 20px' }}\r\n                    value={LMe.state.fromDate}\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                    required={true}\r\n                    onChange={(e) => {\r\n\r\n                        LMe.setState({ fromDate: e.currentTarget.value })\r\n                    }}\r\n                />\r\n\r\n                <TextField\r\n                    label={'To Date'}\r\n                    type=\"date\"\r\n                    margin=\"dense\"\r\n                    style={{ margin: '29px 0 0 20px' }}\r\n                    value={LMe.state.toDate}\r\n                    InputLabelProps={{\r\n                        shrink: true\r\n                    }}\r\n                    required={true}\r\n                    onChange={(e) => {\r\n\r\n                        LMe.setState({ toDate: e.currentTarget.value })\r\n                    }}\r\n                />\r\n                <Button\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation\r\n                    style={{ margin: '40px 0 30px 30px' }}\r\n                    onClick={() => {\r\n                        LMe.props.onFilterApplied(cloneVar(LMe.state))\r\n                    }}\r\n                >\r\n                    Generate\r\n                </Button>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default cmpFilters;","import React, { Component } from 'react';\r\n\r\nimport { } from '@material-ui/core';\r\nimport {\r\n    ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip,\r\n    // Legend, LineChart, Line\r\n    AreaChart, Area\r\n} from 'recharts';\r\n\r\nimport theme from '../theme';\r\n\r\n\r\n//Both Graphs are working in state,\r\n//Todo P2: Allow user to choose Graphs \"LineChart\" or \"AreaChar\"\r\n\r\nclass tscmpChart extends Component {\r\n    /**\r\n     * @props: \r\n     *  POnStopLoading: method\r\n     *  PIsLoading: boolean\r\n     *  PLoadingText: text\r\n     *  \r\n     */\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <ResponsiveContainer>\r\n                {/* <LineChart data={LMe.props.PRecords}>\r\n                    <Line type=\"monotone\" dataKey={LMe.props.PChartConfig.lineDataKey} name={LMe.props.PChartConfig.dispName} stroke={theme.palette.primary.main} />\r\n                    <CartesianGrid stroke=\"#ccc\" />\r\n                    <XAxis dataKey={LMe.props.PChartConfig.xAxisDataKey}\r\n                    // stroke={theme.palette.primary.main} \r\n                    />\r\n                    <YAxis\r\n                    // stroke={theme.palette.primary.main} \r\n                    />\r\n                    <Tooltip />\r\n                    <Legend verticalAlign=\"top\" height={36} />\r\n                </LineChart> */}\r\n\r\n                <AreaChart width={730} height={250} data={LMe.props.PRecords}\r\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n                    <defs>\r\n                        <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor={theme.palette.primary.main} stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor={theme.palette.primary.main} stopOpacity={0} />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor={theme.palette.primary.main} stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor={theme.palette.primary.main} stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey={LMe.props.PChartConfig.xAxisDataKey} />\r\n                    <YAxis />\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <Tooltip />\r\n                    <Area type=\"monotone\" dataKey={LMe.props.PChartConfig.lineDataKey} name={LMe.props.PChartConfig.dispName} stroke={theme.palette.primary.main} fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                    <Area type=\"monotone\" stroke={theme.palette.primary.main} fillOpacity={1} fill=\"url(#colorPv)\" />\r\n                </AreaChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tscmpChart;","import React, { Component } from 'react';\r\n\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsclsStatement extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SIsDialogLoading: false,\r\n            IsAlertDialogOpen: false,\r\n            SInvoiceTpl: <></>\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n\r\n        var LMe = this,\r\n            LParams = (LMe.props.match && LMe.props.match.params) || {};\r\n\r\n        LMe.pvtFetchProjectDetails((p_objPrjDetails) => {\r\n\r\n            LMe.pvtFetchPaymentDetails(LParams, (p_arrPaymentRecords) => {\r\n\r\n                LMe.pvtFetchCustomersFields(LParams.cstId, (p_objCustomerData) => {\r\n\r\n                    var LInvoice = {\r\n                        customerData: p_objCustomerData || {},\r\n                        paymentRecords: p_arrPaymentRecords || []\r\n                    };\r\n\r\n                    LMe.pvtLoadTemplate(p_objPrjDetails, LInvoice, LParams);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    pvtLoadTemplate(p_objPrjDetails, p_objInvoice, p_reqParams) {\r\n        /**\r\n         * @method pvtLoadTemplate\r\n         * This method will load the template\r\n         * This will first check for template code in prop other wise load default template\r\n         */\r\n        var LMe = this,\r\n            LTplActionCode = LMe.props.PTplActionCode || p_objPrjDetails.defaultStatement;\r\n\r\n        const TModule = require('./tplStatement/' + (LTplActionCode)).default;\r\n\r\n        LMe.setState({\r\n            SInvoiceTpl: <TModule\r\n                PInvoice={p_objInvoice}\r\n                PProjectData={p_objPrjDetails}\r\n                PReqParam={p_reqParams}\r\n            ></TModule>\r\n        });\r\n    }\r\n\r\n    pvtFetchCustomersFields(p_intCstId, p_callback) {\r\n        /**\r\n         * @method pvtFetchCustomersFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtFetchCustomers(p_intCstId, responseJson, p_callback);\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchCustomers(p_intCstId, p_arrCstFields, p_callback) {\r\n        /**\r\n         * @method pvtFetchCustomers\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LCstId = p_intCstId;\r\n\r\n        if (isEmpty(LCstId) === true) {\r\n            LMe.FWarningText = 'Customer id is mandatory';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        }\r\n\r\n        LUrl = BaseUrl() + 'customers/' + LCstId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }\r\n\r\n                    var LObj = {\r\n                        cstFields: p_arrCstFields,\r\n                        cstFieldValues: responseJson\r\n                    };\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(LObj);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchProjectDetails(p_callback) {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions).then((response) => response.json()).then(\r\n            (responseJson) => {\r\n                if (responseJson.status === false) {\r\n\r\n                    LMe.FWarningText = responseJson.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }//if..\r\n\r\n                if (isEmpty(p_callback) === false) {\r\n\r\n                    p_callback(responseJson);\r\n                }//if..\r\n            },\r\n            (error) => {\r\n                LMe.FWarningText = error.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }\r\n        );\r\n    }\r\n\r\n    pvtFetchPaymentDetails(p_paramObj, p_callback) {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LParamObj = p_paramObj,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/customers';\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return <>\r\n            {LMe.state.SInvoiceTpl}\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                DialogContent={LMe.FWarningText || <></>}\r\n                DialogActions={<></>}\r\n                DialogHeader={'Warning'}\r\n                IsWindow={false}\r\n            />\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default tsclsStatement;","import React, { Component } from 'react';\r\nimport TCustomerSelectionCntr from '../../reusable/tsfrmCustomerSelectionCntr';\r\nimport TProductSelectionCntr from './tsfrmProductSelectionCntr';\r\nimport { Box, Paper, FormControl, Select, MenuItem, InputLabel, TextField, Button, Snackbar } from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { isEmpty, BaseUrl, tsGetPaymentModes, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmInvoice extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            cstId: -1,\r\n            SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            SIsLoading: false,\r\n            IsAlertDialogOpen: false,\r\n            IsSnackOn: false,\r\n            SStrInvoiceNo: ''\r\n        };\r\n\r\n        LMe.FSnackMsg = '';\r\n        LMe.FWarningText = '';\r\n\r\n        LMe.FGridPanel = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isEmpty(LRecord) === true) {\r\n            return;\r\n        }//if..\r\n        // setTimeout(function () {\r\n\r\n        // }, 1000);\r\n        LMe.setState({\r\n            cstId: LRecord.cstId,\r\n            SGrandTotal: LRecord.grandTotal,\r\n            SInvoiceType: LRecord.invoiceType,\r\n            SPayingAmount: LRecord.creditedAmount,\r\n            SPaymentMode: LRecord.mode,\r\n            SRemark: LRecord.remark || '',\r\n            SStrInvoiceNo: LRecord.strInvoiceNo\r\n        });\r\n    }\r\n\r\n    pvtResetAllFields() {\r\n        var LMe = this;\r\n\r\n        LMe.FGridPanel.current.ResetFields();\r\n\r\n        LMe.setState({\r\n            // cstId: -1,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            IsAlertDialogOpen: false,\r\n            SIsLoading: false,\r\n            //Making snack enable\r\n            IsSnackOn: true\r\n        });\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SInvoiceType: p_actCodeInvoiceType,\r\n            SPayingAmount: 0,\r\n            SGrandTotal: 0\r\n        });\r\n    }\r\n\r\n    pvtGetPaymentModeMenuItems() {\r\n        /**\r\n         * @method pvtGetPaymentModeMenuItems\r\n         * This method will return the menu items for payment type\r\n         */\r\n        var //LMe = this,\r\n            LKey,\r\n            LArrComponent = [],\r\n            LArrPaymentModes = tsGetPaymentModes() || [];\r\n\r\n        LArrComponent.push(<MenuItem key={'none-paymentmode-key'} value={''}><em>None</em></MenuItem>);\r\n\r\n        LArrPaymentModes.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            //Remove all spaces\r\n            LKey = p_objRecord.name.replace(/\\s/g, '') + '-key' + p_intIndex;\r\n\r\n            LArrComponent.push(<MenuItem key={LKey} value={p_objRecord.name}>{p_objRecord.name}</MenuItem>);\r\n        });\r\n\r\n        return LArrComponent;\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.cstId) === true || LMe.state.cstId === -1) {\r\n            LMe.FWarningText = 'Select a Customer and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SInvoiceType) === true) {\r\n            LMe.FWarningText = 'Select a Invoice type and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        var LArrProducts = LMe.FGridPanel.current.GetProductJson();\r\n        if (isEmpty(LArrProducts) === true) {\r\n            LMe.FWarningText = 'Add at least one Product to continue.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        // if (LMe.props.PIsOpenInDialog === true) {\r\n        //     return true;\r\n        // }\r\n\r\n        if (isEmpty(LMe.state.SPayingAmount) === true || LMe.state.SPayingAmount === 0) {\r\n            LMe.FWarningText = 'Enter Paying Amount (Credit) and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SPaymentMode) === true) {\r\n            LMe.FWarningText = 'Select Payment mode and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    EditInvoice(p_callBack) {\r\n        /**\r\n         * @public\r\n         */\r\n        var LMe = this;\r\n\r\n        /**\r\n         * Edit invoice will first delete the invoice and create new one with same invoice no\r\n         */\r\n\r\n        //This will always give true \r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n\r\n            LMe.pvtDelete(p_callBack);\r\n        }\r\n    }\r\n\r\n    pvtGenerateBtnClick(p_callBack) {\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'supplierinvoices',\r\n            LArrProducts,\r\n            LRequestOptions,\r\n            LMethod = 'POST',\r\n            LRequestJson = {};\r\n\r\n        // cstId: -1,\r\n        // SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n        // SPayingAmount: 0,\r\n        // SGrandTotal: 0,\r\n        // SPaymentMode: '',\r\n        // SRemark: '',\r\n\r\n        if (LMe.pvtValidate() === false || LMe.state.SIsLoading === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LArrProducts = LMe.FGridPanel.current.GetProductJson();\r\n\r\n        LRequestJson = {\r\n            cstId: LMe.state.cstId,\r\n            products: LArrProducts,\r\n            payingAmount: LMe.state.SPayingAmount,\r\n            grandTotal: LMe.state.SGrandTotal,\r\n            invoiceType: LMe.state.SInvoiceType,\r\n            invoiceDate: (LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceDate) || new Date().toString(),\r\n            mode: LMe.state.SPaymentMode,\r\n            remark: LMe.state.SRemark || '',\r\n            strInvoiceNo: LMe.state.SStrInvoiceNo\r\n        };\r\n\r\n        //Edit mode\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n\r\n            LRequestJson.invoiceNo = LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceNo;\r\n            // LMethod = 'PUT';\r\n            // LUrl = BaseUrl() + 'supplierinvoices/' + LRequestJson.invoiceNo;\r\n            if (isEmpty(LRequestJson.invoiceNo) === true) {\r\n\r\n                LMe.FWarningText = 'Something wents wrong.';\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n                return;\r\n            }\r\n        }\r\n        // console.log(LMe.props.PSelectedRecord);\r\n\r\n        LMe.setState({\r\n            SIsLoading: true\r\n        });\r\n\r\n        LRequestOptions = {\r\n            method: LMethod,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LRequestJson)\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        SIsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        LMe.FWarningText = responseJson.message || 'Error occur on server';\r\n                        LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                        return false;\r\n                    } //if..\r\n\r\n                    LMe.FSnackMsg = 'Invoice created - Invoice No: ' + responseJson.strInvoiceNo;\r\n                    // LMe.setState({IsSnackOn: true});\r\n\r\n                    LMe.pvtResetAllFields();\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        //Callback contain stop loading for edit mode\r\n                        p_callBack();\r\n                    }\r\n\r\n                    // tsPrint(responseJson.invoiceType || LRequestJson.invoiceType, responseJson.invoiceNo)\r\n                },\r\n                (error) => {\r\n                    LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtDelete(p_callBack) {\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        // eslint-disable-next-line no-useless-concat\r\n        LUrl = BaseUrl() + 'supplierinvoices' + '/' + (LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.invoiceNo) + '/' + LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(LMe.props.PSelectedRecord.invoiceNo) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LRequestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify({ cstId: LMe.state.cstId }),\r\n        };\r\n\r\n        // fire command\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtGenerateBtnClick(p_callBack);\r\n\r\n                },\r\n                (error) => {\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({\r\n                        IsAlertDialogOpen: true\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetHeader() {\r\n        /**\r\n         * @method pvtGetHeader\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n            return <></>;\r\n        }\r\n\r\n        return <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n            {/* Module Icon */}\r\n            <div style={{ margin: '20px 6px 0 0' }}>\r\n                <DescriptionIcon />\r\n            </div>\r\n            <div style={{ margin: '18px 6px 0 0' }}>\r\n                {/* Module Title */}\r\n                <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                {/* Module Description */}\r\n                <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                    Take entry of supplier's Invoice.\r\n                </Box>\r\n            </div>\r\n        </Box>;\r\n    }\r\n\r\n    pvtGetSaveBtn() {\r\n        /**\r\n         * @method pvtGetSaveBtn\r\n         * This method will return the save and generate invoice btn, if form is not invoked as a model\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.props.PIsOpenInDialog === true) {\r\n            return <></>;\r\n        }//if..\r\n\r\n        return <Button\r\n            style={{ margin: '0 0 0 0' }}\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={LMe.state.SIsLoading ? '' : <SaveIcon />}\r\n            disableElevation\r\n            onClick={() => { LMe.pvtGenerateBtnClick() }}\r\n        >\r\n            {LMe.state.SIsLoading ? <><CircularProgress size={20} color=\"inherit\" /> <span style={{ margin: '0 0 0 10px' }}>Loading...</span></>\r\n                : 'Generate Invoice'}\r\n        </Button>;\r\n    }\r\n\r\n    pvtGetPaymentFields() {\r\n        var LMe = this;\r\n\r\n        // if (LMe.props.PIsOpenInDialog === true) {\r\n        //     return <></>;\r\n        // }//if..\r\n\r\n        return <>\r\n            <TextField label=\"Credit\" placeholder=\"Amount\" required\r\n                style={{ margin: '3px 0 0 20px', width: '130px' }}\r\n                onChange={(e) => LMe.setState({ SPayingAmount: e.currentTarget.value })}\r\n                value={LMe.state.SPayingAmount}\r\n                margin=\"dense\"\r\n                type=\"number\"\r\n            />\r\n\r\n            <FormControl style={{ margin: '0 0 0 20px', width: '200px' }}>\r\n                <InputLabel>Payment Mode</InputLabel>\r\n                <Select\r\n                    value={LMe.state.SPaymentMode}\r\n                    onChange={(e) => {\r\n                        LMe.setState({ SPaymentMode: e.target.value });\r\n                    }}\r\n                >\r\n                    {LMe.pvtGetPaymentModeMenuItems()}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField label=\"Remark\" placeholder=\"Remark\"\r\n                style={{ margin: '4px 0 0 20px', width: '200px' }}\r\n                onChange={(e) => LMe.setState({ SRemark: e.currentTarget.value })}\r\n                value={LMe.state.SRemark}\r\n                margin=\"dense\"\r\n            // multiline\r\n            />\r\n\r\n        </>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n\r\n                {LMe.pvtGetHeader()}\r\n\r\n                {/* Customer selection and Invoice type */}\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <TCustomerSelectionCntr\r\n                        SetCstId={(p_intCustomerId) => LMe.setState({ cstId: p_intCustomerId })}\r\n\r\n                        //Not setting state here, because it is loading for first time and call componentDidMont method is getting -1 id\r\n                        //This will load the customer for this id\r\n                        cstId={LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.cstId}\r\n                        PFieldLbl={'Select Supplier'}\r\n                    ></TCustomerSelectionCntr>\r\n\r\n                    <div style={{ margin: '5px 0 0 30px' }}>\r\n                        <h4>Invoice Type</h4>\r\n\r\n                        <div style={{ margin: '27px 0 0 0' }}>\r\n                            <TInvoiceType\r\n                                Value={LMe.state.SInvoiceType}\r\n                                OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                                EmptyText={'Invoice Type'}\r\n                            ></TInvoiceType>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TextField label=\"Invoice No\" placeholder=\"Enter Invoice Number\"\r\n                        style={{ margin: '57px 0 0 30px' }}\r\n                        onChange={(e) => LMe.setState({ SStrInvoiceNo: e.currentTarget.value })}\r\n                        value={LMe.state.SStrInvoiceNo}\r\n                        margin=\"dense\"\r\n                        type=\"text\"\r\n                        title=\"Enter Supplier Invoice Number, if not entered then system will autogenerate the invoice number.\"\r\n                    />\r\n                </Paper>\r\n\r\n                <TProductSelectionCntr\r\n                    PInvoiceType={LMe.state.SInvoiceType}\r\n                    ref={LMe.FGridPanel}\r\n                    SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                        //Edit mode\r\n                        if (LMe.props.PIsOpenInDialog === true) {\r\n                            LMe.setState({ SGrandTotal: p_intGrandTotal });\r\n                        }\r\n                        else {\r\n                            LMe.setState({ SGrandTotal: p_intGrandTotal, SPayingAmount: p_intGrandTotal });\r\n                        }\r\n                    }}\r\n\r\n                    //This will load the products according to product arrays\r\n                    PProductsArr={LMe.props.PSelectedRecord && LMe.props.PSelectedRecord.products}\r\n                />\r\n\r\n                <Paper style={{ margin: '20px 20px 20px 20px', padding: '0 20px 20px 20px' }} className=\"tsVBox\" variant=\"outlined\">\r\n                    <h4>Payment Details</h4>\r\n\r\n                    <div className=\"tsHBox\">\r\n                        <TextField label=\"Total Amount\" placeholder=\"Amount\" required\r\n                            style={{ margin: '3px 0 0 0', width: '120px' }}\r\n                            onChange={(e) => LMe.setState({ SGrandTotal: e.currentTarget.value })}\r\n                            value={LMe.state.SGrandTotal}\r\n                            margin=\"dense\"\r\n                            type=\"number\"\r\n                            InputProps={{\r\n                                readOnly: true\r\n                            }}\r\n                        />\r\n\r\n                        {LMe.pvtGetPaymentFields()}\r\n\r\n                        <div className=\"flex1\"></div>\r\n                        {LMe.pvtGetSaveBtn()}\r\n                    </div>\r\n                </Paper>\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoice;","import React, { Component } from 'react';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport {\r\n    tsGetInvoiceDispNameByActionCode, isEmpty, isObjEmpty, tsPrintSupplierInvoice, tsGenerateSupplierInvoicePDF,\r\n    tsGetDateFromServerDateForInpField, tsGetGstAmount, tsGetIGSTAmount\r\n} from '../../tsclsGenUtils';\r\nimport TProductSelectionCntr from './tsfrmProductSelectionCntr';\r\nimport {\r\n    IconButton,\r\n    Tooltip,\r\n    Button\r\n} from '@material-ui/core';\r\nimport TInvoiceDlg from './tsfrmSingleInvoice';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmInvoiceViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SProducts: [],\r\n            SIsDialogOpen: false,\r\n            SIsDialogOpenInReadOnlyMode: true,\r\n            SLoading: false,\r\n            IsAlertDialogOpen: false,\r\n        };\r\n    }\r\n\r\n    pvtGetCustomerFields(p_objCustomerData) {\r\n        /**\r\n         * @method pvtGetCustomerFields\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var p_arrCstFields = p_objCustomerData.cstFields || [];\r\n        var p_objCstValues = p_objCustomerData.cstFieldValues || {};\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {},\r\n            L_funGetBalance = function (p_value) {\r\n                var LValue = p_value;\r\n\r\n                if (LValue > 0) {\r\n\r\n                    return LValue + ' Cr';\r\n                }\r\n                else if (LValue < 0) {\r\n\r\n                    return Math.abs(LValue) + ' Dr';\r\n                }\r\n\r\n                return LValue;\r\n            };\r\n\r\n        LArrColumn = [\r\n            <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                <span className=\"tsInvoiceViewDispField\">Customer Name</span>\r\n                <span className=\"tsInvoiceViewValField\">{p_objCstValues.cstName}</span>\r\n            </div>,\r\n            <>{\r\n                p_objCstValues.cstBalance === 0 ? <></> : <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">Balance</span>\r\n                    <span className=\"tsInvoiceViewValField\">{L_funGetBalance(p_objCstValues.cstBalance)}</span>\r\n                </div>\r\n            }</>,\r\n            <div className=\"tsHBoxForPrint\">\r\n                <span className=\"tsInvoiceViewDispField\">GST No</span>\r\n                <span className=\"tsInvoiceViewValField\">{p_objCstValues.cstGSTNo}</span>\r\n            </div>,\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrCstFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrCstFields = p_arrCstFields || [];\r\n\r\n            p_arrCstFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = <div className=\"tsHBoxForPrint\">\r\n                    <span className=\"tsInvoiceViewDispField\">{p_objRecord.fieldName}</span>\r\n                    <span className=\"tsInvoiceViewValField\">{p_objCstValues[p_objRecord.columnName]}</span>\r\n                </div>;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtPrint() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n\r\n        tsPrintSupplierInvoice(LRecord.invoiceType, LRecord.invoiceNo);\r\n        // var LWindow = window.open('/singleInvoice/' + LRecord.invoiceType + '/' + LRecord.invoiceNo);\r\n\r\n        // LWindow.onload = function () {\r\n\r\n        //     setTimeout(function () {\r\n        //         LWindow.print();\r\n        //     }, 100);\r\n        // }\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        tsGenerateSupplierInvoicePDF(LRecord.invoiceType, LRecord.invoiceNo, function (p_objResponseJson) {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            if (p_objResponseJson.success === false) {\r\n\r\n                LMe.FWarningText = p_objResponseJson.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }//if..\r\n        });\r\n    }\r\n\r\n    pvtHandleOnEditButtonClick() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord;\r\n\r\n        if (isObjEmpty(LRecord) === true) {\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({\r\n            SIsDialogOpen: true,\r\n            SIsDialogOpenInReadOnlyMode: false\r\n        });\r\n    }\r\n\r\n    pvtLoadDialog() {\r\n        /**\r\n         * @method pvtLoadDialog\r\n         * This method will loads the Dialog\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsDialogOpen === false) {\r\n\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsDialogOpen: false })}\r\n            PSelectedRecord={LMe.props.PSelectedRecord}\r\n            PIsReadOnlyMode={LMe.state.SIsDialogOpenInReadOnlyMode}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LObjInvoice = LMe.props.PSelectedRecord || {};\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div\r\n                    className=\"tsHBox\"\r\n                >\r\n                    <div>\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            disableElevation\r\n                            style={{ margin: '7px 0 0 0' }}\r\n                            onClick={() => {\r\n                                LMe.pvtHandleOnEditButtonClick();\r\n                            }}\r\n                            startIcon={<EditIcon />}\r\n                        >\r\n                            Edit Invoice\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"flex1\"> </div>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Generate PDF\"\r\n                        onClick={() => LMe.pvtGeneratePDF()}\r\n                        color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Generate PDF\">\r\n                            <PictureAsPdfIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <div>\r\n                        <IconButton\r\n                            onClick={() => LMe.pvtPrint()}\r\n                        >\r\n                            <Tooltip title=\"Print\">\r\n                                <PrintIcon />\r\n                            </Tooltip>\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"tsVBox\">\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        {isEmpty(LObjInvoice.invoiceType) === false ? <><span className=\"tsInvoiceViewDispField\">Invoice Type</span>\r\n                            <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNameByActionCode(LObjInvoice.invoiceType)}</span></> : <></>}\r\n                    </div>\r\n                    {/* <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Number</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetInvoiceDispNoByInvoiceNo(LObjInvoice.invoiceNo, LObjInvoice.invoiceType, 1)}</span>\r\n                    </div> */}\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Supplier's Invoice Number</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.strInvoiceNo}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Invoice Date</span>\r\n                        <span className=\"tsInvoiceViewValField\">{tsGetDateFromServerDateForInpField(LObjInvoice.invoiceDate)}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    {LMe.pvtGetCustomerFields(LObjInvoice.customerData)}\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Payment Mode</span>\r\n                        <span className=\"tsInvoiceViewValField\">{LObjInvoice.mode}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Credited Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.creditedAmount}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Remark</span>\r\n                        <span className=\"tsInvoiceViewValField\"> {LObjInvoice.remark}</span>\r\n                    </div>\r\n                    {/* Seperator */}\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">Products</span>\r\n                        <span className=\"tsInvoiceViewValField flex1\" style={{ width: 540 }}>\r\n                            {/* {JSON.stringify(LObjInvoice.products)} */}\r\n                            <TProductSelectionCntr\r\n                                PInvoiceType={LObjInvoice.invoiceType}\r\n                                SetGrandTotal={(p_intGrandTotal) => {\r\n\r\n                                }}\r\n\r\n                                SetProducts={(p_arrProducts) => {\r\n\r\n                                    LMe.setState({ SProducts: p_arrProducts || [] })\r\n                                }}\r\n\r\n                                //This will load the products according to product arrays\r\n                                PProductsArr={LObjInvoice.products}\r\n\r\n                                //Set ReadOnlyMode\r\n                                PIsReadOnlyMode={true}\r\n                            />\r\n\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint tsInvoiceViewBorder\">\r\n                        <span className=\"tsInvoiceViewDispField\">SGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">CGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetGstAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">IGST Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {tsGetIGSTAmount(LMe.state.SProducts, LObjInvoice.grandTotal, 'costPrice')}</span>\r\n                    </div>\r\n                    <div className=\"tsHBoxForPrint\">\r\n                        <span className=\"tsInvoiceViewDispField\">Total Inovice Amount</span>\r\n                        <span className=\"tsInvoiceViewValField\">Rs. {LObjInvoice.grandTotal}</span>\r\n                    </div>\r\n                    <div className=\"tsInvoiceViewBorder\"></div>\r\n                </div>\r\n                {LMe.pvtLoadDialog()}\r\n\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoiceViewer;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    FormControl, InputLabel, Select, MenuItem\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId,\r\n    tsGetTaxTypes\r\n} from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsdlgProducts extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  ProductRecord\r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            ShowPassword: false,\r\n            IsLoading: false,\r\n\r\n            IsAlertDialogOpen: false,\r\n            AlertDialog: {\r\n                AlertDialogContent: <></>,\r\n                AlertDialogHeader: 'Warning'\r\n            },\r\n\r\n            SFields: []\r\n        };\r\n\r\n        LMe.FIsInvokedFirstTime = GenConstants().PESTICIDE_ACT_CODE;\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtDefineProperties();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /**\r\n         * @method componentDidUpdate\r\n         * \r\n         */\r\n        // var LMe = this;\r\n\r\n        // if (LMe.FIsInvokedFirstTime === true || prevProps.ProductRecord.id !== LMe.props.ProductRecord.id) {\r\n\r\n        //     LMe.pvtDefineProperties();\r\n        //     LMe.FIsInvokedFirstTime = false;\r\n        // }\r\n    }\r\n\r\n    pvtDefineProperties() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.ProductRecord,\r\n            LColumnFields = LMe.props.ColumnFields || [],\r\n            LObj = {},\r\n            LStateFields = [];\r\n\r\n        LColumnFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isField === false) {\r\n\r\n                return true; //continue...\r\n            }\r\n\r\n            LObj = {};\r\n            LObj[p_objRecord.field] = LRecord[p_objRecord.field];\r\n\r\n            LObj['fieldName'] = p_objRecord.field;\r\n            LObj['headerName'] = p_objRecord.headerName;\r\n            LObj['fieldType'] = p_objRecord.fieldType;\r\n            LObj['isRequired'] = p_objRecord.isRequired;\r\n            // LObj['isField'] = p_objRecord.isField;\r\n\r\n            LStateFields.push(LObj);\r\n        });\r\n\r\n        //Upate state here\r\n        LMe.setState({\r\n            SFields: LStateFields\r\n        });\r\n    }\r\n\r\n    pvtResetFields() {\r\n        /**\r\n         * @method pvtResetFields\r\n         * This method will reset all the fields\r\n         */\r\n        var LMe = this;\r\n\r\n        //Reset the variables\r\n        LMe.setState({\r\n            SFields: []\r\n        });\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetGstTypes() {\r\n        /**\r\n         * @method pvtGetGstTypes\r\n         * This method will return the GST types\r\n         */\r\n        var LResult = [],\r\n            LGSTTypes = tsGetTaxTypes();\r\n\r\n        LGSTTypes.forEach((p_objRecord, p_intIndex) => {\r\n            LResult.push(<MenuItem key={p_intIndex + '-gsttypekey'} value={p_objRecord.value}>{p_objRecord.text}</MenuItem>);\r\n        });//for..\r\n\r\n        return LResult;\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LUI = [];\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        LArrFields.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            if (p_objRecord.isField === false) {\r\n\r\n                return true;\r\n            }//if..\r\n\r\n            if (p_objRecord['fieldType'] === GenConstants().FIELD_DATE) {\r\n\r\n                LUI.push(\r\n                    <TextField\r\n                        label={p_objRecord['headerName']}\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        style={{ margin: '20px 0 0 0' }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required={p_objRecord['isRequired']}\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n            else if (p_objRecord['fieldType'] === GenConstants().FIELD_NUMBER) {\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        type=\"number\"\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n            else if (p_objRecord['fieldType'] === GenConstants().GST_FIELD) {\r\n\r\n                //P0 TODO: Create reusable for this GST component\r\n                LUI.push(\r\n                    <FormControl\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        style={{ margin: '15px 0 0 0', width: '200px' }}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                    >\r\n                        <InputLabel>{p_objRecord['headerName']}</InputLabel>\r\n                        <Select\r\n                            value={p_objRecord[p_objRecord.fieldName]}\r\n                            onChange={(e) => {\r\n                                p_objRecord[p_objRecord.fieldName] = e.target.value;\r\n                                LMe.setState({ SFields: LArrFields })\r\n                            }}\r\n                        >\r\n                            {LMe.pvtGetGstTypes()}\r\n                        </Select>\r\n                    </FormControl>\r\n                );\r\n            }\r\n            else {\r\n                LUI.push(\r\n                    <TextField label={p_objRecord['headerName']} placeholder={p_objRecord['headerName']}\r\n                        required={p_objRecord['isRequired']}\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                            p_objRecord[p_objRecord.fieldName] = e.currentTarget.value;\r\n                            LMe.setState({ SFields: LArrFields })\r\n                        }}\r\n                        key={p_objRecord['headerName'].replaceAll(' ', '') + 'key' + p_intIndex}\r\n                        value={p_objRecord[p_objRecord.fieldName]}\r\n                        margin=\"dense\" style={{ margin: '15px 0 0 0' }} />\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Box flex=\"1\" pt={2} display=\"flex\" flexDirection=\"column\" className=\"tsDialogMinWidth\">\r\n                {LUI}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        return (<Button\r\n            onClick={() => { LMe.pvtSaveProduct() }}\r\n            color=\"primary\" variant=\"contained\" size=\"small\" startIcon={<SaveIcon />}>\r\n            Save\r\n        </Button>);\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the user dlg\r\n         */\r\n        var LMe = this,\r\n            LAlertStateObj = {},\r\n            LIsValid = true;\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n\r\n        //Todo - Need to reverse the loop\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord['isRequired'] === true && isEmpty(p_objRecord[p_objRecord.fieldName]) === true) {\r\n\r\n                LIsValid = false;\r\n\r\n                LAlertStateObj = {\r\n                    AlertDialogContent: <span> {p_objRecord['headerName']} is required. </span>,\r\n                    AlertDialogHeader: 'Warning'\r\n                };\r\n            }\r\n        });\r\n\r\n        if (LIsValid === false) {\r\n\r\n            LMe.setState({\r\n                IsAlertDialogOpen: true,\r\n                AlertDialog: LAlertStateObj\r\n            });\r\n        }\r\n\r\n        return LIsValid;\r\n    }\r\n\r\n    pvtSaveProduct() {\r\n        /**\r\n        * @method pvtSaveProduct\r\n        * This function will fire the command and save the user data\r\n        *\r\n        */\r\n        var LMe = this,\r\n            LParamObj = {},\r\n            LArrFieldNames = [],\r\n            LRequestOptions,\r\n            LUrl = BaseUrl() + 'products',\r\n            LIsValid = false,\r\n            LValue,\r\n            LIsEditMode = isEmpty(LMe.props.ProductRecord.id) === false;\r\n\r\n        LIsValid = LMe.pvtValidate();\r\n\r\n        if (LIsValid === false) {\r\n\r\n            return false;\r\n        }//if..\r\n\r\n        var LArrFields = LMe.state.SFields || [];\r\n        LArrFields.forEach(function (p_objRecord) {\r\n\r\n            LValue = p_objRecord[p_objRecord.fieldName];\r\n\r\n            // if (p_objRecord['fieldType'] === GenConstants().GST_FIELD) {\r\n\r\n            //     var LGSTTypes = tsGetTaxTypes();\r\n\r\n            //     LGSTTypes.some((p_objGstRecord, p_intIndex) => {\r\n\r\n            //         if (p_objGstRecord.value === LValue) {\r\n\r\n            //             LValue = p_objGstRecord.value;\r\n\r\n            //             //Setting gst type\r\n            //             LParamObj.gstType = p_objGstRecord.type;\r\n            //             LArrFieldNames.push('gstType');\r\n\r\n            //             return true;//breaking GST loop\r\n            //         }//if..\r\n\r\n            //         return false;//continue\r\n            //     });//for..\r\n\r\n            // }//if..\r\n\r\n            LParamObj[p_objRecord.fieldName] = LValue || '';\r\n\r\n            LArrFieldNames.push(p_objRecord.fieldName);\r\n        });//for..\r\n\r\n        LArrFieldNames.push('invoiceType');\r\n\r\n        LParamObj.fieldsArr = LArrFieldNames;\r\n        LParamObj.invoiceType = LMe.props.InvoiceType;\r\n\r\n        LRequestOptions = {\r\n            method: LIsEditMode === true ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        if (LIsEditMode === true) {\r\n\r\n            LUrl = BaseUrl() + 'products/' + LMe.props.ProductRecord.id;\r\n        }\r\n\r\n        LMe.setState({ IsLoading: true });\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        var LAlertStateObj = {\r\n                            AlertDialogContent: <span> {responseJson.message} </span>,\r\n                            AlertDialogHeader: 'Error',\r\n                        };\r\n\r\n                        LMe.setState({\r\n                            IsAlertDialogOpen: true,\r\n                            AlertDialog: LAlertStateObj,\r\n                        });\r\n\r\n                        return;\r\n                    } //if..\r\n\r\n                    //If Not error\r\n                    LMe.pvtHandleOnClose();\r\n                    LMe.props.UpdateProductStore(responseJson);\r\n\r\n                    if (LIsEditMode === false) {\r\n\r\n                        LMe.pvtResetFields();\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={isEmpty(LMe.props.ProductRecord.id) ? 'New Product' : 'Edit Product'}\r\n                    DialogLoading={LMe.state.IsLoading}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.state.AlertDialog.AlertDialogContent}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={LMe.state.AlertDialog.AlertDialogHeader}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsdlgProducts;","import React, { Component } from 'react';\r\n\r\nimport { BaseUrl, isEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\n\r\nclass tsfrmPaymentInvoice extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SIsDialogLoading: false,\r\n            IsAlertDialogOpen: false,\r\n            SInvoiceTpl: <></>\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n\r\n        var LMe = this,\r\n            LPaymentId = (LMe.props.match && LMe.props.match.params && LMe.props.match.params.invoiceNo);\r\n\r\n        LMe.pvtFetchProjectDetails((p_objPrjDetails) => {\r\n\r\n            LMe.pvtFetchPaymentRecord(LPaymentId, (p_objPaymentRecord) => {\r\n\r\n                LMe.pvtFetchCustomersFields(p_objPaymentRecord.cstId, (p_objCustomerData) => {\r\n\r\n                    var LInvoice = {\r\n                        customerData: p_objCustomerData || {},\r\n                        paymentRecord: p_objPaymentRecord || {}\r\n                    };\r\n\r\n                    LMe.pvtLoadTemplate(p_objPrjDetails, LInvoice);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    pvtLoadTemplate(p_objPrjDetails, p_objInvoice) {\r\n        /**\r\n         * @method pvtLoadTemplate\r\n         * This method will load the template\r\n         * This will first check for template code in prop other wise load default template\r\n         */\r\n        var LMe = this,\r\n            LTplActionCode = LMe.props.PTplActionCode || p_objPrjDetails.defaultPaymentInvoice;\r\n\r\n        const TModule = require('./tplPaymentInvoices/' + (LTplActionCode)).default;\r\n\r\n        LMe.setState({\r\n            SInvoiceTpl: <TModule\r\n                PInvoice={p_objInvoice}\r\n                PProjectData={p_objPrjDetails}\r\n            ></TModule>\r\n        });\r\n    }\r\n\r\n    pvtFetchCustomersFields(p_intCstId, p_callback) {\r\n        /**\r\n         * @method pvtFetchCustomersFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtFetchCustomers(p_intCstId, responseJson, p_callback);\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchCustomers(p_intCstId, p_arrCstFields, p_callback) {\r\n        /**\r\n         * @method pvtFetchCustomers\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LCstId = p_intCstId;\r\n\r\n        if (isEmpty(LCstId) === true) {\r\n            LMe.FWarningText = 'Customer id is mandatory';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        }\r\n\r\n        LUrl = BaseUrl() + 'customers/' + LCstId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }\r\n\r\n                    var LObj = {\r\n                        cstFields: p_arrCstFields,\r\n                        cstFieldValues: responseJson\r\n                    };\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(LObj);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchProjectDetails(p_callback) {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions).then((response) => response.json()).then(\r\n            (responseJson) => {\r\n                if (responseJson.status === false) {\r\n\r\n                    LMe.FWarningText = responseJson.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }//if..\r\n\r\n                if (isEmpty(p_callback) === false) {\r\n\r\n                    p_callback(responseJson);\r\n                }//if..\r\n            },\r\n            (error) => {\r\n                LMe.FWarningText = error.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }\r\n        );\r\n    }\r\n\r\n    pvtFetchPaymentRecord(p_intPaymentId, p_callback) {\r\n        /**\r\n         * @method pvtFetchPaymentRecord\r\n         * This method will fetch the payment record by payment id\r\n         */\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        if (isEmpty(p_intPaymentId) === true) {\r\n\r\n            LMe.FWarningText = 'Payment Invoice Number is mandatory.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        }\r\n\r\n        LUrl = BaseUrl() + 'payments/' + p_intPaymentId;\r\n\r\n        LMe.setState({ SIsDialogLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return <>\r\n            {LMe.state.SInvoiceTpl}\r\n            {/* Warning Dialog */}\r\n            <TDialog\r\n                IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                DialogContent={LMe.FWarningText || <></>}\r\n                DialogActions={<></>}\r\n                DialogHeader={'Warning'}\r\n                IsWindow={false}\r\n            />\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default tsfrmPaymentInvoice;","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TDialog from './reusable/tsclsDialog';\r\n\r\nimport { BaseUrl, IsEmailValid, isEmpty, tsLogin } from './tsclsGenUtils';\r\n// import TProjectComponent from './admin/pkgProjectDetails/tsfrmProjectForm';\r\nimport TUserDialog from './admin/pkgManageUserAccount/tsdlgUser';\r\nimport TLoading from './reusable/tsclsLoading';\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            <Link color=\"inherit\">\r\n                CRM SOFT    \r\n            </Link>\r\n            {' ' + new Date().getFullYear()}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(login.png)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: '100% 100%',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function SignInSide(props) {\r\n    const classes = useStyles(),\r\n        LBtnText = 'Sign in';\r\n\r\n    const [FUsername, setUsername] = useState('');\r\n    const [FPassword, setPassword] = useState('');\r\n\r\n    const [FIsAlertDialogOpen, setOpenAlertDlg] = useState(false);\r\n    const [FWarningText, setWarningText] = useState('');\r\n\r\n    const [FButtonText, setButttonText] = useState(LBtnText);\r\n\r\n    const [SIsDialogOpen, isDialogOpen] = useState(false);\r\n\r\n    const [SIsForgotPasswordMode, isForgotPasswordMode] = useState(false);\r\n\r\n    const [SLoading, setLoading] = useState(false);\r\n\r\n    const [IsSnackOn, setSnackStatus] = useState(false);\r\n\r\n    function pvtOnSuccess(p_username, p_password, p_responseJson) {\r\n\r\n        tsLogin(p_username, p_password, p_responseJson);\r\n        //Login successfull\r\n        props.history.push('/');\r\n    }\r\n\r\n    function pvtForgotPassword() {\r\n        if (isEmpty(FUsername) === true) {\r\n\r\n            setWarningText('Email must be entered.');\r\n            setOpenAlertDlg(true);\r\n            return;\r\n        }//if..\r\n\r\n        if (IsEmailValid(FUsername) === false) {\r\n\r\n            setWarningText('Entered Email is invalid.');\r\n            setOpenAlertDlg(true);\r\n            return;\r\n        }//if..\r\n\r\n        setLoading(true);\r\n\r\n        var LUrl = BaseUrl() + 'logincmd/forgotpassword';\r\n\r\n        var LParamObj = {\r\n            email: FUsername\r\n        };\r\n\r\n        var LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.success === false) {\r\n\r\n                        setWarningText(responseJson.message);\r\n                        setOpenAlertDlg(true);\r\n                        setLoading(false);\r\n                        return;\r\n                    }\r\n\r\n                    setSnackStatus(true);\r\n                    setLoading(false);\r\n                    isForgotPasswordMode(false);\r\n                },\r\n                (error) => {\r\n\r\n                    setWarningText(error.message);\r\n                    setOpenAlertDlg(true);\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    function pvtLogin() {\r\n        /**\r\n         * @method pvtLogin\r\n         * This method will validate and fire command for login\r\n         */\r\n\r\n        if (isEmpty(FUsername) === true) {\r\n\r\n            setWarningText('Email must be entered.');\r\n            setOpenAlertDlg(true);\r\n            return;\r\n        }//if..\r\n\r\n        if (isEmpty(FPassword) === true) {\r\n\r\n            setWarningText('Password must be entered.');\r\n            setOpenAlertDlg(true);\r\n            return;\r\n        }//if..\r\n\r\n        var LUrl = BaseUrl() + 'logincmd';\r\n\r\n        var LParamObj = {\r\n            username: FUsername,\r\n            password: FPassword\r\n        };\r\n\r\n        var LRequestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        setButttonText('Signing in, please wait...');\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n\r\n                        setWarningText(responseJson.message);\r\n                        setOpenAlertDlg(true);\r\n\r\n                        setButttonText(LBtnText);\r\n                        return;\r\n                    }\r\n\r\n                    pvtOnSuccess(FUsername, FPassword, responseJson);\r\n                },\r\n                (error) => {\r\n\r\n                    setButttonText(LBtnText);\r\n                    setWarningText(error.message);\r\n                    setOpenAlertDlg(true);\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline />\r\n                <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign in\r\n                        </Typography>\r\n                        <form className={classes.form} noValidate>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Email\"\r\n                                name=\"username\"\r\n                                autoComplete=\"Email\"\r\n                                autoFocus\r\n                                value={FUsername}\r\n                                onChange={(e) => { setUsername(e.currentTarget.value) }}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={FPassword}\r\n                                onChange={(e) => { setPassword(e.currentTarget.value) }}\r\n                                style={{ display: SIsForgotPasswordMode ? 'none' : '' }}\r\n                            />\r\n                            {/* <FormControlLabel\r\n                                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                label=\"Remember me\"\r\n                            /> */}\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                                onClick={() => pvtLogin()}\r\n                                disabled={FButtonText === LBtnText ? false : true}\r\n                                style={{ display: SIsForgotPasswordMode ? 'none' : '' }}\r\n                            >\r\n                                {FButtonText}\r\n                            </Button>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                                onClick={() => pvtForgotPassword()}\r\n                                style={{ display: SIsForgotPasswordMode === false ? 'none' : '' }}\r\n                            >\r\n                                Send Login Credentials to your Email\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <Link variant=\"body2\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                        isForgotPasswordMode(!SIsForgotPasswordMode)\r\n                                    }}>\r\n                                        {SIsForgotPasswordMode === false ? 'Forgot password?' : 'Login'}\r\n                                    </Link>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Link variant=\"body2\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                        isDialogOpen(true)\r\n                                    }}>\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Box mt={5}>\r\n                                <Copyright />\r\n                            </Box>\r\n                        </form>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <TDialog\r\n                IsDialogOpen={FIsAlertDialogOpen}\r\n                OnDialogClose={() => setOpenAlertDlg(false)}\r\n                DialogContent={FWarningText || ''}\r\n                DialogActions={<></>}\r\n                DialogHeader={'Warning'}\r\n                IsWindow={false}\r\n            />\r\n\r\n            {/* Window */}\r\n            {/* <TDialog\r\n                IsDialogOpen={SIsDialogOpen}\r\n                OnDialogClose={() => isDialogOpen(false)}\r\n                DialogContent={<></>}\r\n                // DialogActions={LMe.pvtGetDialogAction()}\r\n                DialogHeader={'Sign Up'}\r\n                DialogLoading={false}\r\n                IsWindow={true}\r\n            /> */}\r\n            <TUserDialog\r\n                IsDialogOpen={SIsDialogOpen}\r\n                OnDialogClose={() => isDialogOpen(false)}\r\n                UpdateUserStore={(p_objUser) => { }}\r\n                UserRecord={{}}\r\n                PIsSignUpForm={true}\r\n                PHandleOnSignUp={pvtOnSuccess}\r\n            />\r\n\r\n            <TLoading\r\n                PLoadingText={'Sending Login Credentials on your Email...'}\r\n                PIsLoading={SLoading}\r\n            />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                open={IsSnackOn}\r\n                onClose={() => setSnackStatus(false)}\r\n                message={'Login credentials has been sent on your email.'}\r\n                key={'verticalhorizontalSnack'}\r\n                variant=\"success\"\r\n            />\r\n        </>\r\n    );\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box, Paper, FormControl, InputLabel, Select, MenuItem, TextField, Button\r\n} from '@material-ui/core';\r\n\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport {\r\n    tsGetDefaultFromDate, tsGetDefaultToDate, isEmpty, BaseUrl, tsGetProjectId, isObjEmpty\r\n} from '../../tsclsGenUtils';\r\n\r\nimport TGSTUtils from './clsGSTUtils';\r\n\r\nclass frmGSTR1 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SActiveGSTTab: GenConstants().GSTR1,\r\n            IsAlertDialogOpen: false,\r\n            FetchedData: [],\r\n            SColumnData: []\r\n        };\r\n\r\n        LMe.FWarningText = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultValuesInFilter();\r\n\r\n        setTimeout(() => {\r\n            LMe.pvtGenerateReport();\r\n        }, 100);\r\n    }\r\n\r\n    pvtSetDefaultValuesInFilter() {\r\n        /**\r\n         * @method pvtSetDefaultValuesInFilter\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            SToDate: tsGetDefaultToDate(),\r\n            SFromDate: tsGetDefaultFromDate()\r\n        });\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * Validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.SActiveGSTTab) === true) {\r\n\r\n            LMe.FWarningText = 'Select GST and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SFromDate) === true) {\r\n            LMe.FWarningText = 'Enter from date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SToDate) === true) {\r\n            LMe.FWarningText = 'Enter to date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        var LFromDate = new Date(LMe.state.SFromDate),\r\n            LToDate = new Date(LMe.state.SToDate);\r\n\r\n        if (LFromDate > LToDate) {\r\n            LMe.FWarningText = 'From date must be less than than To date.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    pvtLoadData(p_arrResponseJson) {\r\n        /**\r\n         * @method pvtLoadData\r\n         * This method will load data to datagrid\r\n         */\r\n        var LMe = this,\r\n            LStateObj = {};\r\n\r\n        p_arrResponseJson = p_arrResponseJson || [];\r\n\r\n        //Creating instance of GSTUtils of not created\r\n        if (isObjEmpty(LMe.FGSTUtils) === true) {\r\n\r\n            LMe.FGSTUtils = new TGSTUtils();\r\n        }//if..\r\n\r\n        switch (LMe.state.SActiveGSTTab) {\r\n\r\n            case GenConstants().GSTR1:\r\n\r\n                LStateObj.SColumnData = LMe.FGSTUtils.GetGSTR1Columns();\r\n                LStateObj.FetchedData = p_arrResponseJson;\r\n                break;\r\n\r\n            case GenConstants().B2CS:\r\n\r\n                LStateObj.SColumnData = LMe.FGSTUtils.GetB2CSColumns();\r\n                LStateObj.FetchedData = p_arrResponseJson;\r\n                break;\r\n\r\n            case GenConstants().B2CL:\r\n\r\n                LStateObj.SColumnData = LMe.FGSTUtils.GetB2CLColumns();\r\n                LStateObj.FetchedData = p_arrResponseJson;\r\n                break;\r\n\r\n            case GenConstants().B2B:\r\n\r\n                LStateObj.SColumnData = LMe.FGSTUtils.GetB2BColumns();\r\n                LStateObj.FetchedData = p_arrResponseJson;\r\n                break;\r\n\r\n            case GenConstants().HSN:\r\n\r\n                LStateObj.SColumnData = LMe.FGSTUtils.GetHSNColumns();\r\n                LStateObj.FetchedData = p_arrResponseJson;\r\n                break;\r\n\r\n            default:\r\n                LStateObj.SColumnData = [];\r\n                LStateObj.FetchedData = [];\r\n        }//switch..\r\n\r\n        LMe.setState(LStateObj);\r\n    }\r\n\r\n    pvtGenerateReport() {\r\n        /**\r\n         * @method pvtGenerateReport\r\n         * This method will generate report\r\n         *\r\n         * @param: Nothing\r\n         * @returns: Nothing\r\n         */\r\n\r\n        var LMe = this;\r\n\r\n        //Validating the filters\r\n        if (LMe.pvtValidate() === false) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        var LParamObj = {\r\n            fromDate: LMe.state.SFromDate,\r\n            toDate: LMe.state.SToDate,\r\n            gstType: LMe.state.SActiveGSTTab\r\n        };\r\n\r\n        var LUrl = BaseUrl() + 'gstreports';\r\n\r\n        var LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (responseJson.success === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n\r\n                        LMe.pvtLoadData([]);\r\n                        return false;\r\n                    }//if..\r\n\r\n                    LMe.pvtLoadData(responseJson);\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return false;\r\n                }\r\n            );\r\n    }\r\n\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <EventNoteIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} Report</div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            GSTR-1 is a sales return that is required to be filed by every GST registered person.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <div className=\"\" style={{ margin: '0 30px' }}>\r\n                    <Paper style={{ padding: 20 }} className=\"tsHBox\" variant=\"outlined\">\r\n                        <FormControl style={{ width: 200 }}>\r\n                            <InputLabel>{'GSTR-1'}</InputLabel>\r\n                            <Select\r\n                                value={LMe.state.SActiveGSTTab}\r\n                                onChange={(e) => {\r\n\r\n                                    // LMe.pvtHandleOnChange(e.target.value);\r\n                                    LMe.setState({ SActiveGSTTab: e.target.value });\r\n                                }}\r\n                            >\r\n                                <MenuItem key={GenConstants().GSTR1 + '-key'} value={GenConstants().GSTR1}>{GenConstants().GSTR1}</MenuItem>\r\n                                <MenuItem key={GenConstants().B2B + '-key'} value={GenConstants().B2B}>{GenConstants().B2B}</MenuItem>\r\n                                <MenuItem key={GenConstants().B2CL + '-key'} value={GenConstants().B2CL}>{GenConstants().B2CL}</MenuItem>\r\n                                <MenuItem key={GenConstants().B2CS + '-key'} value={GenConstants().B2CS}>{GenConstants().B2CS}</MenuItem>\r\n                                {/* <MenuItem key={GenConstants().CDNR + '-key'} value={GenConstants().CDNR}>{GenConstants().CDNR}</MenuItem>\r\n                                <MenuItem key={GenConstants().CDNUR + '-key'} value={GenConstants().CDNUR}>{GenConstants().CDNUR}</MenuItem>\r\n                                <MenuItem key={GenConstants().EXP + '-key'} value={GenConstants().EXP}>{GenConstants().EXP}</MenuItem> */}\r\n                                <MenuItem key={GenConstants().HSN + '-key'} value={GenConstants().HSN}>{GenConstants().HSN}</MenuItem>\r\n                                {/* <MenuItem key={GenConstants().ITEM_WISE_SALE + '-key'} value={GenConstants().ITEM_WISE_SALE}>{GenConstants().ITEM_WISE_SALE}</MenuItem>\r\n                                <MenuItem key={GenConstants().ITEM_WISE_SALE_RETURN + '-key'} value={GenConstants().ITEM_WISE_SALE_RETURN}>{GenConstants().ITEM_WISE_SALE_RETURN}</MenuItem>\r\n                                <MenuItem key={GenConstants().ITEM_SUMMARY + '-key'} value={GenConstants().ITEM_SUMMARY}>{GenConstants().ITEM_SUMMARY}</MenuItem> */}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label={'From Date'}\r\n                            type=\"date\"\r\n                            margin=\"dense\"\r\n                            style={{ margin: '2px 0 0 20px' }}\r\n                            value={LMe.state.SFromDate}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            required={true}\r\n                            onChange={(e) => {\r\n\r\n                                LMe.setState({ SFromDate: e.currentTarget.value })\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label={'To Date'}\r\n                            type=\"date\"\r\n                            margin=\"dense\"\r\n                            style={{ margin: '2px 0 0 20px' }}\r\n                            value={LMe.state.SToDate}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            required={true}\r\n                            onChange={(e) => {\r\n\r\n                                LMe.setState({ SToDate: e.currentTarget.value })\r\n                            }}\r\n                        />\r\n                        <div><Button\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disableElevation\r\n                            style={{ margin: '15px 0 0 30px' }}\r\n                            onClick={() => {\r\n                                LMe.pvtGenerateReport()\r\n                            }}\r\n                        >\r\n                            Generate Report\r\n                        </Button></div>\r\n                    </Paper>\r\n                </div>\r\n                <div\r\n                    style={{ margin: '5px 30px' }}\r\n                    className=\"flex1 tsVBox\"\r\n                >\r\n                    <DataGrid\r\n                        columns={LMe.state.SColumnData || []}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        ref={LMe.FGridRef}\r\n                        pagination\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) => {\r\n                            // LMe.pvtHandleOnRowDoubleClick(params.row)\r\n                        }}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        hideFooter\r\n                        onRowClick={(e) => {\r\n                            // LMe.pvtHandleOnRowClick(e.row)\r\n                        }}\r\n                    />\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default frmGSTR1;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Toolbar,\r\n    IconButton,\r\n    Button,\r\n    Tooltip,\r\n    Paper,\r\n    TextField,\r\n    Link\r\n} from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsPrint, tsGenerateInvoicePDF,\r\n    tsGetDateFromServerDateForInpField, tsGetInvoiceDispNoByInvoiceNo, tsGetDefaultFromDate, tsGetDefaultToDate, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport RestorePageIcon from '@material-ui/icons/RestorePage';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoiceDlg from './tsfrmSingleInvoice';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\n\r\nclass tsfrmInvoicesShell extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: null,\r\n            SInvoiceType: GenConstants().PESTICIDE_ACT_CODE,\r\n            SIsDialogOpen: false,\r\n            IsAlertDialogOpen: false,\r\n            SIsDialogOpenInReadOnlyMode: true,\r\n            IsCnfrmDialogOpen: false,\r\n            SLoading: false,\r\n            fromDate: '',\r\n            toDate: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultFromDateAndToDate();\r\n\r\n        setTimeout(() => {\r\n            LMe.pvtFetchInvoices();\r\n        }, 100);\r\n    }\r\n\r\n    pvtSetDefaultFromDateAndToDate() {\r\n        /**\r\n         * @method pvtSetDefaultFromDateAndToDate\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            toDate: tsGetDefaultToDate(),\r\n            fromDate: tsGetDefaultFromDate()\r\n        });\r\n    }\r\n\r\n    pvtRefresh() {\r\n        /**\r\n         * @method pvtRefresh\r\n         * This function will refresh the grid\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({\r\n            FetchedData: null,\r\n        });\r\n\r\n        LMe.pvtFetchInvoices();\r\n    }\r\n\r\n    pvtFetchInvoices(p_strInvoiceType) {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'invoices';\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'invoices/type/' + p_strInvoiceType;\r\n        }//if..\r\n\r\n        var LParamObj = {\r\n            fromDate: LMe.state.fromDate,\r\n            toDate: LMe.state.toDate,\r\n            invoiceType: p_strInvoiceType\r\n        };\r\n\r\n        if (isEmpty(LParamObj.fromDate) === true || isEmpty(LParamObj.toDate) === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        var LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({\r\n                        FetchedData: responseJson\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n        LMe.FSelectedRecord = null;\r\n        // LMe.pvtFetchInvoices(p_actCodeInvoiceType);\r\n    }\r\n\r\n    pvtLoadDialog() {\r\n        /**\r\n         * @method pvtLoadDialog\r\n         * This method will loads the Dialog\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsDialogOpen === false) {\r\n\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsDialogOpen: false })}\r\n            PSelectedRecord={LMe.FSelectedRecord}\r\n            PIsReadOnlyMode={LMe.state.SIsDialogOpenInReadOnlyMode}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    pvtOpenInvoice(p_boolIsReadOnlyMode) {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({\r\n            SIsDialogOpen: true,\r\n            SIsDialogOpenInReadOnlyMode: p_boolIsReadOnlyMode\r\n        });\r\n    }\r\n\r\n    pvtHandleOnEditButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.pvtOpenInvoice(false);\r\n    }\r\n\r\n    pvtHandleOnViewInvoice() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.pvtOpenInvoice(true);\r\n    }\r\n\r\n    pvtPrint() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n\r\n        tsPrint(LMe.FSelectedRecord.invoiceType, LMe.FSelectedRecord.invoiceNo);\r\n        // var LWindow = window.open('/singleInvoice/' + LMe.FSelectedRecord.invoiceType + '/' + LMe.FSelectedRecord.invoiceNo);\r\n\r\n        // LWindow.onload = function () {\r\n\r\n        //     setTimeout(function () {\r\n        //         LWindow.print();\r\n        //     }, 100);\r\n        // }\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        tsGenerateInvoicePDF(LMe.FSelectedRecord.invoiceType, LMe.FSelectedRecord.invoiceNo, function (p_objResponseJson) {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            if (p_objResponseJson.success === false) {\r\n\r\n                LMe.FWarningText = p_objResponseJson.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }//if..\r\n        });\r\n    }\r\n\r\n    pvtHandleOnDeleteButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.FCnfrmText = \"Are you sure want to delete this invoice?\";\r\n\r\n        LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n        LMe.setState({ IsCnfrmDialogOpen: true });\r\n    }\r\n\r\n    pvtDelete() {\r\n        var LMe = this,\r\n            LArrFetchedData,\r\n            LArrResponse = [],\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        // eslint-disable-next-line no-useless-concat\r\n        LUrl = BaseUrl() + 'invoices' + '/' + LMe.FSelectedRecord.invoiceNo + '/' + LMe.FSelectedRecord.invoiceType;\r\n\r\n        LArrFetchedData = LMe.state.FetchedData || [];\r\n        // This will start the loading\r\n        LMe.setState({ FetchedData: [] });\r\n\r\n        LRequestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LMe.FSelectedRecord),\r\n        };\r\n\r\n        // fire command\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n\r\n                        LMe.setState({\r\n                            FetchedData: LArrFetchedData,\r\n                            IsCnfrmDialogOpen: false,\r\n                            IsAlertDialogOpen: true\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n                    LMe.FSelectedRecord = null;\r\n\r\n                    LArrFetchedData.forEach(function (p_objRecord) {\r\n                        //Record if exists\r\n                        if (p_objRecord.invoiceNo === parseInt(responseJson.invoiceNo)) {\r\n                            //remove deleted record\r\n                            return true; //continue\r\n                        } //if..\r\n\r\n                        LArrResponse.push(p_objRecord);\r\n                    }); //forEach...\r\n\r\n                    // Update state.\r\n                    LMe.setState({ FetchedData: LArrResponse, IsCnfrmDialogOpen: false });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                        IsCnfrmDialogOpen: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n        var LMe = this;\r\n        if (p_canShowWarningIcon === true) {\r\n            return (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n\r\n                            if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                                LMe.F_callBackOnCnfrmTrue();\r\n                            }//if..\r\n                        }}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return <></>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <RestorePageIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Here you can see the invoices.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <div style={{ margin: '45px 0 0 20px' }}>\r\n                        <TInvoiceType\r\n                            Value={LMe.state.SInvoiceType}\r\n                            OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                            EmptyText={'Invoice Type'}\r\n                        >\r\n                        </TInvoiceType>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        label={'From Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.fromDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ fromDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        label={'To Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.toDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ toDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n                    {/* <div className=\"flex1\"> </div> */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 30px' }}\r\n                        onClick={() => {\r\n                            LMe.pvtRefresh()\r\n                        }}\r\n                    >\r\n                        Apply Filter\r\n                    </Button>\r\n                </Paper>\r\n\r\n                <Toolbar\r\n                    style={{ margin: '0 0 0 0px' }}\r\n                    component=\"div\"\r\n                    variant=\"dense\"\r\n                >\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtOpenInvoice(true);\r\n                        }}\r\n                    // startIcon={<EditIcon />}\r\n                    >\r\n                        View Invoice\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnEditButtonClick();\r\n                        }}\r\n                        startIcon={<EditIcon />}\r\n                    >\r\n                        Edit Invoice\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnDeleteButtonClick();\r\n                        }}\r\n                        startIcon={<DeleteIcon />}\r\n                    >\r\n                        Delete Invoice\r\n                    </Button>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Refresh\"\r\n                        onClick={() => LMe.pvtRefresh()}\r\n                    >\r\n                        <Tooltip title=\"Refresh\">\r\n                            <RefreshIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <Link className=\"tsBlueLink\" style={{ cursor: 'pointer' }} href=\"#/bill-wise-profit\">\r\n                        Check detailed invoice summary\r\n                    </Link>\r\n\r\n                    {/* <TInvoiceType\r\n                        Value={LMe.state.SInvoiceType}\r\n                        OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                        EmptyText={'Invoice Type'}\r\n                        CanAddPsudoNode={false}\r\n                    ></TInvoiceType> */}\r\n                    <div className=\"flex1\"></div>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Generate PDF\"\r\n                        onClick={() => LMe.pvtGeneratePDF()}\r\n                        color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Generate PDF\">\r\n                            <PictureAsPdfIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Print\"\r\n                        onClick={() => LMe.pvtPrint()}\r\n                    // color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Print\">\r\n                            <PrintIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <div\r\n                    style={{ margin: '5px 20px 20px 20px' }}\r\n                    className=\"flex1\"\r\n                >\r\n                    <DataGrid\r\n                        columns={[\r\n                            {\r\n                                field: 'invoiceDate',\r\n                                headerName: 'Date',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 180,\r\n                                color: 'primary',\r\n                                renderCell: (params) => {\r\n\r\n                                    return tsGetDateFromServerDateForInpField(params.value);\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'invoiceType',\r\n                                headerName: 'Invoice Type',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNameByActionCode(params.value)}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                            {\r\n                                field: 'cstName',\r\n                                headerName: 'Name',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 200,\r\n                                flex: 1,\r\n                                color: 'primary'\r\n                            },\r\n                            {\r\n                                field: 'invoiceNo',\r\n                                headerName: 'Invoice No',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'))}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                        ]}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        ref={LMe.FGridRef}\r\n                        // rowHeight={50}\r\n                        pagination\r\n                        // pageSize={10}\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        // sortModel={LMe.state.SortModel}\r\n                        // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) =>\r\n                            LMe.pvtOpenInvoice(true)\r\n                        }\r\n                        onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                    />\r\n                </div>\r\n                {LMe.pvtLoadDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n                    DialogContent={LMe.FCnfrmText || ''}\r\n                    DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n                    DialogHeader={'Confirm'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoicesShell;\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Paper,\r\n    Button\r\n} from '@material-ui/core';\r\nimport {\r\n    tsGetDefaultFromDate, tsGetDefaultToDate, BaseUrl, tsPaymentPrint,\r\n    isEmpty, tsGetInvoiceDispNameByActionCode, tsGetDateFromServerDateForInpField,\r\n    tsGetInvoiceDispNoByInvoiceNo, tsStatementPrint, tsGenerateStatement, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport TCustomerSelectionCntr from '../../reusable/tsfrmCustomerSelectionCntr';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\nimport TInvoiceDlg from '../pkgInvoice/tsfrmSingleInvoice';\r\nimport TSuplierInvoiceDlg from '../pkgSupplier/tsfrmSingleInvoice';\r\n\r\nclass tsfrmCustomerStatement extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: [],\r\n            cstId: -1,\r\n            fromDate: '',\r\n            toDate: '',\r\n            IsAlertDialogOpen: false,\r\n            SLoading: false,\r\n            SIsInvoiceDlgOpen: false,\r\n            SIsSupplierInvoiceDlgOpen: false\r\n        };\r\n\r\n        LMe.FWarningText = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultFromDateAndToDate();\r\n    }\r\n\r\n    pvtSetDefaultFromDateAndToDate() {\r\n        /**\r\n         * @method pvtSetDefaultFromDateAndToDate\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            toDate: tsGetDefaultToDate(),\r\n            fromDate: tsGetDefaultFromDate()\r\n        });\r\n\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * Validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.cstId) === true || LMe.state.cstId === -1) {\r\n            LMe.FWarningText = 'Select a Customer and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.fromDate) === true) {\r\n            LMe.FWarningText = 'Enter from date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.toDate) === true) {\r\n            LMe.FWarningText = 'Enter to date and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        var LFromDate = new Date(LMe.state.fromDate),\r\n            LToDate = new Date(LMe.state.toDate);\r\n\r\n        if (LFromDate > LToDate) {\r\n            LMe.FWarningText = 'From date must be less than than To date.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n        var LMe = this;\r\n\r\n        if (LMe.pvtValidate() === false) {\r\n\r\n            return;\r\n        }\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        LMe.pvtFetchPaymentDetails(function (p_ParamObj) {\r\n\r\n            tsGenerateStatement(p_ParamObj.cstId, p_ParamObj.fromDate, p_ParamObj.toDate, function (p_objResponseJson) {\r\n\r\n                LMe.setState({ SLoading: false });\r\n\r\n                if (p_objResponseJson.success === false) {\r\n\r\n                    LMe.FWarningText = p_objResponseJson.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                }//if..\r\n            });\r\n        });\r\n    }\r\n\r\n    pvtGenerateReport(p_canPrint) {\r\n        /**\r\n         * @method pvtGenerateReport\r\n         * This function will refresh the grid, generate the customer's report\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.pvtValidate() === false) {\r\n\r\n            return;\r\n        }\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({\r\n            FetchedData: null,\r\n        });\r\n\r\n        LMe.pvtFetchPaymentDetails(function (p_ParamObj) {\r\n\r\n            if (p_canPrint) {\r\n\r\n                tsStatementPrint(p_ParamObj.cstId, p_ParamObj.fromDate, p_ParamObj.toDate);\r\n            }\r\n        });\r\n    }\r\n\r\n    pvtFetchPaymentDetails(p_callBack) {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LParamObj,\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/customers';\r\n\r\n        LParamObj = {\r\n            cstId: LMe.state.cstId,\r\n            fromDate: LMe.state.fromDate,\r\n            toDate: LMe.state.toDate\r\n        };\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({\r\n                        FetchedData: responseJson\r\n                    });\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(LParamObj);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n    }\r\n\r\n    pvtHandleOnRowDblClick(p_objSelectedRecord) {\r\n        var LMe = this;\r\n\r\n        //If payment invoice\r\n        if (isEmpty(p_objSelectedRecord.invoiceNo) === true) {\r\n\r\n            tsPaymentPrint(p_objSelectedRecord.id);\r\n            return;\r\n        }//if..\r\n\r\n        //If supplier/purchaser invoice\r\n        if (p_objSelectedRecord.isPurchaserInvoice === 1) {\r\n\r\n            LMe.setState({ SIsSupplierInvoiceDlgOpen: true });\r\n            return;\r\n        }//if..\r\n\r\n        //If normal invoice\r\n        LMe.setState({ SIsInvoiceDlgOpen: true });\r\n    }\r\n\r\n    pvtGetInvoiceDialog() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsInvoiceDlgOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsInvoiceDlgOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsInvoiceDlgOpen: false })}\r\n            PSelectedRecord={LMe.FSelectedRecord}\r\n            PIsReadOnlyMode={true}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    pvtGetSupplierInvoiceDialog() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsSupplierInvoiceDlgOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return <TSuplierInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsSupplierInvoiceDlgOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsSupplierInvoiceDlgOpen: false })}\r\n            PSelectedRecord={LMe.FSelectedRecord}\r\n            PIsReadOnlyMode={true}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <AssignmentIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Generate the customer's statement. Double click on invoice to view or print invoice.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <div style={{ margin: '13px 0 0 0' }}>\r\n                        <TCustomerSelectionCntr\r\n                            SetCstId={(p_intCustomerId) => LMe.setState({ cstId: p_intCustomerId })}\r\n                            PCanShowHeaderLabel={false}\r\n                        ></TCustomerSelectionCntr>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        label={'From Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 0' }}\r\n                        value={LMe.state.fromDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ fromDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        label={'To Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.toDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ toDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n                    {/* <div className=\"flex1\"> </div> */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 30px' }}\r\n                        onClick={() => {\r\n                            LMe.pvtGenerateReport()\r\n                        }}\r\n                    >\r\n                        Generate\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 10px' }}\r\n                        startIcon={<PrintIcon />}\r\n                        onClick={() => {\r\n                            LMe.pvtGenerateReport(true)\r\n                        }}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n\r\n                    {/* <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 20px 30px 10px' }}\r\n                        startIcon={<PictureAsPdfIcon />}\r\n                        onClick={() => {\r\n                            LMe.pvtGeneratePDF(true)\r\n                        }}\r\n                    >\r\n                        PDF\r\n                    </Button> */}\r\n                </Paper>\r\n                <div\r\n                    style={{ margin: '5px 20px 20px 20px' }}\r\n                    className=\"flex1\"\r\n                >\r\n                    <DataGrid\r\n                        columns={[\r\n                            {\r\n                                field: 'paymentDate',\r\n                                headerName: 'Date',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 180,\r\n                                color: 'primary',\r\n                                sort: 'asc',\r\n                                renderCell: (params) => {\r\n\r\n                                    return tsGetDateFromServerDateForInpField(params.value);\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'invoiceType',\r\n                                headerName: 'Invoice Type',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNameByActionCode(params.value)}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                            {\r\n                                field: 'invoiceNo',\r\n                                headerName: 'Invoice Number',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => {\r\n                                    //If invoiceNo is 0 or null then return the payment Id as its not invoice\r\n                                    var LInvoiceNo = params.value || params.getValue(params.id, 'id');\r\n\r\n                                    return <span>\r\n                                        {tsGetInvoiceDispNoByInvoiceNo(LInvoiceNo, params.getValue(params.id, 'invoiceType'), params.getValue(params.id, 'isPurchaserInvoice'))}\r\n                                    </span>\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'mode',\r\n                                headerName: 'Mode of Payment',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 200,\r\n                            },\r\n                            {\r\n                                field: 'total',\r\n                                headerName: 'Total',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'credit',\r\n                                headerName: 'Credit',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'debit',\r\n                                headerName: 'Debit',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'balance',\r\n                                headerName: 'Balance',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'remark',\r\n                                headerName: 'Remark',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 250,\r\n                                renderCell: (params) => {\r\n                                    var LValue = params.value;\r\n\r\n                                    return <span title={LValue}>{LValue}</span>;\r\n                                },\r\n                            }\r\n                        ]}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        ref={LMe.FGridRef}\r\n                        // rowHeight={50}\r\n                        pagination\r\n                        // pageSize={10}\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        // sortModel={LMe.state.SortModel}\r\n                        // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) =>\r\n                            LMe.pvtHandleOnRowDblClick(params.row)\r\n                        }\r\n                        hideFooter\r\n                        onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                    />\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n\r\n                {LMe.pvtGetInvoiceDialog()}\r\n                {LMe.pvtGetSupplierInvoiceDialog()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmCustomerStatement;\r\n","import React, { Component } from 'react';\r\nimport {\r\n   Box,\r\n   Toolbar,\r\n   Button,\r\n   IconButton,\r\n   Tooltip, Input,\r\n   InputAdornment\r\n} from '@material-ui/core';\r\nimport { BaseUrl, isEmpty, tsGetDisplayTextByTaxType, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TProductDialog from './tsdlgProducts';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { Search } from '@material-ui/icons';\r\n\r\nclass tsfrmProductsGrid extends Component {\r\n   /**\r\n    * @props: moduleInfo,\r\n    * @returns\r\n    */\r\n\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      var LMe = this;\r\n\r\n      LMe.state = {\r\n         FetchedData: null,\r\n         CanInvokeDialogOpen: false,\r\n         ProductRecord: {},\r\n         IsAlertDialogOpen: false,\r\n         IsCnfrmDialogOpen: false,\r\n         ColumnFields: LMe.pvtGetGridColumn(),\r\n         SInvoiceType: ''\r\n      };\r\n\r\n      LMe.FGridRef = React.createRef();\r\n      LMe.FSearchField = React.createRef();\r\n\r\n      LMe.F_callBackOnCnfrmTrue = null;\r\n   }\r\n\r\n   componentDidMount() {\r\n      /**\r\n       * @method componentDidMount\r\n       * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n       * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n       *\r\n       */\r\n      // var LMe = this;\r\n\r\n      // LMe.pvtFetchProductsFields();\r\n   }\r\n\r\n   pvtRefresh() {\r\n      /**\r\n       * @method pvtRefresh\r\n       * This function will refresh the grid\r\n       *\r\n       * @returns: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.pvtFetchProductsFields();\r\n\r\n      LMe.FSelectedRecord = null;\r\n\r\n      LMe.pvtResetSearchField();\r\n\r\n      LMe.setState({\r\n         FetchedData: null,\r\n      });\r\n   }\r\n\r\n   pvtResetSearchField() {\r\n      var LMe = this;\r\n\r\n      if (LMe.FSearchField && LMe.FSearchField.current && LMe.FSearchField.current.firstElementChild) {\r\n\r\n         LMe.FSearchField.current.firstElementChild.value = '';\r\n      }//if..\r\n   }\r\n\r\n   pvtFetchProductsFields(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtFetchProductsFields\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl,\r\n         LInvoiceType = p_actCodeInvoiceType || LMe.state.SInvoiceType;\r\n\r\n      if (isEmpty(LInvoiceType) === true) {\r\n\r\n         return;\r\n      }//if..\r\n\r\n      LUrl = BaseUrl() + 'customFields/type/' + GenConstants().PRODUCT_CSTM_FIELDS + '/' + LInvoiceType;\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }\r\n\r\n               LMe.pvtFetchProducts(responseJson, LInvoiceType);\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtFetchProducts(p_arrFields, p_strInvoiceType) {\r\n      /**\r\n       * @method pvtFetchProducts\r\n       * This function will fetch the list which will visible in side panel\r\n       *\r\n       * @returns: Array of objects of list items with tooltips\r\n       */\r\n      var LMe = this,\r\n         LUrl;\r\n\r\n      LUrl = BaseUrl() + 'products/type/' + p_strInvoiceType;\r\n\r\n      var LRequestOptions = {\r\n         method: 'GET',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         }\r\n      };\r\n\r\n      // No need to check for session\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.status === 'error') {\r\n                  LMe.setState({\r\n                     FetchedData: [],\r\n                  });\r\n                  return;\r\n               }//if..\r\n\r\n               LMe.FAllFetectedRecords = responseJson;\r\n\r\n               LMe.setState({\r\n                  FetchedData: responseJson,\r\n                  ColumnFields: LMe.pvtGetGridColumn(p_arrFields) || [],\r\n               });\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtGetGridColumn(p_arrFields) {\r\n      /**\r\n       * @method pvtGetGridColumn\r\n       * This method will return the grid column json\r\n       */\r\n\r\n      var //LMe = this,\r\n         LArrColumn = [],\r\n         LObj = {};\r\n\r\n      LArrColumn = [\r\n         {\r\n            field: 'productName',\r\n            headerName: 'Name',\r\n            headerClassName: 'tsGridHeader',\r\n            minWidth: 200,\r\n            flex: 1,\r\n            color: 'primary',\r\n            sort: 'asc',\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isRequired: true\r\n         },\r\n         {\r\n            field: 'qty',\r\n            headerName: 'Quantity',\r\n            headerClassName: 'tsGridHeader',\r\n            // flex: 1,\r\n            width: 150,\r\n            color: 'primary',\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isRequired: true,\r\n            isField: false\r\n         },\r\n         {\r\n            field: 'hsn',\r\n            headerName: 'HSN Code',\r\n            headerClassName: 'tsGridHeader',\r\n            // flex: 1,\r\n            width: 150,\r\n            color: 'primary',\r\n            fieldType: GenConstants().SYSTEM_FIELD,\r\n            isRequired: true,\r\n            isField: true\r\n         },\r\n         {\r\n            field: 'gst',\r\n            headerName: 'GST',\r\n            headerClassName: 'tsGridHeader',\r\n            // flex: 1,\r\n            width: 150,\r\n            color: 'primary',\r\n            // fieldType: GenConstants().GST_FIELD,\r\n            fieldType: GenConstants().FIELD_NUMBER,\r\n            isRequired: true,\r\n            isField: true\r\n         },\r\n         {\r\n            field: 'gstType',\r\n            headerName: 'GST Type',\r\n            headerClassName: 'tsGridHeader',\r\n            width: 150,\r\n            color: 'primary',\r\n            fieldType: GenConstants().GST_FIELD,\r\n            isRequired: true,\r\n            isField: true,\r\n            renderCell: (params) => (\r\n               <span>\r\n                  {tsGetDisplayTextByTaxType(params.value)}\r\n               </span>\r\n            ),\r\n         },\r\n      ];\r\n\r\n      //Getting custom fields\r\n      if (isEmpty(p_arrFields) === false) {\r\n\r\n         //Convert it into array\r\n         p_arrFields = p_arrFields || [];\r\n\r\n         p_arrFields.forEach(function (p_objRecord) {\r\n\r\n            if (p_objRecord.isSystemField === true) {\r\n\r\n               return true;\r\n            }//if..\r\n\r\n            LObj = {};\r\n\r\n            LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n            //Setting column name\r\n            LObj['field'] = p_objRecord.columnName;\r\n            LObj['headerClassName'] = 'tsGridHeader';\r\n            LObj['minWidth'] = 200;\r\n\r\n            LObj['fieldType'] = p_objRecord.fieldType;\r\n            LObj['isRequired'] = p_objRecord.isRequired === 1;\r\n\r\n            LArrColumn.push(LObj);\r\n         });\r\n\r\n      }//if..\r\n\r\n      return LArrColumn;\r\n   }\r\n\r\n   pvtLoadDialog() {\r\n      /**\r\n       * @method pvtLoadDialog\r\n       * This method will loads the Dialog\r\n       */\r\n      var LMe = this;\r\n\r\n      if (LMe.state.CanInvokeDialogOpen === true) {\r\n\r\n         return (\r\n            <TProductDialog\r\n               IsDialogOpen={LMe.state.CanInvokeDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ CanInvokeDialogOpen: false })}\r\n               UpdateProductStore={(p_objUser) =>\r\n                  LMe.UpdateProductStore(p_objUser)\r\n               }\r\n               ProductRecord={LMe.state.ProductRecord || {}}\r\n               ColumnFields={LMe.state.ColumnFields || []}\r\n               InvoiceType={LMe.state.SInvoiceType}\r\n            />\r\n         );\r\n      }\r\n\r\n      return (<></>);\r\n   }\r\n\r\n   pvtEditProduct(p_objParam) {\r\n      /**\r\n       * @method pvtEditProduct\r\n       * This method will invoke the dialog for edit mode edit the user\r\n       */\r\n\r\n      if (isEmpty(p_objParam) === true) {\r\n         return;\r\n      } ///if..\r\n\r\n      var LMe = this,\r\n         LRecord = p_objParam;\r\n\r\n      LMe.setState({\r\n         CanInvokeDialogOpen: true,\r\n         ProductRecord: LRecord\r\n      });\r\n   }\r\n\r\n   UpdateProductStore(p_objResponseUser) {\r\n      /**\r\n       * @method UpdateProductStore\r\n       * This method will update store\r\n       *\r\n       * @public\r\n       * @param p_objResponseUser: Response User object\r\n       */\r\n      var LMe = this,\r\n         LArrFetchedData,\r\n         LArrResponse = [],\r\n         LIsNewRecord = true;\r\n\r\n      if (isEmpty(p_objResponseUser) === true) {\r\n         return;\r\n      } //if..\r\n\r\n      LArrFetchedData = LMe.FAllFetectedRecords || [];\r\n\r\n      LArrFetchedData.forEach(function (p_objRecord) {\r\n         //Update Record if exists\r\n         if (p_objRecord.id === p_objResponseUser.id) {\r\n            // p_objResponseUser.id = p_objResponseUser.id;\r\n            LArrResponse.push(p_objResponseUser);\r\n            LIsNewRecord = false;\r\n            return true; //continue\r\n         } //if..\r\n\r\n         LArrResponse.push(p_objRecord);\r\n      }); //forEach...\r\n\r\n      if (LIsNewRecord === true) {\r\n         // p_objResponseUser.id = p_objResponseUser.id;\r\n         LArrResponse.push(p_objResponseUser);\r\n      } //if..\r\n\r\n      LMe.FAllFetectedRecords = LArrResponse;\r\n      // Update state.\r\n      // LMe.setState({ FetchedData: LArrResponse });\r\n      LMe.pvtFilterOnSearch();\r\n   }\r\n\r\n   pvtHandleOnEditButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Product and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.pvtEditProduct(LMe.FSelectedRecord);\r\n   }\r\n\r\n   pvtHandleOnDeleteButtonClick() {\r\n      var LMe = this;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Product and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      LMe.FCnfrmText = \"Are you sure want to delete this product?\";\r\n      LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n      LMe.setState({ IsCnfrmDialogOpen: true });\r\n   }\r\n\r\n   pvtDelete() {\r\n      /**\r\n       *@method pvtDelete\r\n       * This method will delete\r\n       */\r\n      var LMe = this,\r\n         LRequestOptions,\r\n         LArrFetchedData = [],\r\n         LArrResponse = [],\r\n         LUrl;\r\n\r\n      if (isEmpty(LMe.FSelectedRecord) === true) {\r\n         LMe.FWarningText = 'Select a Product and try again.';\r\n         LMe.setState({ IsAlertDialogOpen: true });\r\n         return;\r\n      } //if..\r\n\r\n      // eslint-disable-next-line no-useless-concat\r\n      LUrl = BaseUrl() + 'products' + '/' + LMe.FSelectedRecord.id;\r\n\r\n      LArrFetchedData = LMe.FAllFetectedRecords || [];\r\n      // This will start the loading\r\n      LMe.setState({ FetchedData: [] });\r\n\r\n      LRequestOptions = {\r\n         method: 'DELETE',\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            'projectid': tsGetProjectId()\r\n         },\r\n         body: JSON.stringify({}),\r\n      };\r\n\r\n      // fire command\r\n      fetch(LUrl, LRequestOptions)\r\n         .then((response) => response.json())\r\n         .then(\r\n            (responseJson) => {\r\n               if (responseJson.success === false) {\r\n\r\n                  LMe.FWarningText = responseJson.message;\r\n\r\n                  LMe.setState({\r\n                     FetchedData: LArrFetchedData,\r\n                     IsCnfrmDialogOpen: false,\r\n                     IsAlertDialogOpen: true\r\n                  });\r\n\r\n                  return;\r\n               }\r\n               LMe.FSelectedRecord = null;\r\n\r\n               LArrFetchedData.forEach(function (p_objRecord) {\r\n                  //Record if exists\r\n                  if (p_objRecord.id === responseJson.id) {\r\n                     //remove deleted record\r\n                     return true; //continue\r\n                  } //if..\r\n\r\n                  LArrResponse.push(p_objRecord);\r\n               }); //forEach...\r\n\r\n               LMe.FAllFetectedRecords = LArrResponse;\r\n               // Update state.\r\n               LMe.setState({\r\n                  // FetchedData: LArrResponse,\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n\r\n               LMe.pvtFilterOnSearch();\r\n            },\r\n            (error) => {\r\n               this.setState({\r\n                  FetchedData: [],\r\n                  IsCnfrmDialogOpen: false\r\n               });\r\n            }\r\n         );\r\n   }\r\n\r\n   pvtHandleOnRowClick(p_objSelectedRecord) {\r\n      /**\r\n       * INTENT: This function will set the selected row record as a class level.\r\n       *\r\n       * @param: Selected Record\r\n       * @return: Nothing\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.FSelectedRecord = p_objSelectedRecord;\r\n   }\r\n\r\n   pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n      var LMe = this;\r\n      if (p_canShowWarningIcon === true) {\r\n         return (\r\n            <>\r\n               <Button\r\n                  onClick={() => {\r\n\r\n                     if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                        LMe.F_callBackOnCnfrmTrue();\r\n                     }//if..\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n               >\r\n                  Confirm\r\n               </Button>\r\n            </>\r\n         );\r\n      }\r\n\r\n      return <></>;\r\n   }\r\n\r\n   pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n      /**\r\n       * @method pvtHandleOnInvoiceTypeChange\r\n       * \r\n       * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n       */\r\n      var LMe = this;\r\n\r\n      LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n      LMe.FSelectedRecord = null;\r\n      LMe.pvtResetSearchField();\r\n      LMe.pvtFetchProductsFields(p_actCodeInvoiceType);\r\n   }\r\n\r\n   pvtFilterOnSearch(p_searchText) {\r\n      /**\r\n       * @method pvtFilterOnSearch\r\n       * This method will filter the grid record\r\n       */\r\n      var LMe = this,\r\n         LCustomers = LMe.FAllFetectedRecords || [],\r\n         LCstName;\r\n\r\n      p_searchText = p_searchText || (LMe.FSearchField.current && LMe.FSearchField.current.firstElementChild && LMe.FSearchField.current.firstElementChild.value) || '';\r\n\r\n      if (isEmpty(p_searchText) === true) {\r\n\r\n         LMe.setState({\r\n            FetchedData: LMe.FAllFetectedRecords\r\n         });\r\n         return;\r\n      }//if..\r\n      p_searchText = p_searchText.toLowerCase();\r\n\r\n      var LFilteredRecords = LCustomers.filter((p_objCustomer) => {\r\n\r\n         LCstName = p_objCustomer.productName || '';\r\n         LCstName = LCstName.toLowerCase();\r\n         //partial matches\r\n         return LCstName.includes(p_searchText);\r\n      });\r\n\r\n      LMe.setState({\r\n         FetchedData: LFilteredRecords\r\n      });\r\n   }\r\n\r\n   render() {\r\n      var LMe = this;\r\n\r\n      return (\r\n         <div\r\n            className=\"flex1 tsVBox\"\r\n            style={{\r\n               margin: '10px 0 10px 0',\r\n            }}\r\n         >\r\n            <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n               {/* Module Icon */}\r\n               <div style={{ margin: '20px 6px 0 0' }}>\r\n                  <BallotIcon />\r\n               </div>\r\n               <div style={{ margin: '18px 6px 0 0' }}>\r\n                  {/* Module Title */}\r\n                  <div style={{ fontSize: '20px' }}> Manage Products </div>\r\n\r\n                  {/* Module Description */}\r\n                  <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                     Create new product, edit product details, remove\r\n                     product, etc.\r\n                  </Box>\r\n               </div>\r\n            </Box>\r\n            <Toolbar\r\n               style={{ margin: '0 0 0 0px' }}\r\n               component=\"div\"\r\n               variant=\"dense\"\r\n            >\r\n               <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() =>\r\n                     LMe.setState({\r\n                        CanInvokeDialogOpen: true,\r\n                        ProductRecord: {},\r\n                     })\r\n                  }\r\n               >\r\n                  New Product\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnEditButtonClick();\r\n                  }}\r\n                  startIcon={<EditIcon />}\r\n               >\r\n                  Edit Product\r\n               </Button>\r\n               <Button\r\n                  size=\"small\"\r\n                  style={{ margin: '0 0 0 5px' }}\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  onClick={() => {\r\n                     LMe.pvtHandleOnDeleteButtonClick();\r\n                  }}\r\n                  startIcon={<DeleteIcon />}\r\n               >\r\n                  Delete Product\r\n               </Button>\r\n               <IconButton\r\n                  style={{ margin: '0 5px 0 5px' }}\r\n                  aria-label=\"Refresh\"\r\n                  onClick={() => LMe.pvtRefresh()}\r\n               >\r\n                  <Tooltip title=\"Refresh\">\r\n                     <RefreshIcon />\r\n                  </Tooltip>\r\n               </IconButton>\r\n\r\n               <TInvoiceType\r\n                  Value={LMe.state.SInvoiceType}\r\n                  OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                  EmptyText={'Product Type'}\r\n               ></TInvoiceType>\r\n\r\n               <div className=\"flex1\"></div>\r\n\r\n               <Input label=\"Search\" placeholder=\"Search Products\"\r\n                  onChange={(e) => {\r\n                     LMe.pvtFilterOnSearch(e.currentTarget.value)\r\n                  }}\r\n                  ref={LMe.FSearchField}\r\n                  type=\"text\"\r\n                  margin=\"dense\"\r\n                  style={{ margin: '-1px 0 0 5px' }}\r\n                  endAdornment={\r\n                     <InputAdornment position=\"start\">\r\n                        <Search />\r\n                     </InputAdornment>\r\n                  }\r\n               />\r\n\r\n            </Toolbar>\r\n            <div\r\n               style={{ margin: '5px 20px 20px 20px' }}\r\n               className=\"flex1\"\r\n            >\r\n               <DataGrid\r\n                  columns={LMe.state.ColumnFields}\r\n                  rows={LMe.state.FetchedData || []}\r\n                  ref={LMe.FGridRef}\r\n                  // rowHeight={50}\r\n                  pagination\r\n                  // pageSize={10}\r\n                  csvOptions={{ allColumns: true }}\r\n                  loading={LMe.state.FetchedData === null ? true : false}\r\n                  // sortModel={LMe.state.SortModel}\r\n                  // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                  components={{\r\n                     Toolbar: GridToolbar,\r\n                  }}\r\n                  density={'compact'}\r\n                  onCellDoubleClick={(params) =>\r\n                     LMe.pvtEditProduct(params.row)\r\n                  }\r\n                  onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n               />\r\n            </div>\r\n            {LMe.pvtLoadDialog()}\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n               DialogContent={LMe.FWarningText || ''}\r\n               DialogActions={<></>}\r\n               DialogHeader={'Warning'}\r\n               IsWindow={false}\r\n            />\r\n\r\n            <TDialog\r\n               IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n               OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n               DialogContent={LMe.FCnfrmText || ''}\r\n               DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n               DialogHeader={'Confirm'}\r\n               IsWindow={false}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default tsfrmProductsGrid;\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Toolbar,\r\n    IconButton,\r\n    Tooltip,\r\n    Paper,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsGeneratePaymentInvoice,\r\n    // tsIsInvoiceByType, tsPrint,\r\n    tsGetDateFromServerDateForInpField, tsGetInvoiceDispNoByInvoiceNo, tsPaymentPrint, tsGetDefaultFromDate,\r\n    tsGetDefaultToDate,\r\n    tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\n\r\nclass tsfrmPaymentHistory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: null,\r\n            SInvoiceType: GenConstants().PSUDO_INVOICE_TYPE_ALL,\r\n            IsAlertDialogOpen: false,\r\n            SLoading: false,\r\n            fromDate: '',\r\n            toDate: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultFromDateAndToDate();\r\n\r\n        setTimeout(() => {\r\n\r\n            LMe.pvtFetchPaymentDetails();\r\n        }, 200);\r\n    }\r\n\r\n    pvtSetDefaultFromDateAndToDate() {\r\n        /**\r\n         * @method pvtSetDefaultFromDateAndToDate\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            toDate: tsGetDefaultToDate(),\r\n            fromDate: tsGetDefaultFromDate()\r\n        });\r\n    }\r\n\r\n    pvtRefresh() {\r\n        /**\r\n         * @method pvtRefresh\r\n         * This function will refresh the grid\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({\r\n            FetchedData: null,\r\n        });\r\n\r\n        LMe.pvtFetchPaymentDetails();\r\n    }\r\n\r\n    pvtFetchPaymentDetails(p_strInvoiceType) {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'payments';\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'payments/type/' + p_strInvoiceType;\r\n        }//if..\r\n\r\n        var LParamObj = {\r\n            fromDate: LMe.state.fromDate,\r\n            toDate: LMe.state.toDate,\r\n            invoiceType: p_strInvoiceType\r\n        };\r\n\r\n        if (isEmpty(LParamObj.fromDate) === true || isEmpty(LParamObj.toDate) === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        var LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === true) {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({\r\n                        FetchedData: responseJson\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n        LMe.FSelectedRecord = null;\r\n        // LMe.pvtFetchPaymentDetails(p_actCodeInvoiceType);\r\n    }\r\n\r\n    pvtPrint() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n\r\n        //This will print the invoice\r\n        // if (tsIsInvoiceByType(LMe.FSelectedRecord.invoiceType) === true) {\r\n\r\n        //     tsPrint(LMe.FSelectedRecord.invoiceType, LMe.FSelectedRecord.invoiceNo);\r\n        //     return;\r\n        // }\r\n\r\n        tsPaymentPrint(LMe.FSelectedRecord.id);\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        tsGeneratePaymentInvoice(LMe.FSelectedRecord.id, function (p_objResponseJson) {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            if (p_objResponseJson.success === false) {\r\n\r\n                LMe.FWarningText = p_objResponseJson.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }//if..\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <HistoryIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Here you can see the payment history.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <div style={{ margin: '45px 0 0 20px' }}>\r\n                        <TInvoiceType\r\n                            Value={LMe.state.SInvoiceType}\r\n                            OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                            EmptyText={'Invoice Type'}\r\n                            CanAddPsudoNode={true}\r\n                            PCanShowSystemTypes={true}\r\n                        ></TInvoiceType>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        label={'From Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.fromDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ fromDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        label={'To Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.toDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ toDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n                    {/* <div className=\"flex1\"> </div> */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 30px' }}\r\n                        onClick={() => {\r\n                            LMe.pvtRefresh()\r\n                        }}\r\n                    >\r\n                        Apply Filter\r\n                    </Button>\r\n                </Paper>\r\n\r\n                <Toolbar\r\n                    style={{ margin: '5px 0 0 0px' }}\r\n                    component=\"div\"\r\n                    variant=\"dense\"\r\n                >\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 15px 0 0' }}\r\n                        aria-label=\"Refresh\"\r\n                        onClick={() => LMe.pvtRefresh()}\r\n                    >\r\n                        <Tooltip title=\"Refresh\">\r\n                            <RefreshIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <div className=\"flex1\"></div>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Generate PDF\"\r\n                        onClick={() => LMe.pvtGeneratePDF()}\r\n                        color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Generate PDF\">\r\n                            <PictureAsPdfIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Print\"\r\n                        onClick={() => LMe.pvtPrint()}\r\n                    // title=\"Print\"    \r\n                    >\r\n                        <Tooltip title=\"Print\">\r\n                            <PrintIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <div\r\n                    style={{ margin: '5px 20px 20px 20px' }}\r\n                    className=\"flex1\"\r\n                >\r\n                    <DataGrid\r\n                        columns={[\r\n                            {\r\n                                field: 'paymentDate',\r\n                                headerName: 'Date',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 180,\r\n                                color: 'primary',\r\n                                sort: 'asc',\r\n                                renderCell: (params) => {\r\n\r\n                                    return tsGetDateFromServerDateForInpField(params.value);\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'invoiceType',\r\n                                headerName: 'Invoice Type',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNameByActionCode(params.value)}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                            {\r\n                                field: 'invoiceNo',\r\n                                headerName: 'Invoice Number',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => {\r\n\r\n                                    //If invoiceNo is 0 or null then return the payment Id as its not invoice\r\n                                    var LInvoiceNo = params.value || params.getValue(params.id, 'id');\r\n\r\n                                    return <span>\r\n                                        {tsGetInvoiceDispNoByInvoiceNo(LInvoiceNo, params.getValue(params.id, 'invoiceType'), params.getValue(params.id, 'isPurchaserInvoice'))}\r\n                                    </span>\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'cstName',\r\n                                headerName: 'Name',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 200,\r\n                                color: 'primary'\r\n                            },\r\n                            {\r\n                                field: 'total',\r\n                                headerName: 'Total',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'credit',\r\n                                headerName: 'Credit',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'debit',\r\n                                headerName: 'Debit',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 150,\r\n                                renderCell: (params) => {\r\n                                    return 'Rs. ' + params.value;\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'mode',\r\n                                headerName: 'Mode of Payment',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 200,\r\n                            },\r\n                            {\r\n                                field: 'remark',\r\n                                headerName: 'Remark',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 250,\r\n                                renderCell: (params) => {\r\n                                    var LValue = params.value;\r\n\r\n                                    return <span title={LValue}>{LValue}</span>;\r\n                                },\r\n                            },\r\n                        ]}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        ref={LMe.FGridRef}\r\n                        // rowHeight={50}\r\n                        // pagination\r\n                        // pageSize={10}\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        // sortModel={LMe.state.SortModel}\r\n                        // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) =>\r\n                            LMe.pvtHandleOnRowClick(params.row)\r\n                        }\r\n                        // hideFooter\r\n                        onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                    />\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmPaymentHistory;\r\n","import React, { Component } from 'react';\r\nimport TCustomerSelectionCntr from '../../reusable/tsfrmCustomerSelectionCntr';\r\nimport { Box, Paper, TextField, FormControl, InputLabel, Select, MenuItem, Button, Snackbar } from '@material-ui/core';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { isEmpty, BaseUrl, tsGetPaymentModes, tsPaymentPrint, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsfrmPaymentInOut extends Component {\r\n    /**\r\n     * @props: isVisible, \r\n     * @returns \r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            cstId: -1,\r\n            SPaymentType: '',\r\n            SAmount: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            IsAlertDialogOpen: false,\r\n            IsSnackOn: false,\r\n            SIsLoading: false\r\n        };\r\n    }\r\n\r\n    pvtResetAllFields() {\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            // cstId: -1,\r\n            SPaymentType: '',\r\n            SAmount: 0,\r\n            SPaymentMode: '',\r\n            SRemark: '',\r\n            IsAlertDialogOpen: false,\r\n            SIsLoading: false,\r\n            //Making snack enable\r\n            IsSnackOn: true\r\n        });\r\n    }\r\n\r\n    pvtValidate() {\r\n        /**\r\n         * @method pvtValidate\r\n         * This method will validate the form\r\n         */\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.state.cstId) === true || LMe.state.cstId === -1) {\r\n            LMe.FWarningText = 'Select a Customer and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SPaymentType) === true) {\r\n            LMe.FWarningText = 'Select a Payment type and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SAmount) === true || LMe.state.SAmount === 0) {\r\n            LMe.FWarningText = 'Enter Amount and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n\r\n        if (isEmpty(LMe.state.SPaymentMode) === true) {\r\n            LMe.FWarningText = 'Select Payment mode and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return false;\r\n        }\r\n    }\r\n\r\n    pvtGenerateBtnClick() {\r\n        /**\r\n         * @method pvtGenerateBtnClick\r\n         * This method will complete the transcation \r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'payments',\r\n            LParamObj = {},\r\n            LRequestOptions;\r\n\r\n        if (LMe.pvtValidate() === false || LMe.state.SIsLoading === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        LMe.setState({\r\n            SIsLoading: true\r\n        });\r\n\r\n        LParamObj = {\r\n            invoiceType: '',\r\n            paymentDate: new Date().toString(),\r\n            cstId: LMe.state.cstId,\r\n            invoiceNo: '',\r\n            mode: LMe.state.SPaymentMode,\r\n            remark: LMe.state.SRemark,\r\n            credit: 0,\r\n            debit: 0\r\n        };\r\n\r\n        if (LMe.state.SPaymentType === 'credit') {\r\n\r\n            LParamObj.credit = LMe.state.SAmount;\r\n            LParamObj.invoiceType = GenConstants().PAYMENT_IN_ACT_CODE;\r\n        }\r\n        else if (LMe.state.SPaymentType === 'debit') {\r\n\r\n            LParamObj.debit = LMe.state.SAmount;\r\n            LParamObj.invoiceType = GenConstants().PAYMENT_OUT_ACT_CODE;\r\n        }\r\n\r\n        LRequestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj)\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    LMe.setState({\r\n                        IsLoading: false\r\n                    });\r\n\r\n                    if (responseJson.success === false || isEmpty(responseJson)) {\r\n\r\n                        LMe.FWarningText = responseJson.message || 'Error occur on server';\r\n                        LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                        return false;\r\n                    } //if..\r\n\r\n                    LMe.FSnackMsg = 'Transaction Successful';\r\n\r\n                    tsPaymentPrint(responseJson.id);\r\n\r\n                    LMe.pvtResetAllFields();\r\n                },\r\n                (error) => {\r\n                    LMe.setState({ IsAlertDialogOpen: true, SIsLoading: false });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetPaymentModeMenuItems() {\r\n        /**\r\n         * @method pvtGetPaymentModeMenuItems\r\n         * This method will return the menu items for payment type\r\n         */\r\n        var //LMe = this,\r\n            LKey,\r\n            LArrComponent = [],\r\n            LArrPaymentModes = tsGetPaymentModes() || [];\r\n\r\n        LArrComponent.push(<MenuItem key={'none-paymentmode-key'} value={''}><em>None</em></MenuItem>);\r\n\r\n        LArrPaymentModes.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            //Remove all spaces\r\n            LKey = p_objRecord.name.replace(/\\s/g, '') + '-key' + p_intIndex;\r\n\r\n            LArrComponent.push(<MenuItem key={LKey} value={p_objRecord.name}>{p_objRecord.name}</MenuItem>);\r\n        });\r\n\r\n        return LArrComponent;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <ReceiptIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Credit, Debit Payment.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <Paper style={{ margin: '0 20px 0 20px' }} variant=\"outlined\">\r\n                    <TCustomerSelectionCntr\r\n                        SetCstId={(p_intCustomerId) => LMe.setState({ cstId: p_intCustomerId })}\r\n                    ></TCustomerSelectionCntr>\r\n                </Paper>\r\n\r\n                <Paper style={{ margin: '20px 20px 0 20px', padding: '0 20px 20px 20px' }} className=\"tsVBox\" variant=\"outlined\">\r\n                    <h4>Payment Details</h4>\r\n\r\n                    <div className=\"tsHBox\">\r\n                        <FormControl style={{ margin: '0 0 0 0', width: '200px' }}>\r\n                            <InputLabel>Payment type</InputLabel>\r\n                            <Select\r\n                                value={LMe.state.SPaymentType}\r\n                                onChange={(e) => {\r\n                                    LMe.setState({ SPaymentType: e.target.value });\r\n                                }}\r\n                            >\r\n                                <MenuItem key={'none-key'} value={''}><em>None</em></MenuItem>\r\n                                <MenuItem key={'credit-key'} value={'credit'}>Credit</MenuItem>\r\n                                <MenuItem key={'debit-key'} value={'debit'}>Debit</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField label=\"Amount\" placeholder=\"Amount\" required\r\n                            style={{ margin: '3px 0 0 20px', width: '200px' }}\r\n                            onChange={(e) => LMe.setState({ SAmount: e.currentTarget.value })}\r\n                            value={LMe.state.SAmount}\r\n                            margin=\"dense\"\r\n                            type=\"number\"\r\n                        />\r\n\r\n                        <FormControl style={{ margin: '0 0 0 20px', width: '200px' }}>\r\n                            <InputLabel>Payment Mode</InputLabel>\r\n                            <Select\r\n                                value={LMe.state.SPaymentMode}\r\n                                onChange={(e) => {\r\n                                    LMe.setState({ SPaymentMode: e.target.value });\r\n                                }}\r\n                            >\r\n                                {LMe.pvtGetPaymentModeMenuItems()}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <TextField label=\"Remark\" placeholder=\"Remark\"\r\n                        style={{ margin: '20px 0 0 0', width: '200px' }}\r\n                        onChange={(e) => LMe.setState({ SRemark: e.currentTarget.value })}\r\n                        value={LMe.state.SRemark}\r\n                        margin=\"dense\"\r\n                        multiline\r\n                    />\r\n                </Paper>\r\n                <div className=\"flex1\"></div>\r\n                <div className=\"tsHBox\">\r\n                    <div className=\"flex1\"></div>\r\n                    <Button\r\n                        style={{ margin: '0 50px 30px 0' }}\r\n                        size=\"large\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={LMe.state.SIsLoading ? '' : <SaveIcon />}\r\n                        disableElevation\r\n                        onClick={() => { LMe.pvtGenerateBtnClick() }}\r\n                    >\r\n                        {LMe.state.SIsLoading ? <><CircularProgress size={20} color=\"inherit\" /> <span style={{ margin: '0 0 0 10px' }}>Loading...</span></>\r\n                            : 'Save and Generate Receipt'}\r\n                    </Button>\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    open={LMe.state.IsSnackOn}\r\n                    onClose={() => LMe.setState({ IsSnackOn: false })}\r\n                    message={LMe.FSnackMsg}\r\n                    key={'verticalhorizontalSnack'}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmPaymentInOut;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box\r\n} from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TReport from '../../reusable/tsfrmReports';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\nimport TGSTUtils from '../pkgGST/clsGSTUtils';\r\nimport TInvoiceDlg from '../pkgInvoice/tsfrmSingleInvoice';\r\n\r\nclass frmBillWiseProfit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SIsDialogOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        // var LMe = this\r\n    }\r\n\r\n    pvtGetGridColumn(p_arrFields) {\r\n        /**\r\n         * @method pvtGetGridColumn\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        // var LMe = this;\r\n\r\n        return new TGSTUtils().GetInvoiceWiseProfitColumns();\r\n    }\r\n\r\n    pvtFetchProductDetails(p_objParams, p_callBack) {\r\n        /**\r\n         * @method pvtFetchProductDetails\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LParamObj = p_objParams || {},\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/invoicewiseprofit';\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson, LParamObj);\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    p_callBack([]);\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchStocksFields(p_actCodeInvoiceType, p_callBack) {\r\n        /**\r\n         * @method pvtFetchStocksFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n\r\n        p_callBack([]);\r\n    }\r\n\r\n    pvtGetDialog() {\r\n\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsDialogOpen === false) {\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsDialogOpen: false })}\r\n            PSelectedRecord={LMe.FSelectedRecord}\r\n            PIsReadOnlyMode={true}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <DescriptionIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Check invoices wise profit report. Double click on invoice to view or print invoice.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <TReport\r\n                    PGetGridColumn={LMe.pvtGetGridColumn}\r\n                    PFetchProductDetails={LMe.pvtFetchProductDetails}\r\n                    PFetchProductsFields={LMe.pvtFetchStocksFields}\r\n                    PGetDialogContent={() => { }}\r\n                    POnDblClick={(p_objSelectedRecord) => {\r\n\r\n                        LMe.FSelectedRecord = p_objSelectedRecord || {};\r\n                        LMe.setState({ SIsDialogOpen: true });\r\n                    }}\r\n                    PCanAddPsudoNodeInInvoiceType={false}\r\n                    PChartConfig={{\r\n                        lineDataKey: 'ProfitPerInvoice',\r\n                        xAxisDataKey: 'invoiceNo',\r\n                        dispName: 'Total Profit'\r\n                    }}\r\n                />\r\n\r\n                {LMe.pvtGetDialog()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default frmBillWiseProfit;","import React, { Component } from 'react';\r\nimport {\r\n    Box, Paper, Tooltip\r\n} from '@material-ui/core';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport TCmpFilters from '../../reusable/cmpFilters';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { TreeView, TreeItem } from '@material-ui/lab';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass frmCashflowReport extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            SDataOnUI: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        var LMe = this;\r\n\r\n        LMe.FTotalAmount = {\r\n            totalSale: 0,\r\n            totalCredit: 0,\r\n            totalDebit: 0\r\n        };\r\n\r\n        LMe.FDefaultExpandedNodeIds = ['gtotal'];\r\n\r\n        LMe.setState({ SDataOnUI: LMe.pvtGetLoadingCntr() });\r\n    }\r\n\r\n    pvtOnFilterApplied(p_objSelectedFilterConditions) {\r\n\r\n        var LMe = this,\r\n            LRequestOptions,\r\n            LUrl = BaseUrl() + 'statement/cashflow';\r\n\r\n        LMe.FTotalAmount = {\r\n            totalSale: 0,\r\n            totalCredit: 0,\r\n            totalDebit: 0\r\n        };\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(p_objSelectedFilterConditions)\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(responseJson) || responseJson.success === false) {\r\n                        return false;\r\n                    } //if..\r\n\r\n                    LMe.pvtLoadDataOnUI(responseJson);\r\n                },\r\n                (error) => {\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadDataOnUI(p_responseJson) {\r\n        var LMe = this,\r\n            LResult;\r\n\r\n        LResult = <>\r\n            <TreeView\r\n                defaultCollapseIcon={<ExpandMoreIcon />}\r\n                defaultExpanded={LMe.FDefaultExpandedNodeIds}\r\n                defaultExpandIcon={<ChevronRightIcon />}\r\n            >\r\n                <TreeItem nodeId={'sale'} label={'Sale'}>{LMe.pvtLoadSaleOnUI(p_responseJson.sale)}</TreeItem>\r\n                <TreeItem nodeId={'purchaser'} label={'Supplier'}>{LMe.pvtLoadPurchaseOnUI(p_responseJson.purshare)}</TreeItem>\r\n\r\n                <TreeItem nodeId={'gtotal'} label={'Total'}>\r\n                    <TreeItem nodeId={'gtotalCredit'} label={<>\r\n                        <span className=\"tsHelpText\">Total Credited: Rs.{LMe.FTotalAmount.totalCredit}</span>\r\n                    </>}></TreeItem>\r\n                    <TreeItem nodeId={'gtotalDebit'} label={<>\r\n                        <span className=\"tsHelpText\">Total Debited: Rs.{LMe.FTotalAmount.totalDebit}</span>\r\n                    </>}></TreeItem>\r\n                    <TreeItem nodeId={'gtotalAmt'} label={<>\r\n                        <span className=\"tsHelpText\">Total Amount: Rs.{LMe.FTotalAmount.totalSale}</span>\r\n                    </>}></TreeItem>\r\n                </TreeItem>\r\n            </TreeView></>;\r\n\r\n        LMe.setState({ SDataOnUI: LResult });\r\n    }\r\n\r\n    pvtGetHintWithStyle(p_strHint) {\r\n\r\n        return <span className=\"tsGrayColor\" style={{\r\n            margin: '0 0 0 10px',\r\n            fontSize: 10\r\n        }}>{p_strHint}</span>;\r\n    }\r\n\r\n    pvtLoadSaleOnUI(p_responseJson) {\r\n\r\n        //Here, we are calculating Sale: Pest, Fert, Seed, PayIn, PayOut\r\n\r\n        var LMe = this,\r\n            LTreeItems = [],\r\n            LRecord = {},\r\n            LHintCredit = 'The amount which is paid by customers',\r\n            LPendingAmount,\r\n            LCreditAmount, LDebitAmount, LPayingAmountText, LIsCreditDebitMode = false;\r\n\r\n        for (let p_key in p_responseJson) {\r\n\r\n            LRecord = p_responseJson[p_key] || {};\r\n\r\n            //Defining this text in loop, reason: we need to clear in some cases\r\n            LPayingAmountText = 'Pending Amount';\r\n            LPendingAmount = 'The amount which customers need to pay you (unpaid amount)';\r\n            LIsCreditDebitMode = false;\r\n            LDebitAmount = LRecord.debit;\r\n            LCreditAmount = (LRecord.total - LDebitAmount) + LRecord.credit;\r\n\r\n            switch (p_key) {\r\n\r\n                case GenConstants().PAYMENT_IN_ACT_CODE:\r\n                    LCreditAmount = LRecord.credit;\r\n\r\n                    //This is for UI purpose\r\n                    LDebitAmount = LRecord.credit;\r\n\r\n                    LIsCreditDebitMode = true;\r\n                    LPayingAmountText = 'Payment Credited';\r\n                    LPendingAmount = 'Here you can see the payment-credited amount from payment reciept';\r\n                    break;\r\n\r\n                case GenConstants().PAYMENT_OUT_ACT_CODE:\r\n                    LDebitAmount = LRecord.debit;\r\n                    LCreditAmount = 0;\r\n                    LPayingAmountText = 'Payment Debited';\r\n                    LPendingAmount = 'Here you can see the payment-debited amount from payment reciept';\r\n                    LIsCreditDebitMode = true;\r\n\r\n                    LMe.FTotalAmount.totalDebit += LDebitAmount;\r\n                    break;\r\n\r\n                default:\r\n            }\r\n\r\n            LMe.FTotalAmount.totalSale += LRecord.total;\r\n            LMe.FTotalAmount.totalCredit += LCreditAmount;\r\n\r\n            LTreeItems.push(\r\n                <TreeItem nodeId={p_key} label={tsGetInvoiceDispNameByActionCode(p_key)} key={p_key + 'cashflowsale'}>\r\n                    {LIsCreditDebitMode === false ? <>\r\n                        <TreeItem nodeId={p_key + 'total'} key={p_key + 'total'} label={<span className=\"tsHelpText\">Total Amount: Rs.{LRecord.total}</span>} />\r\n                        <TreeItem nodeId={p_key + 'credit'} key={p_key + 'credit'} label={\r\n                            <Tooltip title={LHintCredit} placement=\"right\" key={p_key + 'tooltipmenukey'}>\r\n                                <span className=\"tsHelpText\">Total Credited: Rs.{LCreditAmount} {LMe.pvtGetHintWithStyle(LHintCredit)}</span>\r\n                            </Tooltip>\r\n                        } />\r\n                    </> : null}\r\n                    <TreeItem nodeId={p_key + 'debit'} key={p_key + 'debit'} label={\r\n                        <Tooltip title={LPendingAmount} placement=\"right\" key={p_key + 'tooltipmenukey'}>\r\n                            <span className=\"tsHelpText\">\r\n                                {LPayingAmountText}: Rs.{LDebitAmount}\r\n                                {LMe.pvtGetHintWithStyle(LPendingAmount)}\r\n                            </span>\r\n                        </Tooltip>} />\r\n                </TreeItem>\r\n            );\r\n\r\n            LMe.FDefaultExpandedNodeIds.push(p_key);\r\n        }//for..\r\n\r\n        return LTreeItems;\r\n    }\r\n\r\n    pvtLoadPurchaseOnUI(p_responseJson) {\r\n\r\n        var LMe = this,\r\n            LTreeItems = [],\r\n            LRecord = {},\r\n            LHintDebit = 'Amount paid to suppliers',\r\n            LHintPending = 'The amount which you will need to pay to suppliers',\r\n            LDebitAmount = 0;\r\n\r\n        for (let p_key in p_responseJson) {\r\n\r\n            LRecord = p_responseJson[p_key] || {};\r\n\r\n            LDebitAmount = (LRecord.total - LRecord.credit) + LRecord.debit;\r\n\r\n            LMe.FTotalAmount.totalDebit += LDebitAmount;\r\n\r\n            LTreeItems.push(\r\n                <TreeItem nodeId={p_key + 'cashflowpurshase'} label={tsGetInvoiceDispNameByActionCode(p_key)} key={p_key + 'cashflowpurshase'}>\r\n                    <TreeItem nodeId={p_key + 'totalpurshase'} key={p_key + 'totalpurshase'} label={<span className=\"tsHelpText\">Total Amount: Rs.{LRecord.total}</span>} />\r\n                    <TreeItem nodeId={p_key + 'creditpurshase'} key={p_key + 'creditpurshase'} label={\r\n                        <Tooltip title={LHintDebit} placement=\"right\" key={p_key + 'tooltipmenukeypurshase'}>\r\n                            <span className=\"tsHelpText\">Total Debited: Rs.{LDebitAmount} {LMe.pvtGetHintWithStyle(LHintDebit)} </span>\r\n                        </Tooltip>\r\n                    } />\r\n                    <TreeItem nodeId={p_key + 'debitpurshase'} key={p_key + 'debitpurshase'} label={\r\n                        <Tooltip title={LHintPending} placement=\"right\" key={p_key + 'tooltipmenukeypurshase'}>\r\n                            <span className=\"tsHelpText\">\r\n                                Pending Amount: Rs.{LRecord.credit}\r\n                                {LMe.pvtGetHintWithStyle(LHintPending)}\r\n                            </span>\r\n                        </Tooltip>} />\r\n                </TreeItem>\r\n            );\r\n\r\n            LMe.FDefaultExpandedNodeIds.push(p_key + 'cashflowpurshase');\r\n        }//for..\r\n\r\n        return LTreeItems;\r\n    }\r\n\r\n    pvtGetLoadingCntr() {\r\n\r\n        return (\r\n            <div className=\"tsMiddle\">\r\n                <CircularProgress />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox tsOverFlowAuto\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <AccountBalanceIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Check invoices complete cash flow.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                <TCmpFilters\r\n                    onFilterApplied={LMe.pvtOnFilterApplied.bind(LMe)}\r\n                    PCanAddShowInvoiceType={false}\r\n                ></TCmpFilters>\r\n\r\n                <Paper style={{ margin: 20, padding: 20 }} className=\"flex1 tsVBox tsOverFlowAuto\" variant=\"outlined\">\r\n\r\n                    {LMe.state.SDataOnUI}\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default frmCashflowReport;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box\r\n} from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TReport from '../../reusable/tsfrmReports';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\n// import { GenConstants } from '../../tsclsGenConstants';\r\n\r\nclass tsfrmDateWiseProfitReport extends Component {\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        // var LMe = this;\r\n    }\r\n\r\n    pvtGetGridColumn(p_arrFields) {\r\n        /**\r\n         * @method pvtGetGridColumn\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [];\r\n        // LObj = {};\r\n\r\n        LArrColumn = [\r\n            {\r\n                field: 'invoiceLocalDateString',//'invoiceDate',\r\n                headerName: 'Date',\r\n                headerClassName: 'tsGridHeader',\r\n                flex: 1,\r\n                minWidth: 200,\r\n                // renderCell: (params) => {\r\n\r\n                //     return tsGetDateFromServerDateForInpField(params.value);\r\n                // },\r\n            },\r\n            {\r\n                field: 'profit',\r\n                headerName: 'Profit / Loss',\r\n                headerClassName: 'tsGridHeader',\r\n                cellClassName: (params) => params.value > 0 ? 'tsGridSuccessCell' : 'tsGridFailureCell',\r\n                flex: 1,\r\n                minWidth: 200,\r\n                renderCell: (params) => {\r\n                    var LValue = params.value;\r\n\r\n                    if (LValue > 0) {\r\n\r\n                        return <span title='Profit Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                    }\r\n                    return <span title='Loss Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                }\r\n            }\r\n        ];\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtFetchProductDetails(p_objParams, p_callBack) {\r\n        /**\r\n         * @method pvtFetchProductDetails\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LParamObj = p_objParams || {},\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/profitdatewise';\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson, LParamObj);\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    p_callBack([]);\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchStocksFields(p_actCodeInvoiceType, p_callBack) {\r\n        /**\r\n         * @method pvtFetchStocksFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        if (isEmpty(p_callBack) === false) {\r\n\r\n            p_callBack([]);\r\n        }//if..\r\n    }\r\n\r\n    pvtGetDialogContent(p_objRecord) {\r\n\r\n        return <>{JSON.stringify(p_objRecord)}</>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <DescriptionIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Check product wise profit / loss report.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <TReport\r\n                    PGetGridColumn={LMe.pvtGetGridColumn}\r\n                    PFetchProductDetails={LMe.pvtFetchProductDetails}\r\n                    PFetchProductsFields={LMe.pvtFetchStocksFields}\r\n                    PGetDialogContent={LMe.pvtGetDialogContent}\r\n                    CanShowDetailedView={false}\r\n                    PCanAddPsudoNodeInInvoiceType={true}\r\n                    PChartConfig={{\r\n                        lineDataKey: 'profit',\r\n                        xAxisDataKey: 'invoiceLocalDateString',\r\n                        dispName: 'Profit Amount'\r\n                    }}\r\n                    PIsChartView={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmDateWiseProfitReport;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box\r\n} from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TReport from '../../reusable/tsfrmReports';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TProductStockSelection from '../pkgManageProducts/tsfrmStocksShell';\r\n\r\nclass tsfrmProductSaleReport extends Component {\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        // var LMe = this;\r\n    }\r\n\r\n    pvtGetGridColumn(p_arrFields) {\r\n        /**\r\n         * @method pvtGetGridColumn\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [],\r\n            LObj = {};\r\n\r\n        LArrColumn = [\r\n            {\r\n                field: 'productName',\r\n                headerName: 'Name',\r\n                headerClassName: 'tsGridHeader',\r\n                flex: 1,\r\n                minWidth: 200\r\n            },\r\n            {\r\n                field: 'soldQty',\r\n                headerName: 'Sold Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 165,\r\n                cellClassName: 'tsGridSuccessCell'\r\n            },\r\n            {\r\n                field: 'hsn',\r\n                headerName: 'HSN Code',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 150\r\n            },\r\n            {\r\n                field: 'gst',\r\n                headerName: 'GST',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 150\r\n            },\r\n        ];\r\n\r\n        //Getting custom fields\r\n        if (isEmpty(p_arrFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrFields = p_arrFields || [];\r\n\r\n            p_arrFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = {};\r\n\r\n                LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n                //Setting column name\r\n                LObj['field'] = p_objRecord.columnName;\r\n                LObj['headerClassName'] = 'tsGridHeader';\r\n                LObj['minWidth'] = 200;\r\n\r\n                LArrColumn.push(LObj);\r\n            });//forEach\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtFetchProductDetails(p_objParams, p_callBack) {\r\n        /**\r\n         * @method pvtFetchProductDetails\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LParamObj = p_objParams || {},\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/productsale';\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson, LParamObj);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    p_callBack([]);\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchProductsFields(p_InvoiceType, p_callBack) {\r\n        /**\r\n         * @method pvtFetchProductsFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LUrl,\r\n            LInvoiceType = p_InvoiceType;\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().PRODUCT_CSTM_FIELDS + '/' + LInvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                    p_callBack([]);\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetDialogContent(p_objRecord) {\r\n\r\n        return (\r\n            <TProductStockSelection\r\n                PProductId={p_objRecord.productId}\r\n                PInvoiceType={p_objRecord.invoiceType}\r\n                PStockId={p_objRecord.stockId}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <DescriptionIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Check product-wise sales. Double click on product for stock details.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <TReport\r\n                    PGetGridColumn={LMe.pvtGetGridColumn}\r\n                    PFetchProductDetails={LMe.pvtFetchProductDetails}\r\n                    PFetchProductsFields={LMe.pvtFetchProductsFields}\r\n                    PGetDialogContent={LMe.pvtGetDialogContent}\r\n                    PChartConfig={{\r\n                        lineDataKey: 'soldQty',\r\n                        xAxisDataKey: 'productName',\r\n                        dispName: 'Sold Item Quantity'\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmProductSaleReport;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Box\r\n} from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport TReport from '../../reusable/tsfrmReports';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TProductStockSelection from '../pkgManageProducts/tsfrmStocksShell';\r\n\r\nclass tsfrmProfitReport extends Component {\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        // var LMe = this;\r\n    }\r\n\r\n    pvtGetGridColumn(p_arrFields) {\r\n        /**\r\n         * @method pvtGetGridColumn\r\n         * This method will return the grid column json\r\n         */\r\n\r\n        var //LMe = this,\r\n            LArrColumn = [];\r\n        // LObj = {};\r\n\r\n        LArrColumn = [\r\n            {\r\n                field: 'productName',\r\n                headerName: 'Product Name',\r\n                headerClassName: 'tsGridHeader',\r\n                flex: 1,\r\n                minWidth: 200\r\n            },\r\n            {\r\n                field: 'qty',\r\n                headerName: 'Sold Quantity',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 165\r\n            },\r\n            {\r\n                field: 'costPrice',\r\n                headerName: 'Cost Price per Unit',\r\n                headerClassName: 'tsGridHeader',\r\n                minWidth: 200,\r\n                renderCell: (params) => {\r\n                    return 'Rs. ' + params.value;\r\n                }\r\n            },\r\n            {\r\n                field: 'profit',\r\n                headerName: 'Profit / Loss',\r\n                headerClassName: 'tsGridHeader',\r\n                cellClassName: (params) => params.value > 0 ? 'tsGridSuccessCell' : 'tsGridFailureCell',\r\n                width: 165,\r\n                renderCell: (params) => {\r\n                    var LValue = params.value;\r\n\r\n                    if (LValue > 0) {\r\n\r\n                        return <span title='Profit Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                    }\r\n                    return <span title='Loss Amount calculated from \"Sold Quantity\" by \"Sold Amount\".'>{'Rs. ' + Math.abs(LValue)}</span>;\r\n                }\r\n            },\r\n            {\r\n                field: 'hsn',\r\n                headerName: 'HSN Code',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 150,\r\n\r\n                isRequired: true,\r\n                isField: true\r\n            },\r\n            {\r\n                field: 'gst',\r\n                headerName: 'GST',\r\n                headerClassName: 'tsGridHeader',\r\n                // flex: 1,\r\n                width: 150,\r\n\r\n                isRequired: true,\r\n                isField: true\r\n            },\r\n        ];\r\n\r\n        var LObj = {};\r\n\r\n        if (isEmpty(p_arrFields) === false) {\r\n\r\n            //Convert it into array\r\n            p_arrFields = p_arrFields || [];\r\n\r\n            p_arrFields.forEach(function (p_objRecord) {\r\n\r\n                if (p_objRecord.isSystemField === true) {\r\n\r\n                    return true;\r\n                }//if..\r\n\r\n                LObj = {};\r\n\r\n                LObj['headerName'] = p_objRecord.fieldName;\r\n\r\n                //Setting column name\r\n                LObj['field'] = p_objRecord.columnName;\r\n                LObj['headerClassName'] = 'tsGridHeader';\r\n                LObj['minWidth'] = 200;\r\n\r\n                LArrColumn.push(LObj);\r\n            });\r\n\r\n        }//if..\r\n\r\n        return LArrColumn;\r\n    }\r\n\r\n    pvtFetchProductDetails(p_objParams, p_callBack) {\r\n        /**\r\n         * @method pvtFetchProductDetails\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LParamObj = p_objParams || {},\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'statement/profitproductwise';\r\n\r\n        LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson, LParamObj);\r\n                    }\r\n                },\r\n                (error) => {\r\n\r\n                    p_callBack([]);\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchStocksFields(p_actCodeInvoiceType, p_callBack) {\r\n        /**\r\n         * @method pvtFetchStocksFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var //LMe = this,\r\n            LUrl,\r\n            LInvoiceType = p_actCodeInvoiceType;\r\n\r\n        if (isEmpty(LInvoiceType) === true || p_actCodeInvoiceType === GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            if (isEmpty(p_callBack) === false) {\r\n\r\n                p_callBack([]);\r\n            }//if..\r\n            return;\r\n        }//if..\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().STOCK_CSTM_FIELDS + '/' + LInvoiceType;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                    if (isEmpty(p_callBack) === false) {\r\n\r\n                        p_callBack([]);\r\n                    }//if..\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetProductDialogContent(p_objRecord) {\r\n\r\n        // var LMe = this;\r\n        return (\r\n            <TProductStockSelection\r\n                PProductId={p_objRecord.productId}\r\n                PInvoiceType={p_objRecord.invoiceType}\r\n                PStockId={p_objRecord.stockId}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <DescriptionIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Check product wise profit / loss report. Double click on product for stock details.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <TReport\r\n                    PGetGridColumn={LMe.pvtGetGridColumn}\r\n                    PFetchProductDetails={LMe.pvtFetchProductDetails}\r\n                    PFetchProductsFields={LMe.pvtFetchStocksFields}\r\n                    PCanAddPsudoNodeInInvoiceType={true}\r\n                    PGetDialogContent={LMe.pvtGetProductDialogContent}\r\n                    PChartConfig={{\r\n                        lineDataKey: 'profit',\r\n                        xAxisDataKey: 'productName',\r\n                        dispName: 'Total Profit'\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmProfitReport;","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Toolbar,\r\n    IconButton,\r\n    Button,\r\n    Tooltip,\r\n    Paper,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsPrintSupplierInvoice, tsGenerateSupplierInvoicePDF,\r\n    tsGetDateFromServerDateForInpField, tsGetInvoiceDispNoByInvoiceNo, tsGetDefaultFromDate, tsGetDefaultToDate, tsGetProjectId\r\n} from '../../tsclsGenUtils';\r\nimport RestorePageIcon from '@material-ui/icons/RestorePage';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport TInvoiceType from '../../reusable/tscmpInvoiceType';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoiceDlg from './tsfrmSingleInvoice';\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport TLoading from '../../reusable/tsclsLoading';\r\n\r\nclass tsfrmInvoicesShell extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            FetchedData: null,\r\n            SInvoiceType: '',\r\n            SIsDialogOpen: false,\r\n            IsAlertDialogOpen: false,\r\n            SIsDialogOpenInReadOnlyMode: true,\r\n            IsCnfrmDialogOpen: false,\r\n            SLoading: false,\r\n            fromDate: '',\r\n            toDate: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         *\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.pvtSetDefaultFromDateAndToDate();\r\n\r\n        setTimeout(() => {\r\n            LMe.pvtFetchInvoices();\r\n        }, 100);\r\n    }\r\n\r\n    pvtSetDefaultFromDateAndToDate() {\r\n        /**\r\n         * @method pvtSetDefaultFromDateAndToDate\r\n         * This method will set the default from date and to date for this form.\r\n         * From date will be 1st date of month\r\n         * End date will be today'date\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({\r\n            toDate: tsGetDefaultToDate(),\r\n            fromDate: tsGetDefaultFromDate()\r\n        });\r\n    }\r\n\r\n    pvtRefresh() {\r\n        /**\r\n         * @method pvtRefresh\r\n         * This function will refresh the grid\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = null;\r\n\r\n        LMe.setState({\r\n            FetchedData: null,\r\n        });\r\n\r\n        LMe.pvtFetchInvoices();\r\n    }\r\n\r\n    pvtFetchInvoices(p_strInvoiceType) {\r\n        /**\r\n         * @method pvtFetchProducts\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'supplierinvoices';\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === true) {\r\n\r\n            return;\r\n        }//if..\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'supplierinvoices/type/' + p_strInvoiceType;\r\n        }//if..\r\n\r\n        var LParamObj = {\r\n            fromDate: LMe.state.fromDate,\r\n            toDate: LMe.state.toDate,\r\n            invoiceType: LMe.state.SInvoiceType\r\n        };\r\n\r\n        if (isEmpty(LParamObj.fromDate) === true || isEmpty(LParamObj.toDate) === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        var LRequestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LParamObj),\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({\r\n                        FetchedData: responseJson\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnRowClick(p_objSelectedRecord) {\r\n        /**\r\n         * INTENT: This function will set the selected row record as a class level.\r\n         *\r\n         * @param: Selected Record\r\n         * @return: Nothing\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.FSelectedRecord = p_objSelectedRecord;\r\n    }\r\n\r\n    pvtHandleOnInvoiceTypeChange(p_actCodeInvoiceType) {\r\n        /**\r\n         * @method pvtHandleOnInvoiceTypeChange\r\n         * \r\n         * @param {p_actCodeInvoiceType}: Action code for invoice type\r\n         */\r\n        var LMe = this;\r\n\r\n        LMe.setState({ SInvoiceType: p_actCodeInvoiceType });\r\n\r\n        LMe.FSelectedRecord = null;\r\n        // LMe.pvtFetchInvoices(p_actCodeInvoiceType);\r\n    }\r\n\r\n    pvtLoadDialog() {\r\n        /**\r\n         * @method pvtLoadDialog\r\n         * This method will loads the Dialog\r\n         */\r\n        var LMe = this;\r\n\r\n        if (LMe.state.SIsDialogOpen === false) {\r\n\r\n            return <></>;\r\n        }\r\n\r\n        return <TInvoiceDlg\r\n            IsDialogOpen={LMe.state.SIsDialogOpen}\r\n            OnDialogClose={() => LMe.setState({ SIsDialogOpen: false })}\r\n            PSelectedRecord={LMe.FSelectedRecord}\r\n            PIsReadOnlyMode={LMe.state.SIsDialogOpenInReadOnlyMode}\r\n            PIsDetailedView={true}\r\n        />;\r\n    }\r\n\r\n    pvtOpenInvoice(p_boolIsReadOnlyMode) {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({\r\n            SIsDialogOpen: true,\r\n            SIsDialogOpenInReadOnlyMode: p_boolIsReadOnlyMode\r\n        });\r\n    }\r\n\r\n    pvtHandleOnEditButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.pvtOpenInvoice(false);\r\n    }\r\n\r\n    pvtHandleOnViewInvoice() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.pvtOpenInvoice(true);\r\n    }\r\n\r\n    pvtPrint() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n\r\n        tsPrintSupplierInvoice(LMe.FSelectedRecord.invoiceType, LMe.FSelectedRecord.invoiceNo);\r\n        // var LWindow = window.open('/singleInvoice/' + LMe.FSelectedRecord.invoiceType + '/' + LMe.FSelectedRecord.invoiceNo);\r\n\r\n        // LWindow.onload = function () {\r\n\r\n        //     setTimeout(function () {\r\n        //         LWindow.print();\r\n        //     }, 100);\r\n        // }\r\n    }\r\n\r\n    pvtGeneratePDF() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.setState({ SLoading: true });\r\n\r\n        tsGenerateSupplierInvoicePDF(LMe.FSelectedRecord.invoiceType, LMe.FSelectedRecord.invoiceNo, function (p_objResponseJson) {\r\n\r\n            LMe.setState({ SLoading: false });\r\n\r\n            if (p_objResponseJson.success === false) {\r\n\r\n                LMe.FWarningText = p_objResponseJson.message;\r\n                LMe.setState({ IsAlertDialogOpen: true });\r\n            }//if..\r\n        });\r\n    }\r\n\r\n    pvtHandleOnDeleteButtonClick() {\r\n        var LMe = this;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a record and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        LMe.FCnfrmText = \"Are you sure want to delete this invoice?\";\r\n\r\n        LMe.F_callBackOnCnfrmTrue = LMe.pvtDelete;\r\n        LMe.setState({ IsCnfrmDialogOpen: true });\r\n    }\r\n\r\n    pvtDelete() {\r\n        var LMe = this,\r\n            LArrFetchedData,\r\n            LArrResponse = [],\r\n            LRequestOptions,\r\n            LUrl;\r\n\r\n        if (isEmpty(LMe.FSelectedRecord) === true) {\r\n            LMe.FWarningText = 'Select a Invoice and try again.';\r\n            LMe.setState({ IsAlertDialogOpen: true });\r\n            return;\r\n        } //if..\r\n\r\n        // eslint-disable-next-line no-useless-concat\r\n        LUrl = BaseUrl() + 'supplierinvoices' + '/' + LMe.FSelectedRecord.invoiceNo + '/' + LMe.FSelectedRecord.invoiceType;\r\n\r\n        LArrFetchedData = LMe.state.FetchedData || [];\r\n        // This will start the loading\r\n        LMe.setState({ FetchedData: [] });\r\n\r\n        LRequestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            },\r\n            body: JSON.stringify(LMe.FSelectedRecord),\r\n        };\r\n\r\n        // fire command\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.success === false) {\r\n                        LMe.FWarningText = responseJson.message;\r\n\r\n                        LMe.setState({\r\n                            FetchedData: LArrFetchedData,\r\n                            IsCnfrmDialogOpen: false,\r\n                            IsAlertDialogOpen: true\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n                    LMe.FSelectedRecord = null;\r\n\r\n                    LArrFetchedData.forEach(function (p_objRecord) {\r\n                        //Record if exists\r\n                        if (p_objRecord.invoiceNo === parseInt(responseJson.invoiceNo)) {\r\n                            //remove deleted record\r\n                            return true; //continue\r\n                        } //if..\r\n\r\n                        LArrResponse.push(p_objRecord);\r\n                    }); //forEach...\r\n\r\n                    // Update state.\r\n                    LMe.setState({ FetchedData: LArrResponse, IsCnfrmDialogOpen: false });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                        IsCnfrmDialogOpen: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtGetWarningDlgAction(p_canShowWarningIcon) {\r\n        var LMe = this;\r\n        if (p_canShowWarningIcon === true) {\r\n            return (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n\r\n                            if (isEmpty(LMe.F_callBackOnCnfrmTrue) === false) {\r\n\r\n                                LMe.F_callBackOnCnfrmTrue();\r\n                            }//if..\r\n                        }}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return <></>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <RestorePageIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Here you can see the invoices.\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n\r\n                <Paper style={{ margin: '0 20px 0 20px' }} className=\"tsHBox\" variant=\"outlined\">\r\n\r\n                    <div style={{ margin: '45px 0 0 20px' }}>\r\n                        <TInvoiceType\r\n                            Value={LMe.state.SInvoiceType}\r\n                            OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                            EmptyText={'Product Type'}>\r\n                        </TInvoiceType>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        label={'From Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.fromDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ fromDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        label={'To Date'}\r\n                        type=\"date\"\r\n                        margin=\"dense\"\r\n                        style={{ margin: '29px 0 0 20px' }}\r\n                        value={LMe.state.toDate}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                        }}\r\n                        required={true}\r\n                        onChange={(e) => {\r\n\r\n                            LMe.setState({ toDate: e.currentTarget.value })\r\n                        }}\r\n                    />\r\n                    {/* <div className=\"flex1\"> </div> */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        style={{ margin: '40px 0 30px 30px' }}\r\n                        onClick={() => {\r\n                            LMe.pvtRefresh()\r\n                        }}\r\n                    >\r\n                        Apply Filter\r\n                    </Button>\r\n                </Paper>\r\n\r\n                <Toolbar\r\n                    style={{ margin: '0 0 0 0px' }}\r\n                    component=\"div\"\r\n                    variant=\"dense\"\r\n                >\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtOpenInvoice(true);\r\n                        }}\r\n                    // startIcon={<EditIcon />}\r\n                    >\r\n                        View Invoice\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnEditButtonClick();\r\n                        }}\r\n                        startIcon={<EditIcon />}\r\n                    >\r\n                        Edit Invoice\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ margin: '0 0 0 5px' }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        onClick={() => {\r\n                            LMe.pvtHandleOnDeleteButtonClick();\r\n                        }}\r\n                        startIcon={<DeleteIcon />}\r\n                    >\r\n                        Delete Invoice\r\n                    </Button>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 15px 0 0' }}\r\n                        aria-label=\"Refresh\"\r\n                        onClick={() => LMe.pvtRefresh()}\r\n                    >\r\n                        <Tooltip title=\"Refresh\">\r\n                            <RefreshIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    {/* <TInvoiceType\r\n                        Value={LMe.state.SInvoiceType}\r\n                        OnChange={p_value => LMe.pvtHandleOnInvoiceTypeChange(p_value)}\r\n                        EmptyText={'Invoice Type'}\r\n                        CanAddPsudoNode={false}\r\n                    ></TInvoiceType> */}\r\n                    <div className=\"flex1\"></div>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Generate PDF\"\r\n                        onClick={() => LMe.pvtGeneratePDF()}\r\n                        color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Generate PDF\">\r\n                            <PictureAsPdfIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n\r\n                    <IconButton\r\n                        style={{ margin: '0 0 0 0' }}\r\n                        aria-label=\"Print\"\r\n                        onClick={() => LMe.pvtPrint()}\r\n                    // color=\"primary\"\r\n                    >\r\n                        <Tooltip title=\"Print\">\r\n                            <PrintIcon />\r\n                        </Tooltip>\r\n                    </IconButton>\r\n                </Toolbar>\r\n                <div\r\n                    style={{ margin: '5px 20px 20px 20px' }}\r\n                    className=\"flex1\"\r\n                >\r\n                    <DataGrid\r\n                        columns={[\r\n                            {\r\n                                field: 'invoiceDate',\r\n                                headerName: 'Date',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 180,\r\n                                color: 'primary',\r\n                                sort: 'asc',\r\n                                renderCell: (params) => {\r\n\r\n                                    return tsGetDateFromServerDateForInpField(params.value);\r\n                                },\r\n                            },\r\n                            {\r\n                                field: 'invoiceType',\r\n                                headerName: 'Invoice Type',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 157,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNameByActionCode(params.value)}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                            {\r\n                                field: 'cstName',\r\n                                headerName: 'Name',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 200,\r\n                                flex: 1,\r\n                                color: 'primary'\r\n                            },\r\n                            {\r\n                                field: 'invoiceNo',\r\n                                headerName: 'Invoice No',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 145,\r\n                                // hide: true,\r\n                                renderCell: (params) => (\r\n                                    <span>\r\n                                        {tsGetInvoiceDispNoByInvoiceNo(params.value, params.getValue(params.id, 'invoiceType'), 1)}\r\n                                    </span>\r\n                                ),\r\n                            },\r\n                            {\r\n                                field: 'strInvoiceNo',\r\n                                headerName: 'Supplier\\'s Invoice No',\r\n                                headerClassName: 'tsGridHeader',\r\n                                minWidth: 220\r\n                            }\r\n                        ]}\r\n                        rows={LMe.state.FetchedData || []}\r\n                        ref={LMe.FGridRef}\r\n                        // rowHeight={50}\r\n                        pagination\r\n                        // pageSize={10}\r\n                        csvOptions={{ allColumns: true }}\r\n                        loading={LMe.state.FetchedData === null ? true : false}\r\n                        // sortModel={LMe.state.SortModel}\r\n                        // onSortModelChange={(model) => LMe.setState({SortModel: model})}\r\n                        components={{\r\n                            Toolbar: GridToolbar,\r\n                        }}\r\n                        density={'compact'}\r\n                        onCellDoubleClick={(params) =>\r\n                            LMe.pvtOpenInvoice(true)\r\n                        }\r\n                        onRowClick={(e) => LMe.pvtHandleOnRowClick(e.row)}\r\n                    />\r\n                </div>\r\n                {LMe.pvtLoadDialog()}\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsCnfrmDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsCnfrmDialogOpen: false })}\r\n                    DialogContent={LMe.FCnfrmText || ''}\r\n                    DialogActions={LMe.pvtGetWarningDlgAction(true)}\r\n                    DialogHeader={'Confirm'}\r\n                    IsWindow={false}\r\n                />\r\n\r\n                <TLoading\r\n                    PLoadingText={'Generating PDF document, please wait...'}\r\n                    PIsLoading={LMe.state.SLoading}\r\n                    POnStopLoading={() => LMe.setState({ SLoading: false })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmInvoicesShell;\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Box,\r\n    Link,\r\n} from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport TDialog from '../reusable/tsclsDialog';\r\n\r\nclass tsfrmHome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsAlertDialogOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         */\r\n        // var LMe = this;   \r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <div\r\n                className=\"flex1 tsVBox\"\r\n                style={{\r\n                    margin: '10px 0 10px 0',\r\n                }}\r\n            >\r\n                <Box component=\"div\" display=\"flex\" px={3} pb={2}>\r\n                    {/* Module Icon */}\r\n                    <div style={{ margin: '20px 6px 0 0' }}>\r\n                        <HomeIcon />\r\n                    </div>\r\n                    <div style={{ margin: '18px 6px 0 0' }}>\r\n                        {/* Module Title */}\r\n                        <div style={{ fontSize: '20px' }}> {LMe.props.moduleInfo.displayTxt} </div>\r\n\r\n                        {/* Module Description */}\r\n                        {/* <Box component=\"div\" style={{ fontSize: '13px' }} mt={0.5}>\r\n                            Here you can see the payment history.\r\n                        </Box> */}\r\n                    </div>\r\n                </Box>\r\n\r\n                <div style={{ margin: '20px 6px 0 60px' }}>\r\n                    <b>Quick useful links</b>\r\n                    <ul style={{ lineHeight: 2 }}>\r\n                        <li><Link href=\"#/invoice\">Create a new Invoice</Link></li>\r\n                        <li><Link href=\"#/stock-report\">Add Stock</Link></li>\r\n                        <li><Link href=\"#/customer-statement\">Generate Customer Statement</Link></li>\r\n                        <li><Link href=\"#/admin/ManageUserAccount\">Manage User Accounts</Link></li>\r\n                        <li><Link href=\"#/admin\">Configure Settings</Link></li>\r\n                    </ul>\r\n                </div>\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmHome;\r\n","var map = {\n\t\"./\": 199,\n\t\"./App\": 226,\n\t\"./App.css\": 329,\n\t\"./App.js\": 226,\n\t\"./admin/pkgBackupAndRestore/frmBackup\": 203,\n\t\"./admin/pkgBackupAndRestore/frmBackup.js\": 203,\n\t\"./admin/pkgBackupAndRestore/frmRestore\": 204,\n\t\"./admin/pkgBackupAndRestore/frmRestore.js\": 204,\n\t\"./admin/pkgCustomCustomersFields/tsdlgCustomerFields\": 162,\n\t\"./admin/pkgCustomCustomersFields/tsdlgCustomerFields.js\": 162,\n\t\"./admin/pkgCustomCustomersFields/tsfrmCstFieldsShell\": 206,\n\t\"./admin/pkgCustomCustomersFields/tsfrmCstFieldsShell.js\": 206,\n\t\"./admin/pkgCustomProductFields/tsdlgProductFields\": 163,\n\t\"./admin/pkgCustomProductFields/tsdlgProductFields.js\": 163,\n\t\"./admin/pkgCustomProductFields/tsfrmProductFieldsShell\": 207,\n\t\"./admin/pkgCustomProductFields/tsfrmProductFieldsShell.js\": 207,\n\t\"./admin/pkgCustomStockFields/tsdlgStockFields\": 164,\n\t\"./admin/pkgCustomStockFields/tsdlgStockFields.js\": 164,\n\t\"./admin/pkgCustomStockFields/tsfrmStockFieldsShell\": 208,\n\t\"./admin/pkgCustomStockFields/tsfrmStockFieldsShell.js\": 208,\n\t\"./admin/pkgInvoiceTypes/tsdlgInvoiceType\": 165,\n\t\"./admin/pkgInvoiceTypes/tsdlgInvoiceType.js\": 165,\n\t\"./admin/pkgInvoiceTypes/tsfrmInvoiceTypeShell\": 209,\n\t\"./admin/pkgInvoiceTypes/tsfrmInvoiceTypeShell.js\": 209,\n\t\"./admin/pkgManageUserAccount/tsdlgUser\": 133,\n\t\"./admin/pkgManageUserAccount/tsdlgUser.js\": 133,\n\t\"./admin/pkgManageUserAccount/tsfrmUserAccount\": 210,\n\t\"./admin/pkgManageUserAccount/tsfrmUserAccount.js\": 210,\n\t\"./admin/pkgProjectDetails/tsfrmProjectForm\": 211,\n\t\"./admin/pkgProjectDetails/tsfrmProjectForm.js\": 211,\n\t\"./admin/pkgTemplateSelection/tsfrmInvoiceSelection\": 212,\n\t\"./admin/pkgTemplateSelection/tsfrmInvoiceSelection.js\": 212,\n\t\"./admin/tsclsDataJson\": 185,\n\t\"./admin/tsclsDataJson.js\": 185,\n\t\"./index\": 199,\n\t\"./index.css\": 328,\n\t\"./index.js\": 199,\n\t\"./logo.svg\": 479,\n\t\"./reportWebVitals\": 236,\n\t\"./reportWebVitals.js\": 236,\n\t\"./reusable/cmpFilters\": 237,\n\t\"./reusable/cmpFilters.js\": 237,\n\t\"./reusable/tsclsDialog\": 15,\n\t\"./reusable/tsclsDialog.js\": 15,\n\t\"./reusable/tsclsLoading\": 51,\n\t\"./reusable/tsclsLoading.js\": 51,\n\t\"./reusable/tscmpChart\": 238,\n\t\"./reusable/tscmpChart.js\": 238,\n\t\"./reusable/tscmpInvoiceType\": 54,\n\t\"./reusable/tscmpInvoiceType.js\": 54,\n\t\"./reusable/tscmpProductSelection\": 234,\n\t\"./reusable/tscmpProductSelection.js\": 234,\n\t\"./reusable/tsfrmCustomerSelectionCntr\": 106,\n\t\"./reusable/tsfrmCustomerSelectionCntr.js\": 106,\n\t\"./reusable/tsfrmReports\": 109,\n\t\"./reusable/tsfrmReports.js\": 109,\n\t\"./single/pkgGST/clsGSTUtils\": 166,\n\t\"./single/pkgGST/clsGSTUtils.js\": 166,\n\t\"./single/pkgGST/frmGSTR1\": 364,\n\t\"./single/pkgGST/frmGSTR1.js\": 364,\n\t\"./single/pkgInvoice/tplInvoices/tpl.css\": 279,\n\t\"./single/pkgInvoice/tplInvoices/tpl1\": 213,\n\t\"./single/pkgInvoice/tplInvoices/tpl1.js\": 213,\n\t\"./single/pkgInvoice/tplInvoices/tpl2\": 214,\n\t\"./single/pkgInvoice/tplInvoices/tpl2.js\": 214,\n\t\"./single/pkgInvoice/tsfrmInvoice\": 230,\n\t\"./single/pkgInvoice/tsfrmInvoice.js\": 230,\n\t\"./single/pkgInvoice/tsfrmInvoiceViewer\": 235,\n\t\"./single/pkgInvoice/tsfrmInvoiceViewer.js\": 235,\n\t\"./single/pkgInvoice/tsfrmInvoicesShell\": 365,\n\t\"./single/pkgInvoice/tsfrmInvoicesShell.js\": 365,\n\t\"./single/pkgInvoice/tsfrmProductSelectionCntr\": 107,\n\t\"./single/pkgInvoice/tsfrmProductSelectionCntr.js\": 107,\n\t\"./single/pkgInvoice/tsfrmSingleInvoice\": 81,\n\t\"./single/pkgInvoice/tsfrmSingleInvoice.js\": 81,\n\t\"./single/pkgManageCustomers/tplStatement/tpl.css\": 292,\n\t\"./single/pkgManageCustomers/tplStatement/tpl1\": 222,\n\t\"./single/pkgManageCustomers/tplStatement/tpl1.js\": 222,\n\t\"./single/pkgManageCustomers/tsclsStatement\": 239,\n\t\"./single/pkgManageCustomers/tsclsStatement.js\": 239,\n\t\"./single/pkgManageCustomers/tsdlgCustomers\": 232,\n\t\"./single/pkgManageCustomers/tsdlgCustomers.js\": 232,\n\t\"./single/pkgManageCustomers/tsfrmCustomerStatement\": 366,\n\t\"./single/pkgManageCustomers/tsfrmCustomerStatement.js\": 366,\n\t\"./single/pkgManageCustomers/tsfrmCustomersGrid\": 231,\n\t\"./single/pkgManageCustomers/tsfrmCustomersGrid.js\": 231,\n\t\"./single/pkgManageProducts/tsdlgProducts\": 242,\n\t\"./single/pkgManageProducts/tsdlgProducts.js\": 242,\n\t\"./single/pkgManageProducts/tsdlgStocks\": 233,\n\t\"./single/pkgManageProducts/tsdlgStocks.js\": 233,\n\t\"./single/pkgManageProducts/tsfrmProductsGrid\": 367,\n\t\"./single/pkgManageProducts/tsfrmProductsGrid.js\": 367,\n\t\"./single/pkgManageProducts/tsfrmStocksShell\": 108,\n\t\"./single/pkgManageProducts/tsfrmStocksShell.js\": 108,\n\t\"./single/pkgPayments/tplPaymentInvoices/tpl.css\": 294,\n\t\"./single/pkgPayments/tplPaymentInvoices/tpl1\": 225,\n\t\"./single/pkgPayments/tplPaymentInvoices/tpl1.js\": 225,\n\t\"./single/pkgPayments/tsfrmPaymentHistory\": 368,\n\t\"./single/pkgPayments/tsfrmPaymentHistory.js\": 368,\n\t\"./single/pkgPayments/tsfrmPaymentInOut\": 369,\n\t\"./single/pkgPayments/tsfrmPaymentInOut.js\": 369,\n\t\"./single/pkgPayments/tsfrmPaymentInvoice\": 243,\n\t\"./single/pkgPayments/tsfrmPaymentInvoice.js\": 243,\n\t\"./single/pkgReports/frmBillWiseProfit\": 370,\n\t\"./single/pkgReports/frmBillWiseProfit.js\": 370,\n\t\"./single/pkgReports/frmCashflowReport\": 371,\n\t\"./single/pkgReports/frmCashflowReport.js\": 371,\n\t\"./single/pkgReports/tsfrmDateWiseProfitReport\": 372,\n\t\"./single/pkgReports/tsfrmDateWiseProfitReport.js\": 372,\n\t\"./single/pkgReports/tsfrmProductSaleReport\": 373,\n\t\"./single/pkgReports/tsfrmProductSaleReport.js\": 373,\n\t\"./single/pkgReports/tsfrmProductWiseProfitReport\": 374,\n\t\"./single/pkgReports/tsfrmProductWiseProfitReport.js\": 374,\n\t\"./single/pkgSupplier/tplInvoices/tpl.css\": 293,\n\t\"./single/pkgSupplier/tplInvoices/tpl1\": 223,\n\t\"./single/pkgSupplier/tplInvoices/tpl1.js\": 223,\n\t\"./single/pkgSupplier/tplInvoices/tpl2\": 224,\n\t\"./single/pkgSupplier/tplInvoices/tpl2.js\": 224,\n\t\"./single/pkgSupplier/tsfrmInvoice\": 240,\n\t\"./single/pkgSupplier/tsfrmInvoice.js\": 240,\n\t\"./single/pkgSupplier/tsfrmInvoiceViewer\": 241,\n\t\"./single/pkgSupplier/tsfrmInvoiceViewer.js\": 241,\n\t\"./single/pkgSupplier/tsfrmInvoicesShell\": 375,\n\t\"./single/pkgSupplier/tsfrmInvoicesShell.js\": 375,\n\t\"./single/pkgSupplier/tsfrmProductSelectionCntr\": 111,\n\t\"./single/pkgSupplier/tsfrmProductSelectionCntr.js\": 111,\n\t\"./single/pkgSupplier/tsfrmSingleInvoice\": 110,\n\t\"./single/pkgSupplier/tsfrmSingleInvoice.js\": 110,\n\t\"./single/tsfrmHome\": 376,\n\t\"./single/tsfrmHome.js\": 376,\n\t\"./theme\": 102,\n\t\"./theme.js\": 102,\n\t\"./tsclsGenConstants\": 8,\n\t\"./tsclsGenConstants.js\": 8,\n\t\"./tsclsGenUtils\": 2,\n\t\"./tsclsGenUtils.js\": 2,\n\t\"./tsclsHome\": 167,\n\t\"./tsclsHome.js\": 167,\n\t\"./tsframAppBar\": 227,\n\t\"./tsframAppBar.js\": 227,\n\t\"./tsframMenu\": 228,\n\t\"./tsframMenu.js\": 228,\n\t\"./tsfrmLogin\": 244,\n\t\"./tsfrmLogin.js\": 244,\n\t\"./tsfrmSinglePg\": 229,\n\t\"./tsfrmSinglePg.js\": 229\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 471;","var map = {\n\t\"./tpl.css\": 279,\n\t\"./tpl1\": 213,\n\t\"./tpl1.js\": 213,\n\t\"./tpl2\": 214,\n\t\"./tpl2.js\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 477;","var map = {\n\t\"./pkgBackupAndRestore/frmBackup\": 203,\n\t\"./pkgBackupAndRestore/frmBackup.js\": 203,\n\t\"./pkgBackupAndRestore/frmRestore\": 204,\n\t\"./pkgBackupAndRestore/frmRestore.js\": 204,\n\t\"./pkgCustomCustomersFields/tsdlgCustomerFields\": 162,\n\t\"./pkgCustomCustomersFields/tsdlgCustomerFields.js\": 162,\n\t\"./pkgCustomCustomersFields/tsfrmCstFieldsShell\": 206,\n\t\"./pkgCustomCustomersFields/tsfrmCstFieldsShell.js\": 206,\n\t\"./pkgCustomProductFields/tsdlgProductFields\": 163,\n\t\"./pkgCustomProductFields/tsdlgProductFields.js\": 163,\n\t\"./pkgCustomProductFields/tsfrmProductFieldsShell\": 207,\n\t\"./pkgCustomProductFields/tsfrmProductFieldsShell.js\": 207,\n\t\"./pkgCustomStockFields/tsdlgStockFields\": 164,\n\t\"./pkgCustomStockFields/tsdlgStockFields.js\": 164,\n\t\"./pkgCustomStockFields/tsfrmStockFieldsShell\": 208,\n\t\"./pkgCustomStockFields/tsfrmStockFieldsShell.js\": 208,\n\t\"./pkgInvoiceTypes/tsdlgInvoiceType\": 165,\n\t\"./pkgInvoiceTypes/tsdlgInvoiceType.js\": 165,\n\t\"./pkgInvoiceTypes/tsfrmInvoiceTypeShell\": 209,\n\t\"./pkgInvoiceTypes/tsfrmInvoiceTypeShell.js\": 209,\n\t\"./pkgManageUserAccount/tsdlgUser\": 133,\n\t\"./pkgManageUserAccount/tsdlgUser.js\": 133,\n\t\"./pkgManageUserAccount/tsfrmUserAccount\": 210,\n\t\"./pkgManageUserAccount/tsfrmUserAccount.js\": 210,\n\t\"./pkgProjectDetails/tsfrmProjectForm\": 211,\n\t\"./pkgProjectDetails/tsfrmProjectForm.js\": 211,\n\t\"./pkgTemplateSelection/tsfrmInvoiceSelection\": 212,\n\t\"./pkgTemplateSelection/tsfrmInvoiceSelection.js\": 212,\n\t\"./tsclsDataJson\": 185,\n\t\"./tsclsDataJson.js\": 185\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 478;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    LinearProgress\r\n} from '@material-ui/core';\r\n\r\n// import CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nclass tsclsLoading extends Component {\r\n    /**\r\n     * @props: \r\n     *  POnStopLoading: method\r\n     *  PIsLoading: boolean\r\n     *  PLoadingText: text\r\n     *  \r\n     */\r\n\r\n    pvtGetLoadingCmp() {\r\n        // var LMe = this;\r\n\r\n        return (\r\n            // <div key={'loading-dialog'} className=\"tsMiddle\">\r\n            //     <CircularProgress key=\"loading-dialog-cir\" />\r\n            // </div>\r\n            <LinearProgress />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var LMe = this;\r\n\r\n        return (\r\n            <Dialog\r\n                open={LMe.props.PIsLoading}\r\n            // maxWidth=\"md\"\r\n            >\r\n                {/* Header */}\r\n                <DialogTitle><span style={{\r\n                    fontSize: 15\r\n                }}>{LMe.props.PLoadingText || 'Loading, please wait...'}</span></DialogTitle>\r\n\r\n                {/* Dialog Content */}\r\n                <DialogContent className=\"tsVBox\" style={{ margin: '0 0 20px 0', minWidth: '400px' }}>\r\n                    {LMe.pvtGetLoadingCmp()}\r\n                </DialogContent>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsclsLoading;","import React, { Component } from 'react';\r\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { GenConstants } from '../tsclsGenConstants';\r\nimport { tsGetInvoiceTypes, tsSaveInLocalStorage, tsGetFromLocalStorage, isEmpty, tsIsInvoiceByType } from '../tsclsGenUtils';\r\n\r\nclass tscmpInvoiceType extends Component {\r\n    /**\r\n     * @props: \r\n     *  OnDialogClose\r\n     *  IsDialogOpen\r\n     *  \r\n     * @returns \r\n     */\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n        var LMe = this;\r\n\r\n        var LInvoiceType = tsGetFromLocalStorage('tsLastSelectedInvoiceType');\r\n\r\n        if (isEmpty(LInvoiceType) === false) {\r\n\r\n            LMe.pvtHandleOnChange(LInvoiceType);\r\n        }\r\n        else {\r\n\r\n            //Selecting first invoice type\r\n            var LArrInvoiceTypes = tsGetInvoiceTypes(LMe.props.PCanShowSystemTypes || false) || [];\r\n\r\n            if (LArrInvoiceTypes.length > 0) {\r\n\r\n                LMe.pvtHandleOnChange(LArrInvoiceTypes[0].ACT_CODE);\r\n            }\r\n        }\r\n    }\r\n\r\n    pvtGetItems() {\r\n        /**\r\n         * @method pvtGetItems\r\n         */\r\n\r\n        var LMe = this,\r\n            LArrMenuItem = [],\r\n            LArrInvoiceTypes = tsGetInvoiceTypes(LMe.props.PCanShowSystemTypes || false) || [];\r\n\r\n        LArrInvoiceTypes.forEach(function (p_objRecord, p_intIndex) {\r\n\r\n            //Adding Psudo node \r\n            if (p_intIndex === 0 && LMe.props.CanAddPsudoNode === true) {\r\n\r\n                LArrMenuItem.push(\r\n                    <MenuItem key={p_objRecord.PSUDO_INVOICE_TYPE_ALL + '-key'} value={GenConstants().PSUDO_INVOICE_TYPE_ALL}>\r\n                        All\r\n                    </MenuItem>\r\n                );\r\n            }//if..\r\n\r\n            LArrMenuItem.push(\r\n                <MenuItem key={p_objRecord.ACT_CODE + '-key'} value={p_objRecord.ACT_CODE}>{p_objRecord.NAME}</MenuItem>\r\n            );\r\n        });\r\n\r\n        return LArrMenuItem;\r\n    }\r\n\r\n    pvtHandleOnChange(p_value) {\r\n\r\n        var LMe = this;\r\n\r\n        LMe.props.OnChange(p_value);\r\n\r\n        if (tsIsInvoiceByType(p_value)) {\r\n\r\n            //Save in local storage\r\n            tsSaveInLocalStorage('tsLastSelectedInvoiceType', p_value);\r\n        }//if..\r\n    }\r\n\r\n    render() {\r\n\r\n        var LMe = this;\r\n\r\n        return (\r\n            <FormControl style={{ margin: '-20px 0 0 0', width: '200px' }}>\r\n                <InputLabel>{LMe.props.EmptyText}</InputLabel>\r\n                <Select\r\n                    value={LMe.props.Value}\r\n                    onChange={(e) => {\r\n                        LMe.pvtHandleOnChange(e.target.value);\r\n                    }}\r\n                >\r\n                    {LMe.pvtGetItems()}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tscmpInvoiceType;","var map = {\n\t\"./tpl.css\": 292,\n\t\"./tpl1\": 222,\n\t\"./tpl1.js\": 222\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 611;","var map = {\n\t\"./tpl.css\": 293,\n\t\"./tpl1\": 223,\n\t\"./tpl1.js\": 223,\n\t\"./tpl2\": 224,\n\t\"./tpl2.js\": 224\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 612;","var map = {\n\t\"./tpl.css\": 294,\n\t\"./tpl1\": 225,\n\t\"./tpl1.js\": 225\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 613;","\r\nexport function GenConstants() {\r\n\r\n    return {\r\n        CUSTOMER_CSTM_FIELDS: 'customerFields',\r\n        PRODUCT_CSTM_FIELDS: 'productFields',\r\n        STOCK_CSTM_FIELDS: 'stockFields',\r\n\r\n        SYSTEM_FIELD: 'SYSTEM_FIELD',\r\n        FIELD_TEXT: 'Text',\r\n        FIELD_NUMBER: 'Number',\r\n        FIELD_DATE: 'Date',\r\n        GST_FIELD: 'GST_FIELD',\r\n        STATE_FIELD: 'STATE_FIELD',\r\n\r\n        PESTICIDES: 'Pesticides',\r\n        PESTICIDE_SINGULAR_NAME: 'Pesticide',\r\n        PESTICIDE_ACT_CODE: 'actInventory',//'actPesticide',\r\n\r\n        FERTILZERS: 'Fertilizers',\r\n        FERTILZER_SINGULAR_NAME: 'Fertilizer',\r\n        FERTILZER_ACT_CODE: 'actFetilizer',\r\n\r\n        OTHER_IT: 'Other', //IT means invoice type\r\n        OTHER_IT_SINGULAR_NAME: 'Other',\r\n        OTHER_IT_ACT_CODE: 'actOther',\r\n\r\n        SEEDS: 'Seeds',\r\n        SEED_SINGULAR_NAME: 'Seed',\r\n        SEED_ACT_CODE: 'actSeed',\r\n\r\n        PSUDO_INVOICE_TYPE_ALL: -1,\r\n\r\n        PAYMENT_OUT: 'Payment Debit',\r\n        PAYMENT_OUT_ACT_CODE: 'actPaymentOut',\r\n\r\n        PAYMENT_IN: 'Payment Credit',\r\n        PAYMENT_IN_ACT_CODE: 'actPaymentIn',\r\n\r\n        GSTR1: 'GSTR-1',\r\n        B2B: 'B2B',\r\n        B2CL: 'B2CL',\r\n        B2CS: 'B2CS',\r\n        CDNR: 'CDNR',\r\n        CDNUR: 'CDNUR',\r\n        EXP: 'EXP',\r\n        HSN: 'HSN',\r\n        ITEM_WISE_SALE: 'ITEM WISE SALE',\r\n        ITEM_WISE_SALE_RETURN: 'ITEM WISE SALE RETURN',\r\n        ITEM_SUMMARY: 'ITEM SUMMARY',\r\n\r\n        //Do not change the value of these 2 contants, as it saved in product table in DB\r\n        IGST: 'IGST',\r\n        CSGST: 'CSGST',\r\n\r\n\r\n        CGST: 'CGST',\r\n        SGST: 'SGST'\r\n    };\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Link\r\n} from '@material-ui/core';\r\n\r\nimport TDialog from '../../reusable/tsclsDialog';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { BaseUrl, isEmpty, tsGetInvoiceDispNameByActionCode, tsGetInvoiceDispNoByInvoiceNo, isObjEmpty, tsGetProjectId } from '../../tsclsGenUtils';\r\nimport { GenConstants } from '../../tsclsGenConstants';\r\nimport TInvoice from './tsfrmInvoice';\r\nimport TInvoiceViewer from './tsfrmInvoiceViewer';\r\n\r\nclass tsfrmSingleInvoice extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var LMe = this;\r\n\r\n        LMe.state = {\r\n            IsAlertDialogOpen: false,\r\n            SIsDialogLoading: false,\r\n            SProductsArr: [],\r\n            SPaymentFields: {},\r\n            SCustomerData: {},\r\n            SInvoiceTpl: <></>\r\n        };\r\n\r\n        LMe.FWarningText = '';\r\n        LMe.FInvoiceRef = React.createRef();\r\n\r\n        LMe.FProjectDataFetchedForActCode = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**\r\n         * @method componentDidMount\r\n         * This method allows us to execute the React code when the component is already placed in the DOM (Document Object Model).\r\n         * This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.\r\n         * \r\n         */\r\n\r\n        this.pvtDefineProperties();\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     var LMe = this;\r\n\r\n    //     if (isEmpty(LMe.props.PInvoiceNoAndType.invoiceNo) === false && isEmpty(LMe.FInvoiceRecord) === false\r\n    //         && prevProps.PInvoiceNoAndType.invoiceNo !== LMe.props.PInvoiceNoAndType.invoiceNo) {\r\n\r\n    //         LMe.FInvoiceRecord = null;\r\n\r\n    //         LMe.setState({\r\n    //             IsAlertDialogOpen: false,\r\n    //             SIsDialogLoading: false,\r\n    //             SProductsArr: [],\r\n    //             SPaymentFields: {},\r\n    //             SCustomerData: {},\r\n    //             SInvoiceTpl: <></>\r\n    //         });\r\n\r\n    //         LMe.pvtDefineProperties();\r\n    //     }\r\n    // }\r\n\r\n    pvtDefineProperties() {\r\n        var LMe = this,\r\n            LRecord = LMe.props.PSelectedRecord || {};\r\n\r\n        LMe.FIsReadOnly = LMe.props.PIsReadOnlyMode;\r\n        LMe.FInvoiceRecord = LRecord;\r\n\r\n        if (isEmpty(LMe.FIsReadOnly) === true) {\r\n            LMe.FIsReadOnly = true;\r\n        }\r\n\r\n        if (isEmpty(LRecord.invoiceType) === false && isEmpty(LRecord.invoiceNo) === false) {\r\n\r\n            LMe.pvtFetchPaymentDetails(LRecord.invoiceType, LRecord.invoiceNo);\r\n            LMe.pvtFetchInvoicesProductByTypeAndId(LRecord.invoiceType, LRecord.invoiceNo);\r\n            return;\r\n        }\r\n        //For print Mode\r\n        LMe.pvtFetchInvoice();\r\n    }\r\n\r\n    pvtFetchInvoice() {\r\n\r\n        var LMe = this,\r\n            LParam = (LMe.props.match && LMe.props.match.params) || LMe.props.PInvoiceNoAndType || {},\r\n            LUrl = BaseUrl() + 'invoices/singleInvoice/type/' + LParam.invoiceType + '/invoiceNo/' + LParam.invoiceNo;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.FInvoiceRecord = responseJson || {};\r\n\r\n                    LMe.pvtFetchPaymentDetails(responseJson.invoiceType, responseJson.invoiceNo);\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchPaymentDetails(p_strInvoiceType, p_intInvoiceNo) {\r\n\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'payments/type/' + p_strInvoiceType + '/invoiceNo/' + p_intInvoiceNo + '/isPurchaserInvoice/0';\r\n        }//if..\r\n\r\n        LMe.setState({ SIsDialogLoading: true });\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n\r\n        if (isEmpty(LUrl) === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n\r\n                    LMe.pvtFetchCustomersFields();\r\n                    LMe.setState({ SPaymentFields: responseJson || {}, SIsDialogLoading: false });\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchInvoicesProductByTypeAndId(p_strInvoiceType, p_intInvoiceNo) {\r\n        /**\r\n         * @method pvtFetchInvoicesProductByTypeAndId\r\n         * This function will fetch the list of sold products\r\n         *\r\n         * @returns: Nothing\r\n         */\r\n        var LMe = this,\r\n            LUrl = BaseUrl() + 'invoices';\r\n\r\n        p_strInvoiceType = p_strInvoiceType || LMe.state.SInvoiceType;\r\n\r\n        if (isEmpty(p_strInvoiceType) === false && p_strInvoiceType !== GenConstants().PSUDO_INVOICE_TYPE_ALL) {\r\n\r\n            LUrl = BaseUrl() + 'invoices/type/' + p_strInvoiceType + '/invoiceNo/' + p_intInvoiceNo;\r\n        }//if..\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        LMe.setState({ SIsDialogLoading: true });\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n\r\n                        LMe.FWarningText = responseJson.message;\r\n                        LMe.setState({ IsAlertDialogOpen: true });\r\n                        return;\r\n                    }//if..\r\n\r\n                    LMe.setState({ SProductsArr: responseJson || [], SIsDialogLoading: false });\r\n                },\r\n                (error) => {\r\n\r\n                    LMe.FWarningText = error.message;\r\n                    LMe.setState({ IsAlertDialogOpen: true });\r\n                    return;\r\n                }\r\n            );\r\n    }\r\n\r\n\r\n    pvtFetchCustomersFields() {\r\n        /**\r\n         * @method pvtFetchCustomersFields\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'customFields/type/' + GenConstants().CUSTOMER_CSTM_FIELDS;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    LMe.pvtFetchCustomers(responseJson);\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtFetchCustomers(p_arrCstFields) {\r\n        /**\r\n         * @method pvtFetchCustomers\r\n         * This function will fetch the list which will visible in side panel\r\n         *\r\n         * @returns: Array of objects of list items with tooltips\r\n         */\r\n        var LMe = this,\r\n            LUrl,\r\n            LCstId = LMe.FInvoiceRecord.cstId;\r\n\r\n        LUrl = BaseUrl() + 'customers/' + LCstId;\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === 'error') {\r\n                        LMe.setState({\r\n                            FetchedData: [],\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    var LObj = {\r\n                        cstFields: p_arrCstFields,\r\n                        cstFieldValues: responseJson\r\n                    };\r\n\r\n                    LMe.setState({ SCustomerData: LObj });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        FetchedData: [],\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtHandleOnClose() {\r\n        var LMe = this;\r\n\r\n        LMe.props.OnDialogClose();\r\n    }\r\n\r\n    pvtGetDialogContent() {\r\n        var LMe = this,\r\n            LInvoice = { ...LMe.FInvoiceRecord };\r\n\r\n        LInvoice.products = LInvoice.products || LMe.state.SProductsArr || [];\r\n\r\n        LInvoice.customerData = LMe.state.SCustomerData || {};\r\n\r\n        if (isEmpty(LInvoice.products) || LInvoice.products.length === 0 ||\r\n            isObjEmpty(LMe.state.SPaymentFields) || isObjEmpty(LInvoice.customerData)) {\r\n            return <div className=\"tsMiddle tsVBox tsHelpText\">\r\n                <div>Invoice not found for showing this template,</div>\r\n                <div>Kindly <Link href=\"#/invoice\">create a new Invoice</Link> to view this template.</div>\r\n            </div>;\r\n        }\r\n\r\n        LInvoice.creditedAmount = LMe.state.SPaymentFields.credit + LMe.state.SPaymentFields.total;\r\n\r\n        if (LMe.state.SPaymentFields.credit === 0) {\r\n            LInvoice.creditedAmount = LMe.state.SPaymentFields.total - LMe.state.SPaymentFields.debit;\r\n        }\r\n\r\n        LInvoice.mode = LMe.state.SPaymentFields.mode;\r\n        LInvoice.remark = LMe.state.SPaymentFields.remark;\r\n\r\n        //For read only mode\r\n        if (LMe.FIsReadOnly === true) {\r\n\r\n            if (LMe.props.PIsDetailedView === true) {\r\n\r\n                return <TInvoiceViewer\r\n                    PSelectedRecord={LInvoice}\r\n                />;\r\n            }\r\n            else {\r\n\r\n                LMe.pvtLoadTemplate(LInvoice);\r\n                return LMe.state.SInvoiceTpl;\r\n            }\r\n        }\r\n        //For Edit mode\r\n        return <TInvoice\r\n            PIsOpenInDialog={true}\r\n            ref={LMe.FInvoiceRef}\r\n            PSelectedRecord={LInvoice}\r\n        />;\r\n    }\r\n\r\n    pvtFetchProjectDetails(p_callback) {\r\n        /**\r\n         * @method pvtFetchProjectDetails\r\n         * This function will fetch the project details from server\r\n         *\r\n         * @returns: Project Objects \r\n         */\r\n        var //LMe = this,\r\n            LUrl;\r\n\r\n        LUrl = BaseUrl() + 'project';\r\n\r\n        var LRequestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'projectid': tsGetProjectId()\r\n            }\r\n        };\r\n\r\n        // No need to check for session\r\n        fetch(LUrl, LRequestOptions)\r\n            .then((response) => response.json())\r\n            .then(\r\n                (responseJson) => {\r\n                    if (responseJson.status === false) {\r\n                        return;\r\n                    }//if..\r\n\r\n                    if (isEmpty(p_callback) === false) {\r\n\r\n                        p_callback(responseJson);\r\n                    }//if..\r\n                },\r\n                (error) => {\r\n                }\r\n            );\r\n    }\r\n\r\n    pvtLoadTemplate(p_objInvoice) {\r\n        /**\r\n         * @method pvtLoadTemplate\r\n         * This method will do following taks\r\n         * 1. Check PTemplateCode prop if got then go to  step 2\r\n         * 2. Fetch projectdata and default template from project tbl\r\n         * 3. import that template and return\r\n         */\r\n\r\n        var LMe = this,\r\n            LTplActionCode = LMe.props.PTplActionCode || LMe.FProjectDataFetchedForActCode;\r\n\r\n        if (isEmpty(LTplActionCode) === false && LMe.FProjectDataFetchedForActCode === LTplActionCode) {\r\n\r\n            return;\r\n        }\r\n\r\n        // return <>{JSON.stringify(p_objInvoice)}</>;\r\n        var L_callBack = function (p_objProjectData) {\r\n\r\n            if (isEmpty(LTplActionCode) === true) {\r\n\r\n                //if tpl action code not found then fetch default tpl\r\n                LTplActionCode = p_objProjectData.defaultInvoice;\r\n            }//if..\r\n\r\n            LMe.FProjectDataFetchedForActCode = LTplActionCode;\r\n\r\n            const TModule = require('./tplInvoices/' + (LTplActionCode)).default;\r\n\r\n            LMe.setState({\r\n                SInvoiceTpl: <TModule\r\n                    PInvoice={p_objInvoice}\r\n                    PProjectData={p_objProjectData}\r\n                    PIsShowingInApp={LMe.props.PIsShowingInApp || false}\r\n                ></TModule>\r\n            });\r\n        };\r\n\r\n        LMe.pvtFetchProjectDetails(L_callBack);\r\n    }\r\n\r\n    pvtGetDialogAction() {\r\n        var LMe = this;\r\n\r\n        //For read only mode\r\n        if (LMe.FIsReadOnly === true) {\r\n\r\n            return;\r\n        }\r\n\r\n        //For Edit mode\r\n        return <Button\r\n            style={{ margin: '0 0 0 10px' }}\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            disableElevation\r\n            onClick={() => { LMe.FInvoiceRef.current.EditInvoice(LMe.props.OnDialogClose) }}\r\n        >\r\n            Save and Print Invoice\r\n        </Button>;\r\n    }\r\n\r\n    render() {\r\n        var LMe = this,\r\n            LParam = (LMe.props.match && LMe.props.match.params) || LMe.props.PInvoiceNoAndType || {},\r\n            LRecord = LMe.FInvoiceRecord || {};\r\n\r\n        if (isEmpty(LParam.invoiceType) === false && isEmpty(LParam.invoiceNo) === false && isEmpty(LRecord) === false) {\r\n\r\n            return LMe.pvtGetDialogContent();\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* Window */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.props.IsDialogOpen}\r\n                    OnDialogClose={() => LMe.pvtHandleOnClose()}\r\n                    DialogContent={LMe.pvtGetDialogContent()}\r\n                    DialogActions={LMe.pvtGetDialogAction()}\r\n                    DialogHeader={tsGetInvoiceDispNameByActionCode(LRecord.invoiceType) + ' - Inovice No ' + tsGetInvoiceDispNoByInvoiceNo(LRecord.invoiceNo, LRecord.invoiceType)}\r\n                    DialogLoading={LMe.state.SIsDialogLoading}\r\n                    IsWindow={true}\r\n                />\r\n\r\n                {/* Warning Dialog */}\r\n                <TDialog\r\n                    IsDialogOpen={LMe.state.IsAlertDialogOpen}\r\n                    OnDialogClose={() => LMe.setState({ IsAlertDialogOpen: false })}\r\n                    DialogContent={LMe.FWarningText || ''}\r\n                    DialogActions={<></>}\r\n                    DialogHeader={'Warning'}\r\n                    IsWindow={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tsfrmSingleInvoice;"],"sourceRoot":""}